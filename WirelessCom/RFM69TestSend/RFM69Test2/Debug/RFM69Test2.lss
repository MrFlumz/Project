
RFM69Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000bd2  00000c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  0080012a  0080012a  00000c90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000204c  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d04  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105f  00000000  00000000  00003c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000560  00000000  00000000  00004cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000821  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001445  00000000  00000000  00005a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00006e7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 37       	cpi	r26, 0x7A	; 122
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 e7 05 	jmp	0xbce	; 0xbce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
  b8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <timer1_millis>
  bc:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <timer1_millis+0x1>
  c0:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <timer1_millis+0x2>
  c4:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <timer1_millis+0x3>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	a1 1d       	adc	r26, r1
  cc:	b1 1d       	adc	r27, r1
  ce:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <timer1_millis>
  d2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <timer1_millis+0x1>
  d6:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <timer1_millis+0x2>
  da:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <timer1_millis+0x3>
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <main>:
#define NODEID    3
#define TONODEID  4
#define myUART UART0

int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	2a 97       	sbiw	r28, 0x0a	; 10
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
		setHighPower(0); // if model number rfm69hw
		setPowerLevel(30); // 0-31; 5dBm to 20 dBm
		encrypt(NULL); // if set it has to be 16 bytes. example: "1234567890123456"
	}
	
	InitUART(myUART, 9600, 8, 'N');
 104:	0e e4       	ldi	r16, 0x4E	; 78
 106:	28 e0       	ldi	r18, 0x08	; 8
 108:	40 e8       	ldi	r20, 0x80	; 128
 10a:	55 e2       	ldi	r21, 0x25	; 37
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 ec       	ldi	r24, 0xC0	; 192
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 62 02 	call	0x4c4	; 0x4c4 <InitUART>
	SendString(myUART,"Ready for input\n");
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	71 e0       	ldi	r23, 0x01	; 1
 11c:	80 ec       	ldi	r24, 0xC0	; 192
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 c6 02 	call	0x58c	; 0x58c <SendString>
			else if(readChar == '-'){
				SendString(myUART,"Decrement");
				//send(TONODEID,"-",1,0); // (toNodeId,buffer,bufferSize,requestACK?)
			}
			else if (readChar != ""){
				char buff[10] = {0};
 124:	0f 2e       	mov	r0, r31
 126:	fa e0       	ldi	r31, 0x0A	; 10
 128:	df 2e       	mov	r13, r31
 12a:	f0 2d       	mov	r31, r0
 12c:	8e 01       	movw	r16, r28
 12e:	0f 5f       	subi	r16, 0xFF	; 255
 130:	1f 4f       	sbci	r17, 0xFF	; 255
				sprintf(buff,"%c", readChar);
 132:	0f 2e       	mov	r0, r31
 134:	f7 e2       	ldi	r31, 0x27	; 39
 136:	ef 2e       	mov	r14, r31
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	ff 2e       	mov	r15, r31
 13c:	f0 2d       	mov	r31, r0
			//}
			//SendString(myUART,"Received temp: ");
			//SendString(myUART, stringData);
			//SendString(myUART,"\n");
		//}
		if(CharReady(myUART)){
 13e:	80 ec       	ldi	r24, 0xC0	; 192
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 b6 02 	call	0x56c	; 0x56c <CharReady>
 146:	88 23       	and	r24, r24
 148:	d1 f3       	breq	.-12     	; 0x13e <main+0x4e>
			char readChar = ReadChar(myUART);
 14a:	80 ec       	ldi	r24, 0xC0	; 192
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 ba 02 	call	0x574	; 0x574 <ReadChar>
			if(readChar == '+'){
 152:	8b 32       	cpi	r24, 0x2B	; 43
 154:	39 f4       	brne	.+14     	; 0x164 <main+0x74>
				SendString(myUART,"Increment");
 156:	63 e1       	ldi	r22, 0x13	; 19
 158:	71 e0       	ldi	r23, 0x01	; 1
 15a:	80 ec       	ldi	r24, 0xC0	; 192
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 c6 02 	call	0x58c	; 0x58c <SendString>
 162:	ed cf       	rjmp	.-38     	; 0x13e <main+0x4e>
				//send(TONODEID,"+",1,0); // (toNodeId,buffer,bufferSize,requestACK?)
			}
			else if(readChar == '-'){
 164:	8d 32       	cpi	r24, 0x2D	; 45
 166:	39 f4       	brne	.+14     	; 0x176 <main+0x86>
				SendString(myUART,"Decrement");
 168:	6d e1       	ldi	r22, 0x1D	; 29
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 c6 02 	call	0x58c	; 0x58c <SendString>
 174:	e4 cf       	rjmp	.-56     	; 0x13e <main+0x4e>
				//send(TONODEID,"-",1,0); // (toNodeId,buffer,bufferSize,requestACK?)
			}
			else if (readChar != ""){
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	22 51       	subi	r18, 0x12	; 18
 17c:	31 40       	sbci	r19, 0x01	; 1
 17e:	f9 f2       	breq	.-66     	; 0x13e <main+0x4e>
				char buff[10] = {0};
 180:	f8 01       	movw	r30, r16
 182:	9d 2d       	mov	r25, r13
 184:	11 92       	st	Z+, r1
 186:	9a 95       	dec	r25
 188:	e9 f7       	brne	.-6      	; 0x184 <main+0x94>
				sprintf(buff,"%c", readChar);
 18a:	1f 92       	push	r1
 18c:	8f 93       	push	r24
 18e:	ff 92       	push	r15
 190:	ef 92       	push	r14
 192:	1f 93       	push	r17
 194:	0f 93       	push	r16
 196:	0e 94 fd 02 	call	0x5fa	; 0x5fa <sprintf>
				SendString(myUART, buff);
 19a:	b8 01       	movw	r22, r16
 19c:	80 ec       	ldi	r24, 0xC0	; 192
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 c6 02 	call	0x58c	; 0x58c <SendString>
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	c6 cf       	rjmp	.-116    	; 0x13e <main+0x4e>

000001b2 <maybeInterrupts>:
    millis_current = millis();
    while (!canSend() && millis() - millis_current < RF69_CSMA_LIMIT_MS) receiveDone();
    SENDERID = sender;    // TWS: Restore SenderID after it gets wiped out by receiveDone() n.b. actually now there is no receiveDone() :D
    sendFrame(sender, buffer, bufferSize, 0, 1);
    RSSI = _RSSI; // restore payload RSSI
}
 1b2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <inISR>
 1b6:	81 11       	cpse	r24, r1
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <maybeInterrupts+0xa>
 1ba:	78 94       	sei
 1bc:	08 95       	ret

000001be <select>:
 1be:	2a 98       	cbi	0x05, 2	; 5
 1c0:	f8 94       	cli
 1c2:	08 95       	ret

000001c4 <unselect>:
 1c4:	2a 9a       	sbi	0x05, 2	; 5
 1c6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <maybeInterrupts>
 1ca:	08 95       	ret

000001cc <readReg>:
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
 1d0:	0e 94 df 00 	call	0x1be	; 0x1be <select>
 1d4:	8c 2f       	mov	r24, r28
 1d6:	8f 77       	andi	r24, 0x7F	; 127
 1d8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
 1e2:	c8 2f       	mov	r28, r24
 1e4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <unselect>
 1e8:	8c 2f       	mov	r24, r28
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <writeReg>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	d8 2f       	mov	r29, r24
 1f4:	c6 2f       	mov	r28, r22
 1f6:	0e 94 df 00 	call	0x1be	; 0x1be <select>
 1fa:	8d 2f       	mov	r24, r29
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
 208:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <unselect>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <setHighPowerRegs>:
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	49 f4       	brne	.+18     	; 0x228 <setHighPowerRegs+0x16>
 216:	6d e5       	ldi	r22, 0x5D	; 93
 218:	8a e5       	ldi	r24, 0x5A	; 90
 21a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 21e:	6c e7       	ldi	r22, 0x7C	; 124
 220:	8c e5       	ldi	r24, 0x5C	; 92
 222:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 226:	08 95       	ret
 228:	65 e5       	ldi	r22, 0x55	; 85
 22a:	8a e5       	ldi	r24, 0x5A	; 90
 22c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 230:	60 e7       	ldi	r22, 0x70	; 112
 232:	8c e5       	ldi	r24, 0x5C	; 92
 234:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 238:	08 95       	ret

0000023a <setMode>:
 23a:	cf 93       	push	r28
 23c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <mode>
 240:	98 17       	cp	r25, r24
 242:	09 f4       	brne	.+2      	; 0x246 <setMode+0xc>
 244:	57 c0       	rjmp	.+174    	; 0x2f4 <setMode+0xba>
 246:	c8 2f       	mov	r28, r24
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	69 f1       	breq	.+90     	; 0x2a6 <setMode+0x6c>
 24c:	28 f4       	brcc	.+10     	; 0x258 <setMode+0x1e>
 24e:	88 23       	and	r24, r24
 250:	f1 f1       	breq	.+124    	; 0x2ce <setMode+0x94>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	91 f1       	breq	.+100    	; 0x2ba <setMode+0x80>
 256:	4e c0       	rjmp	.+156    	; 0x2f4 <setMode+0xba>
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	a1 f0       	breq	.+40     	; 0x284 <setMode+0x4a>
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	09 f0       	breq	.+2      	; 0x262 <setMode+0x28>
 260:	49 c0       	rjmp	.+146    	; 0x2f4 <setMode+0xba>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 268:	83 7e       	andi	r24, 0xE3	; 227
 26a:	68 2f       	mov	r22, r24
 26c:	6c 60       	ori	r22, 0x0C	; 12
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 278:	88 23       	and	r24, r24
 27a:	89 f1       	breq	.+98     	; 0x2de <setMode+0xa4>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 09 01 	call	0x212	; 0x212 <setHighPowerRegs>
 282:	2d c0       	rjmp	.+90     	; 0x2de <setMode+0xa4>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 28a:	83 7e       	andi	r24, 0xE3	; 227
 28c:	68 2f       	mov	r22, r24
 28e:	60 61       	ori	r22, 0x10	; 16
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29a:	88 23       	and	r24, r24
 29c:	01 f1       	breq	.+64     	; 0x2de <setMode+0xa4>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 09 01 	call	0x212	; 0x212 <setHighPowerRegs>
 2a4:	1c c0       	rjmp	.+56     	; 0x2de <setMode+0xa4>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 2ac:	83 7e       	andi	r24, 0xE3	; 227
 2ae:	68 2f       	mov	r22, r24
 2b0:	68 60       	ori	r22, 0x08	; 8
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 2b8:	12 c0       	rjmp	.+36     	; 0x2de <setMode+0xa4>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 2c0:	83 7e       	andi	r24, 0xE3	; 227
 2c2:	68 2f       	mov	r22, r24
 2c4:	64 60       	ori	r22, 0x04	; 4
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <setMode+0xa4>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 2d4:	68 2f       	mov	r22, r24
 2d6:	63 7e       	andi	r22, 0xE3	; 227
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 2de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <mode>
 2e2:	91 11       	cpse	r25, r1
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <setMode+0xb6>
 2e6:	87 e2       	ldi	r24, 0x27	; 39
 2e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 2ec:	88 23       	and	r24, r24
 2ee:	bc f7       	brge	.-18     	; 0x2de <setMode+0xa4>
 2f0:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <mode>
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <readRSSI>:
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	49 f4       	brne	.+18     	; 0x30e <readRSSI+0x16>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	83 e2       	ldi	r24, 0x23	; 35
 300:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 304:	83 e2       	ldi	r24, 0x23	; 35
 306:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 30a:	81 ff       	sbrs	r24, 1
 30c:	fb cf       	rjmp	.-10     	; 0x304 <readRSSI+0xc>
 30e:	84 e2       	ldi	r24, 0x24	; 36
 310:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	91 95       	neg	r25
 318:	81 95       	neg	r24
 31a:	91 09       	sbc	r25, r1
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	08 95       	ret

00000322 <receiveBegin>:
 322:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <DATALEN>
 326:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <SENDERID>
 32a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <TARGETID>
 32e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <PAYLOADLEN>
 332:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <ACK_REQUESTED>
 336:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <ACK_RECEIVED>
 33a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <RSSI+0x1>
 33e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <RSSI>
 342:	88 e2       	ldi	r24, 0x28	; 40
 344:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 348:	82 ff       	sbrs	r24, 2
 34a:	08 c0       	rjmp	.+16     	; 0x35c <receiveBegin+0x3a>
 34c:	8d e3       	ldi	r24, 0x3D	; 61
 34e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 352:	68 2f       	mov	r22, r24
 354:	64 60       	ori	r22, 0x04	; 4
 356:	8d e3       	ldi	r24, 0x3D	; 61
 358:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 35c:	60 e4       	ldi	r22, 0x40	; 64
 35e:	85 e2       	ldi	r24, 0x25	; 37
 360:	0e 94 f7 00 	call	0x1ee	; 0x1ee <writeReg>
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	0e 94 1d 01 	call	0x23a	; 0x23a <setMode>
 36a:	08 95       	ret

0000036c <__vector_1>:
    maybeInterrupts();
}

// Interrupt Service Routine
ISR(INT_VECT)
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	cf 93       	push	r28
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
    inISR = 1;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <inISR>
    if (mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
 39a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <__vector_1+0x38>
 3a2:	6d c0       	rjmp	.+218    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3a4:	88 e2       	ldi	r24, 0x28	; 40
 3a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <readReg>
 3aa:	82 ff       	sbrs	r24, 2
 3ac:	68 c0       	rjmp	.+208    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
    {
        setMode(RF69_MODE_STANDBY);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 1d 01 	call	0x23a	; 0x23a <setMode>
        select();
 3b4:	0e 94 df 00 	call	0x1be	; 0x1be <select>
        spi_fast_shift(REG_FIFO & 0x7F);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
        PAYLOADLEN = spi_fast_shift(0);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
 3c4:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <PAYLOADLEN>
        if(PAYLOADLEN>66) PAYLOADLEN=66;
 3c8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PAYLOADLEN>
 3cc:	83 34       	cpi	r24, 0x43	; 67
 3ce:	18 f0       	brcs	.+6      	; 0x3d6 <__vector_1+0x6a>
 3d0:	82 e4       	ldi	r24, 0x42	; 66
 3d2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <PAYLOADLEN>
        TARGETID = spi_fast_shift(0);
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
 3dc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <TARGETID>
        if(!(promiscuousMode || TARGETID == address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
 3e0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 3e4:	81 11       	cpse	r24, r1
 3e6:	0a c0       	rjmp	.+20     	; 0x3fc <__vector_1+0x90>
 3e8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <TARGETID>
 3ec:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <address>
 3f0:	98 17       	cp	r25, r24
 3f2:	21 f0       	breq	.+8      	; 0x3fc <__vector_1+0x90>
 3f4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <TARGETID>
 3f8:	8f 3f       	cpi	r24, 0xFF	; 255
 3fa:	21 f4       	brne	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
        || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
 3fc:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PAYLOADLEN>
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	38 f4       	brcc	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
        {
            PAYLOADLEN = 0;
 404:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <PAYLOADLEN>
            unselect();
 408:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <unselect>
            receiveBegin();
 40c:	0e 94 91 01 	call	0x322	; 0x322 <receiveBegin>
            return;
 410:	3f c0       	rjmp	.+126    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        }

        DATALEN = PAYLOADLEN - 3;
 412:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <PAYLOADLEN>
 416:	83 50       	subi	r24, 0x03	; 3
 418:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <DATALEN>
        SENDERID = spi_fast_shift(0);
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
 422:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <SENDERID>
        uint8_t CTLbyte = spi_fast_shift(0);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>

        ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
 42c:	98 2f       	mov	r25, r24
 42e:	90 78       	andi	r25, 0x80	; 128
 430:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <ACK_RECEIVED>
        ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 434:	80 74       	andi	r24, 0x40	; 64
 436:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ACK_REQUESTED>
        
        //interruptHook(CTLbyte);                   // TWS: hook to derived class interrupt function

        for (uint8_t i = 0; i < DATALEN; i++)
 43a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <DATALEN>
 43e:	88 23       	and	r24, r24
 440:	79 f0       	breq	.+30     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 442:	c0 e0       	ldi	r28, 0x00	; 0
        {
            DATA[i] = spi_fast_shift(0);
 444:	0c 2f       	mov	r16, r28
 446:	10 e0       	ldi	r17, 0x00	; 0
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <spi_fast_shift>
 44e:	f8 01       	movw	r30, r16
 450:	e0 5d       	subi	r30, 0xD0	; 208
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	80 83       	st	Z, r24
        ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
        ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
        
        //interruptHook(CTLbyte);                   // TWS: hook to derived class interrupt function

        for (uint8_t i = 0; i < DATALEN; i++)
 456:	cf 5f       	subi	r28, 0xFF	; 255
 458:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <DATALEN>
 45c:	c8 17       	cp	r28, r24
 45e:	90 f3       	brcs	.-28     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
        {
            DATA[i] = spi_fast_shift(0);
        }
        if (DATALEN < RF69_MAX_DATA_LEN) DATA[DATALEN] = 0; // add null at end of string
 460:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <DATALEN>
 464:	8d 33       	cpi	r24, 0x3D	; 61
 466:	30 f4       	brcc	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 468:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <DATALEN>
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	e0 5d       	subi	r30, 0xD0	; 208
 470:	fe 4f       	sbci	r31, 0xFE	; 254
 472:	10 82       	st	Z, r1
        unselect();
 474:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <unselect>
        setMode(RF69_MODE_RX);
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	0e 94 1d 01 	call	0x23a	; 0x23a <setMode>
    }
    RSSI = readRSSI(0);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <readRSSI>
 484:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <RSSI+0x1>
 488:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <RSSI>
    inISR = 0;
 48c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <inISR>
}
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	cf 91       	pop	r28
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <spi_fast_shift>:
 4b8:	8e bd       	out	0x2e, r24	; 46
 4ba:	0d b4       	in	r0, 0x2d	; 45
 4bc:	07 fe       	sbrs	r0, 7
 4be:	fd cf       	rjmp	.-6      	; 0x4ba <spi_fast_shift+0x2>
 4c0:	8e b5       	in	r24, 0x2e	; 46
 4c2:	08 95       	ret

000004c4 <InitUART>:
	BaudRate: Wanted Baud Rate (300-115200).
	Databits: Wanted number of Data Bits (5-8).
	Parity: 'E' (Even parity), 'O' (Odd parity), otherwise No Parity.
*************************************************************************/
void InitUART(unsigned int UART_adr, unsigned long BaudRate, unsigned char DataBit, char Parity)
{
 4c4:	0f 93       	push	r16
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	ec 01       	movw	r28, r24
  if ((BaudRate >= 300) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 4cc:	db 01       	movw	r26, r22
 4ce:	ca 01       	movw	r24, r20
 4d0:	8c 52       	subi	r24, 0x2C	; 44
 4d2:	91 40       	sbci	r25, 0x01	; 1
 4d4:	a1 09       	sbc	r26, r1
 4d6:	b1 09       	sbc	r27, r1
 4d8:	85 3d       	cpi	r24, 0xD5	; 213
 4da:	90 4c       	sbci	r25, 0xC0	; 192
 4dc:	a1 40       	sbci	r26, 0x01	; 1
 4de:	b1 05       	cpc	r27, r1
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <InitUART+0x20>
 4e2:	40 c0       	rjmp	.+128    	; 0x564 <InitUART+0xa0>
 4e4:	25 50       	subi	r18, 0x05	; 5
 4e6:	24 30       	cpi	r18, 0x04	; 4
 4e8:	e8 f5       	brcc	.+122    	; 0x564 <InitUART+0xa0>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSRnA = 0b00100000;
 4ea:	80 e2       	ldi	r24, 0x20	; 32
 4ec:	88 83       	st	Y, r24
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSRnB = 0b00011000;	
 4ee:	88 e1       	ldi	r24, 0x18	; 24
 4f0:	89 83       	std	Y+1, r24	; 0x01
    // Asynchronous operation, 1 stop bit
    // Bit 2 and bit 1 controls the number of data bits
    UCSRnC = (DataBit-5)<<1;
 4f2:	22 0f       	add	r18, r18
 4f4:	2a 83       	std	Y+2, r18	; 0x02
	// Set parity bits (if parity used)
	if (Parity == 'E')
 4f6:	05 34       	cpi	r16, 0x45	; 69
 4f8:	21 f4       	brne	.+8      	; 0x502 <InitUART+0x3e>
      UCSRnC |= 0b00100000;
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	80 62       	ori	r24, 0x20	; 32
 4fe:	8a 83       	std	Y+2, r24	; 0x02
 500:	05 c0       	rjmp	.+10     	; 0x50c <InitUART+0x48>
    else if (Parity == 'O')	  
 502:	0f 34       	cpi	r16, 0x4F	; 79
 504:	19 f4       	brne	.+6      	; 0x50c <InitUART+0x48>
      UCSRnC |= 0b00110000;	
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	80 63       	ori	r24, 0x30	; 48
 50a:	8a 83       	std	Y+2, r24	; 0x02
    // Set Baud Rate according to the parameter BaudRate:
    // Adding (8*Baudrate) ensures correct rounding (up/down)
    UBRRn = (XTAL+(8*BaudRate))/(16*BaudRate) - 1;
 50c:	db 01       	movw	r26, r22
 50e:	ca 01       	movw	r24, r20
 510:	80 58       	subi	r24, 0x80	; 128
 512:	9b 47       	sbci	r25, 0x7B	; 123
 514:	a1 4e       	sbci	r26, 0xE1	; 225
 516:	bf 4f       	sbci	r27, 0xFF	; 255
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	aa 1f       	adc	r26, r26
 51e:	bb 1f       	adc	r27, r27
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	aa 1f       	adc	r26, r26
 526:	bb 1f       	adc	r27, r27
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	aa 1f       	adc	r26, r26
 52e:	bb 1f       	adc	r27, r27
 530:	44 0f       	add	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	66 1f       	adc	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	66 1f       	adc	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	9a 01       	movw	r18, r20
 542:	ab 01       	movw	r20, r22
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	44 1f       	adc	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	44 1f       	adc	r20, r20
 552:	55 1f       	adc	r21, r21
 554:	bc 01       	movw	r22, r24
 556:	cd 01       	movw	r24, r26
 558:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodsi4>
 55c:	21 50       	subi	r18, 0x01	; 1
 55e:	31 09       	sbc	r19, r1
 560:	3d 83       	std	Y+5, r19	; 0x05
 562:	2c 83       	std	Y+4, r18	; 0x04
  }  
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	0f 91       	pop	r16
 56a:	08 95       	ret

0000056c <CharReady>:
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady(unsigned int UART_adr)
{
   return UCSRnA & (1<<7);
 56c:	fc 01       	movw	r30, r24
 56e:	80 81       	ld	r24, Z
}
 570:	80 78       	andi	r24, 0x80	; 128
 572:	08 95       	ret

00000574 <ReadChar>:
/*************************************************************************
Awaits new character received.
Then this character is returned.
*************************************************************************/
char ReadChar(unsigned int UART_adr)
{
 574:	fc 01       	movw	r30, r24
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
 576:	90 81       	ld	r25, Z
 578:	99 23       	and	r25, r25
 57a:	ec f7       	brge	.-6      	; 0x576 <ReadChar+0x2>
  {}                        
  // Then return it
  return UDRn;
 57c:	86 81       	ldd	r24, Z+6	; 0x06
}
 57e:	08 95       	ret

00000580 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 580:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 582:	90 81       	ld	r25, Z
 584:	95 ff       	sbrs	r25, 5
 586:	fd cf       	rjmp	.-6      	; 0x582 <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 588:	66 83       	std	Z+6, r22	; 0x06
 58a:	08 95       	ret

0000058c <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 596:	68 81       	ld	r22, Y
 598:	66 23       	and	r22, r22
 59a:	41 f0       	breq	.+16     	; 0x5ac <SendString+0x20>
 59c:	8c 01       	movw	r16, r24
 59e:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 5a0:	c8 01       	movw	r24, r16
 5a2:	0e 94 c0 02 	call	0x580	; 0x580 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 5a6:	69 91       	ld	r22, Y+
 5a8:	61 11       	cpse	r22, r1
 5aa:	fa cf       	rjmp	.-12     	; 0x5a0 <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	08 95       	ret

000005b6 <__udivmodsi4>:
 5b6:	a1 e2       	ldi	r26, 0x21	; 33
 5b8:	1a 2e       	mov	r1, r26
 5ba:	aa 1b       	sub	r26, r26
 5bc:	bb 1b       	sub	r27, r27
 5be:	fd 01       	movw	r30, r26
 5c0:	0d c0       	rjmp	.+26     	; 0x5dc <__udivmodsi4_ep>

000005c2 <__udivmodsi4_loop>:
 5c2:	aa 1f       	adc	r26, r26
 5c4:	bb 1f       	adc	r27, r27
 5c6:	ee 1f       	adc	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	a2 17       	cp	r26, r18
 5cc:	b3 07       	cpc	r27, r19
 5ce:	e4 07       	cpc	r30, r20
 5d0:	f5 07       	cpc	r31, r21
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__udivmodsi4_ep>
 5d4:	a2 1b       	sub	r26, r18
 5d6:	b3 0b       	sbc	r27, r19
 5d8:	e4 0b       	sbc	r30, r20
 5da:	f5 0b       	sbc	r31, r21

000005dc <__udivmodsi4_ep>:
 5dc:	66 1f       	adc	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	88 1f       	adc	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	1a 94       	dec	r1
 5e6:	69 f7       	brne	.-38     	; 0x5c2 <__udivmodsi4_loop>
 5e8:	60 95       	com	r22
 5ea:	70 95       	com	r23
 5ec:	80 95       	com	r24
 5ee:	90 95       	com	r25
 5f0:	9b 01       	movw	r18, r22
 5f2:	ac 01       	movw	r20, r24
 5f4:	bd 01       	movw	r22, r26
 5f6:	cf 01       	movw	r24, r30
 5f8:	08 95       	ret

000005fa <sprintf>:
 5fa:	ae e0       	ldi	r26, 0x0E	; 14
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	e3 e0       	ldi	r30, 0x03	; 3
 600:	f3 e0       	ldi	r31, 0x03	; 3
 602:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__prologue_saves__+0x1c>
 606:	0d 89       	ldd	r16, Y+21	; 0x15
 608:	1e 89       	ldd	r17, Y+22	; 0x16
 60a:	86 e0       	ldi	r24, 0x06	; 6
 60c:	8c 83       	std	Y+4, r24	; 0x04
 60e:	1a 83       	std	Y+2, r17	; 0x02
 610:	09 83       	std	Y+1, r16	; 0x01
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	9f e7       	ldi	r25, 0x7F	; 127
 616:	9e 83       	std	Y+6, r25	; 0x06
 618:	8d 83       	std	Y+5, r24	; 0x05
 61a:	ae 01       	movw	r20, r28
 61c:	47 5e       	subi	r20, 0xE7	; 231
 61e:	5f 4f       	sbci	r21, 0xFF	; 255
 620:	6f 89       	ldd	r22, Y+23	; 0x17
 622:	78 8d       	ldd	r23, Y+24	; 0x18
 624:	ce 01       	movw	r24, r28
 626:	01 96       	adiw	r24, 0x01	; 1
 628:	0e 94 1f 03 	call	0x63e	; 0x63e <vfprintf>
 62c:	ef 81       	ldd	r30, Y+7	; 0x07
 62e:	f8 85       	ldd	r31, Y+8	; 0x08
 630:	e0 0f       	add	r30, r16
 632:	f1 1f       	adc	r31, r17
 634:	10 82       	st	Z, r1
 636:	2e 96       	adiw	r28, 0x0e	; 14
 638:	e4 e0       	ldi	r30, 0x04	; 4
 63a:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__epilogue_restores__+0x1c>

0000063e <vfprintf>:
 63e:	ab e0       	ldi	r26, 0x0B	; 11
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e5 e2       	ldi	r30, 0x25	; 37
 644:	f3 e0       	ldi	r31, 0x03	; 3
 646:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__prologue_saves__>
 64a:	6c 01       	movw	r12, r24
 64c:	7b 01       	movw	r14, r22
 64e:	8a 01       	movw	r16, r20
 650:	fc 01       	movw	r30, r24
 652:	17 82       	std	Z+7, r1	; 0x07
 654:	16 82       	std	Z+6, r1	; 0x06
 656:	83 81       	ldd	r24, Z+3	; 0x03
 658:	81 ff       	sbrs	r24, 1
 65a:	cc c1       	rjmp	.+920    	; 0x9f4 <__stack+0xf5>
 65c:	ce 01       	movw	r24, r28
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	3c 01       	movw	r6, r24
 662:	f6 01       	movw	r30, r12
 664:	93 81       	ldd	r25, Z+3	; 0x03
 666:	f7 01       	movw	r30, r14
 668:	93 fd       	sbrc	r25, 3
 66a:	85 91       	lpm	r24, Z+
 66c:	93 ff       	sbrs	r25, 3
 66e:	81 91       	ld	r24, Z+
 670:	7f 01       	movw	r14, r30
 672:	88 23       	and	r24, r24
 674:	09 f4       	brne	.+2      	; 0x678 <vfprintf+0x3a>
 676:	ba c1       	rjmp	.+884    	; 0x9ec <__stack+0xed>
 678:	85 32       	cpi	r24, 0x25	; 37
 67a:	39 f4       	brne	.+14     	; 0x68a <vfprintf+0x4c>
 67c:	93 fd       	sbrc	r25, 3
 67e:	85 91       	lpm	r24, Z+
 680:	93 ff       	sbrs	r25, 3
 682:	81 91       	ld	r24, Z+
 684:	7f 01       	movw	r14, r30
 686:	85 32       	cpi	r24, 0x25	; 37
 688:	29 f4       	brne	.+10     	; 0x694 <vfprintf+0x56>
 68a:	b6 01       	movw	r22, r12
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 692:	e7 cf       	rjmp	.-50     	; 0x662 <vfprintf+0x24>
 694:	91 2c       	mov	r9, r1
 696:	21 2c       	mov	r2, r1
 698:	31 2c       	mov	r3, r1
 69a:	ff e1       	ldi	r31, 0x1F	; 31
 69c:	f3 15       	cp	r31, r3
 69e:	d8 f0       	brcs	.+54     	; 0x6d6 <vfprintf+0x98>
 6a0:	8b 32       	cpi	r24, 0x2B	; 43
 6a2:	79 f0       	breq	.+30     	; 0x6c2 <vfprintf+0x84>
 6a4:	38 f4       	brcc	.+14     	; 0x6b4 <vfprintf+0x76>
 6a6:	80 32       	cpi	r24, 0x20	; 32
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <vfprintf+0x8a>
 6aa:	83 32       	cpi	r24, 0x23	; 35
 6ac:	a1 f4       	brne	.+40     	; 0x6d6 <vfprintf+0x98>
 6ae:	23 2d       	mov	r18, r3
 6b0:	20 61       	ori	r18, 0x10	; 16
 6b2:	1d c0       	rjmp	.+58     	; 0x6ee <vfprintf+0xb0>
 6b4:	8d 32       	cpi	r24, 0x2D	; 45
 6b6:	61 f0       	breq	.+24     	; 0x6d0 <vfprintf+0x92>
 6b8:	80 33       	cpi	r24, 0x30	; 48
 6ba:	69 f4       	brne	.+26     	; 0x6d6 <vfprintf+0x98>
 6bc:	23 2d       	mov	r18, r3
 6be:	21 60       	ori	r18, 0x01	; 1
 6c0:	16 c0       	rjmp	.+44     	; 0x6ee <vfprintf+0xb0>
 6c2:	83 2d       	mov	r24, r3
 6c4:	82 60       	ori	r24, 0x02	; 2
 6c6:	38 2e       	mov	r3, r24
 6c8:	e3 2d       	mov	r30, r3
 6ca:	e4 60       	ori	r30, 0x04	; 4
 6cc:	3e 2e       	mov	r3, r30
 6ce:	2a c0       	rjmp	.+84     	; 0x724 <vfprintf+0xe6>
 6d0:	f3 2d       	mov	r31, r3
 6d2:	f8 60       	ori	r31, 0x08	; 8
 6d4:	1d c0       	rjmp	.+58     	; 0x710 <vfprintf+0xd2>
 6d6:	37 fc       	sbrc	r3, 7
 6d8:	2d c0       	rjmp	.+90     	; 0x734 <vfprintf+0xf6>
 6da:	20 ed       	ldi	r18, 0xD0	; 208
 6dc:	28 0f       	add	r18, r24
 6de:	2a 30       	cpi	r18, 0x0A	; 10
 6e0:	40 f0       	brcs	.+16     	; 0x6f2 <vfprintf+0xb4>
 6e2:	8e 32       	cpi	r24, 0x2E	; 46
 6e4:	b9 f4       	brne	.+46     	; 0x714 <vfprintf+0xd6>
 6e6:	36 fc       	sbrc	r3, 6
 6e8:	81 c1       	rjmp	.+770    	; 0x9ec <__stack+0xed>
 6ea:	23 2d       	mov	r18, r3
 6ec:	20 64       	ori	r18, 0x40	; 64
 6ee:	32 2e       	mov	r3, r18
 6f0:	19 c0       	rjmp	.+50     	; 0x724 <vfprintf+0xe6>
 6f2:	36 fe       	sbrs	r3, 6
 6f4:	06 c0       	rjmp	.+12     	; 0x702 <vfprintf+0xc4>
 6f6:	8a e0       	ldi	r24, 0x0A	; 10
 6f8:	98 9e       	mul	r9, r24
 6fa:	20 0d       	add	r18, r0
 6fc:	11 24       	eor	r1, r1
 6fe:	92 2e       	mov	r9, r18
 700:	11 c0       	rjmp	.+34     	; 0x724 <vfprintf+0xe6>
 702:	ea e0       	ldi	r30, 0x0A	; 10
 704:	2e 9e       	mul	r2, r30
 706:	20 0d       	add	r18, r0
 708:	11 24       	eor	r1, r1
 70a:	22 2e       	mov	r2, r18
 70c:	f3 2d       	mov	r31, r3
 70e:	f0 62       	ori	r31, 0x20	; 32
 710:	3f 2e       	mov	r3, r31
 712:	08 c0       	rjmp	.+16     	; 0x724 <vfprintf+0xe6>
 714:	8c 36       	cpi	r24, 0x6C	; 108
 716:	21 f4       	brne	.+8      	; 0x720 <vfprintf+0xe2>
 718:	83 2d       	mov	r24, r3
 71a:	80 68       	ori	r24, 0x80	; 128
 71c:	38 2e       	mov	r3, r24
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0xe6>
 720:	88 36       	cpi	r24, 0x68	; 104
 722:	41 f4       	brne	.+16     	; 0x734 <vfprintf+0xf6>
 724:	f7 01       	movw	r30, r14
 726:	93 fd       	sbrc	r25, 3
 728:	85 91       	lpm	r24, Z+
 72a:	93 ff       	sbrs	r25, 3
 72c:	81 91       	ld	r24, Z+
 72e:	7f 01       	movw	r14, r30
 730:	81 11       	cpse	r24, r1
 732:	b3 cf       	rjmp	.-154    	; 0x69a <vfprintf+0x5c>
 734:	98 2f       	mov	r25, r24
 736:	9f 7d       	andi	r25, 0xDF	; 223
 738:	95 54       	subi	r25, 0x45	; 69
 73a:	93 30       	cpi	r25, 0x03	; 3
 73c:	28 f4       	brcc	.+10     	; 0x748 <vfprintf+0x10a>
 73e:	0c 5f       	subi	r16, 0xFC	; 252
 740:	1f 4f       	sbci	r17, 0xFF	; 255
 742:	9f e3       	ldi	r25, 0x3F	; 63
 744:	99 83       	std	Y+1, r25	; 0x01
 746:	0d c0       	rjmp	.+26     	; 0x762 <vfprintf+0x124>
 748:	83 36       	cpi	r24, 0x63	; 99
 74a:	31 f0       	breq	.+12     	; 0x758 <vfprintf+0x11a>
 74c:	83 37       	cpi	r24, 0x73	; 115
 74e:	71 f0       	breq	.+28     	; 0x76c <vfprintf+0x12e>
 750:	83 35       	cpi	r24, 0x53	; 83
 752:	09 f0       	breq	.+2      	; 0x756 <vfprintf+0x118>
 754:	59 c0       	rjmp	.+178    	; 0x808 <vfprintf+0x1ca>
 756:	21 c0       	rjmp	.+66     	; 0x79a <vfprintf+0x15c>
 758:	f8 01       	movw	r30, r16
 75a:	80 81       	ld	r24, Z
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	0e 5f       	subi	r16, 0xFE	; 254
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	88 24       	eor	r8, r8
 764:	83 94       	inc	r8
 766:	91 2c       	mov	r9, r1
 768:	53 01       	movw	r10, r6
 76a:	13 c0       	rjmp	.+38     	; 0x792 <vfprintf+0x154>
 76c:	28 01       	movw	r4, r16
 76e:	f2 e0       	ldi	r31, 0x02	; 2
 770:	4f 0e       	add	r4, r31
 772:	51 1c       	adc	r5, r1
 774:	f8 01       	movw	r30, r16
 776:	a0 80       	ld	r10, Z
 778:	b1 80       	ldd	r11, Z+1	; 0x01
 77a:	36 fe       	sbrs	r3, 6
 77c:	03 c0       	rjmp	.+6      	; 0x784 <vfprintf+0x146>
 77e:	69 2d       	mov	r22, r9
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <vfprintf+0x14a>
 784:	6f ef       	ldi	r22, 0xFF	; 255
 786:	7f ef       	ldi	r23, 0xFF	; 255
 788:	c5 01       	movw	r24, r10
 78a:	0e 94 0b 05 	call	0xa16	; 0xa16 <strnlen>
 78e:	4c 01       	movw	r8, r24
 790:	82 01       	movw	r16, r4
 792:	f3 2d       	mov	r31, r3
 794:	ff 77       	andi	r31, 0x7F	; 127
 796:	3f 2e       	mov	r3, r31
 798:	16 c0       	rjmp	.+44     	; 0x7c6 <vfprintf+0x188>
 79a:	28 01       	movw	r4, r16
 79c:	22 e0       	ldi	r18, 0x02	; 2
 79e:	42 0e       	add	r4, r18
 7a0:	51 1c       	adc	r5, r1
 7a2:	f8 01       	movw	r30, r16
 7a4:	a0 80       	ld	r10, Z
 7a6:	b1 80       	ldd	r11, Z+1	; 0x01
 7a8:	36 fe       	sbrs	r3, 6
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <vfprintf+0x174>
 7ac:	69 2d       	mov	r22, r9
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x178>
 7b2:	6f ef       	ldi	r22, 0xFF	; 255
 7b4:	7f ef       	ldi	r23, 0xFF	; 255
 7b6:	c5 01       	movw	r24, r10
 7b8:	0e 94 00 05 	call	0xa00	; 0xa00 <strnlen_P>
 7bc:	4c 01       	movw	r8, r24
 7be:	f3 2d       	mov	r31, r3
 7c0:	f0 68       	ori	r31, 0x80	; 128
 7c2:	3f 2e       	mov	r3, r31
 7c4:	82 01       	movw	r16, r4
 7c6:	33 fc       	sbrc	r3, 3
 7c8:	1b c0       	rjmp	.+54     	; 0x800 <vfprintf+0x1c2>
 7ca:	82 2d       	mov	r24, r2
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	88 16       	cp	r8, r24
 7d0:	99 06       	cpc	r9, r25
 7d2:	b0 f4       	brcc	.+44     	; 0x800 <vfprintf+0x1c2>
 7d4:	b6 01       	movw	r22, r12
 7d6:	80 e2       	ldi	r24, 0x20	; 32
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 7de:	2a 94       	dec	r2
 7e0:	f4 cf       	rjmp	.-24     	; 0x7ca <vfprintf+0x18c>
 7e2:	f5 01       	movw	r30, r10
 7e4:	37 fc       	sbrc	r3, 7
 7e6:	85 91       	lpm	r24, Z+
 7e8:	37 fe       	sbrs	r3, 7
 7ea:	81 91       	ld	r24, Z+
 7ec:	5f 01       	movw	r10, r30
 7ee:	b6 01       	movw	r22, r12
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 7f6:	21 10       	cpse	r2, r1
 7f8:	2a 94       	dec	r2
 7fa:	21 e0       	ldi	r18, 0x01	; 1
 7fc:	82 1a       	sub	r8, r18
 7fe:	91 08       	sbc	r9, r1
 800:	81 14       	cp	r8, r1
 802:	91 04       	cpc	r9, r1
 804:	71 f7       	brne	.-36     	; 0x7e2 <vfprintf+0x1a4>
 806:	e8 c0       	rjmp	.+464    	; 0x9d8 <__stack+0xd9>
 808:	84 36       	cpi	r24, 0x64	; 100
 80a:	11 f0       	breq	.+4      	; 0x810 <vfprintf+0x1d2>
 80c:	89 36       	cpi	r24, 0x69	; 105
 80e:	41 f5       	brne	.+80     	; 0x860 <vfprintf+0x222>
 810:	f8 01       	movw	r30, r16
 812:	37 fe       	sbrs	r3, 7
 814:	07 c0       	rjmp	.+14     	; 0x824 <vfprintf+0x1e6>
 816:	60 81       	ld	r22, Z
 818:	71 81       	ldd	r23, Z+1	; 0x01
 81a:	82 81       	ldd	r24, Z+2	; 0x02
 81c:	93 81       	ldd	r25, Z+3	; 0x03
 81e:	0c 5f       	subi	r16, 0xFC	; 252
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	08 c0       	rjmp	.+16     	; 0x834 <vfprintf+0x1f6>
 824:	60 81       	ld	r22, Z
 826:	71 81       	ldd	r23, Z+1	; 0x01
 828:	07 2e       	mov	r0, r23
 82a:	00 0c       	add	r0, r0
 82c:	88 0b       	sbc	r24, r24
 82e:	99 0b       	sbc	r25, r25
 830:	0e 5f       	subi	r16, 0xFE	; 254
 832:	1f 4f       	sbci	r17, 0xFF	; 255
 834:	f3 2d       	mov	r31, r3
 836:	ff 76       	andi	r31, 0x6F	; 111
 838:	3f 2e       	mov	r3, r31
 83a:	97 ff       	sbrs	r25, 7
 83c:	09 c0       	rjmp	.+18     	; 0x850 <vfprintf+0x212>
 83e:	90 95       	com	r25
 840:	80 95       	com	r24
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	f0 68       	ori	r31, 0x80	; 128
 84e:	3f 2e       	mov	r3, r31
 850:	2a e0       	ldi	r18, 0x0A	; 10
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	a3 01       	movw	r20, r6
 856:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__ultoa_invert>
 85a:	88 2e       	mov	r8, r24
 85c:	86 18       	sub	r8, r6
 85e:	45 c0       	rjmp	.+138    	; 0x8ea <vfprintf+0x2ac>
 860:	85 37       	cpi	r24, 0x75	; 117
 862:	31 f4       	brne	.+12     	; 0x870 <vfprintf+0x232>
 864:	23 2d       	mov	r18, r3
 866:	2f 7e       	andi	r18, 0xEF	; 239
 868:	b2 2e       	mov	r11, r18
 86a:	2a e0       	ldi	r18, 0x0A	; 10
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	25 c0       	rjmp	.+74     	; 0x8ba <vfprintf+0x27c>
 870:	93 2d       	mov	r25, r3
 872:	99 7f       	andi	r25, 0xF9	; 249
 874:	b9 2e       	mov	r11, r25
 876:	8f 36       	cpi	r24, 0x6F	; 111
 878:	c1 f0       	breq	.+48     	; 0x8aa <vfprintf+0x26c>
 87a:	18 f4       	brcc	.+6      	; 0x882 <vfprintf+0x244>
 87c:	88 35       	cpi	r24, 0x58	; 88
 87e:	79 f0       	breq	.+30     	; 0x89e <vfprintf+0x260>
 880:	b5 c0       	rjmp	.+362    	; 0x9ec <__stack+0xed>
 882:	80 37       	cpi	r24, 0x70	; 112
 884:	19 f0       	breq	.+6      	; 0x88c <vfprintf+0x24e>
 886:	88 37       	cpi	r24, 0x78	; 120
 888:	21 f0       	breq	.+8      	; 0x892 <vfprintf+0x254>
 88a:	b0 c0       	rjmp	.+352    	; 0x9ec <__stack+0xed>
 88c:	e9 2f       	mov	r30, r25
 88e:	e0 61       	ori	r30, 0x10	; 16
 890:	be 2e       	mov	r11, r30
 892:	b4 fe       	sbrs	r11, 4
 894:	0d c0       	rjmp	.+26     	; 0x8b0 <vfprintf+0x272>
 896:	fb 2d       	mov	r31, r11
 898:	f4 60       	ori	r31, 0x04	; 4
 89a:	bf 2e       	mov	r11, r31
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <vfprintf+0x272>
 89e:	34 fe       	sbrs	r3, 4
 8a0:	0a c0       	rjmp	.+20     	; 0x8b6 <vfprintf+0x278>
 8a2:	29 2f       	mov	r18, r25
 8a4:	26 60       	ori	r18, 0x06	; 6
 8a6:	b2 2e       	mov	r11, r18
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <vfprintf+0x278>
 8aa:	28 e0       	ldi	r18, 0x08	; 8
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	05 c0       	rjmp	.+10     	; 0x8ba <vfprintf+0x27c>
 8b0:	20 e1       	ldi	r18, 0x10	; 16
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <vfprintf+0x27c>
 8b6:	20 e1       	ldi	r18, 0x10	; 16
 8b8:	32 e0       	ldi	r19, 0x02	; 2
 8ba:	f8 01       	movw	r30, r16
 8bc:	b7 fe       	sbrs	r11, 7
 8be:	07 c0       	rjmp	.+14     	; 0x8ce <vfprintf+0x290>
 8c0:	60 81       	ld	r22, Z
 8c2:	71 81       	ldd	r23, Z+1	; 0x01
 8c4:	82 81       	ldd	r24, Z+2	; 0x02
 8c6:	93 81       	ldd	r25, Z+3	; 0x03
 8c8:	0c 5f       	subi	r16, 0xFC	; 252
 8ca:	1f 4f       	sbci	r17, 0xFF	; 255
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <vfprintf+0x29c>
 8ce:	60 81       	ld	r22, Z
 8d0:	71 81       	ldd	r23, Z+1	; 0x01
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 5f       	subi	r16, 0xFE	; 254
 8d8:	1f 4f       	sbci	r17, 0xFF	; 255
 8da:	a3 01       	movw	r20, r6
 8dc:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__ultoa_invert>
 8e0:	88 2e       	mov	r8, r24
 8e2:	86 18       	sub	r8, r6
 8e4:	fb 2d       	mov	r31, r11
 8e6:	ff 77       	andi	r31, 0x7F	; 127
 8e8:	3f 2e       	mov	r3, r31
 8ea:	36 fe       	sbrs	r3, 6
 8ec:	0d c0       	rjmp	.+26     	; 0x908 <__stack+0x9>
 8ee:	23 2d       	mov	r18, r3
 8f0:	2e 7f       	andi	r18, 0xFE	; 254
 8f2:	a2 2e       	mov	r10, r18
 8f4:	89 14       	cp	r8, r9
 8f6:	58 f4       	brcc	.+22     	; 0x90e <__stack+0xf>
 8f8:	34 fe       	sbrs	r3, 4
 8fa:	0b c0       	rjmp	.+22     	; 0x912 <__stack+0x13>
 8fc:	32 fc       	sbrc	r3, 2
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <__stack+0x13>
 900:	83 2d       	mov	r24, r3
 902:	8e 7e       	andi	r24, 0xEE	; 238
 904:	a8 2e       	mov	r10, r24
 906:	05 c0       	rjmp	.+10     	; 0x912 <__stack+0x13>
 908:	b8 2c       	mov	r11, r8
 90a:	a3 2c       	mov	r10, r3
 90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
 90e:	b8 2c       	mov	r11, r8
 910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
 912:	b9 2c       	mov	r11, r9
 914:	a4 fe       	sbrs	r10, 4
 916:	0f c0       	rjmp	.+30     	; 0x936 <__stack+0x37>
 918:	fe 01       	movw	r30, r28
 91a:	e8 0d       	add	r30, r8
 91c:	f1 1d       	adc	r31, r1
 91e:	80 81       	ld	r24, Z
 920:	80 33       	cpi	r24, 0x30	; 48
 922:	21 f4       	brne	.+8      	; 0x92c <__stack+0x2d>
 924:	9a 2d       	mov	r25, r10
 926:	99 7e       	andi	r25, 0xE9	; 233
 928:	a9 2e       	mov	r10, r25
 92a:	09 c0       	rjmp	.+18     	; 0x93e <__stack+0x3f>
 92c:	a2 fe       	sbrs	r10, 2
 92e:	06 c0       	rjmp	.+12     	; 0x93c <__stack+0x3d>
 930:	b3 94       	inc	r11
 932:	b3 94       	inc	r11
 934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0x3f>
 936:	8a 2d       	mov	r24, r10
 938:	86 78       	andi	r24, 0x86	; 134
 93a:	09 f0       	breq	.+2      	; 0x93e <__stack+0x3f>
 93c:	b3 94       	inc	r11
 93e:	a3 fc       	sbrc	r10, 3
 940:	11 c0       	rjmp	.+34     	; 0x964 <__stack+0x65>
 942:	a0 fe       	sbrs	r10, 0
 944:	06 c0       	rjmp	.+12     	; 0x952 <__stack+0x53>
 946:	b2 14       	cp	r11, r2
 948:	88 f4       	brcc	.+34     	; 0x96c <__stack+0x6d>
 94a:	28 0c       	add	r2, r8
 94c:	92 2c       	mov	r9, r2
 94e:	9b 18       	sub	r9, r11
 950:	0e c0       	rjmp	.+28     	; 0x96e <__stack+0x6f>
 952:	b2 14       	cp	r11, r2
 954:	60 f4       	brcc	.+24     	; 0x96e <__stack+0x6f>
 956:	b6 01       	movw	r22, r12
 958:	80 e2       	ldi	r24, 0x20	; 32
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 960:	b3 94       	inc	r11
 962:	f7 cf       	rjmp	.-18     	; 0x952 <__stack+0x53>
 964:	b2 14       	cp	r11, r2
 966:	18 f4       	brcc	.+6      	; 0x96e <__stack+0x6f>
 968:	2b 18       	sub	r2, r11
 96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
 96c:	98 2c       	mov	r9, r8
 96e:	21 2c       	mov	r2, r1
 970:	a4 fe       	sbrs	r10, 4
 972:	10 c0       	rjmp	.+32     	; 0x994 <__stack+0x95>
 974:	b6 01       	movw	r22, r12
 976:	80 e3       	ldi	r24, 0x30	; 48
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 97e:	a2 fe       	sbrs	r10, 2
 980:	17 c0       	rjmp	.+46     	; 0x9b0 <__stack+0xb1>
 982:	a1 fc       	sbrc	r10, 1
 984:	03 c0       	rjmp	.+6      	; 0x98c <__stack+0x8d>
 986:	88 e7       	ldi	r24, 0x78	; 120
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>
 98c:	88 e5       	ldi	r24, 0x58	; 88
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	b6 01       	movw	r22, r12
 992:	0c c0       	rjmp	.+24     	; 0x9ac <__stack+0xad>
 994:	8a 2d       	mov	r24, r10
 996:	86 78       	andi	r24, 0x86	; 134
 998:	59 f0       	breq	.+22     	; 0x9b0 <__stack+0xb1>
 99a:	a1 fe       	sbrs	r10, 1
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>
 99e:	8b e2       	ldi	r24, 0x2B	; 43
 9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <__stack+0xa5>
 9a2:	80 e2       	ldi	r24, 0x20	; 32
 9a4:	a7 fc       	sbrc	r10, 7
 9a6:	8d e2       	ldi	r24, 0x2D	; 45
 9a8:	b6 01       	movw	r22, r12
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 9b0:	89 14       	cp	r8, r9
 9b2:	38 f4       	brcc	.+14     	; 0x9c2 <__stack+0xc3>
 9b4:	b6 01       	movw	r22, r12
 9b6:	80 e3       	ldi	r24, 0x30	; 48
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 9be:	9a 94       	dec	r9
 9c0:	f7 cf       	rjmp	.-18     	; 0x9b0 <__stack+0xb1>
 9c2:	8a 94       	dec	r8
 9c4:	f3 01       	movw	r30, r6
 9c6:	e8 0d       	add	r30, r8
 9c8:	f1 1d       	adc	r31, r1
 9ca:	80 81       	ld	r24, Z
 9cc:	b6 01       	movw	r22, r12
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 9d4:	81 10       	cpse	r8, r1
 9d6:	f5 cf       	rjmp	.-22     	; 0x9c2 <__stack+0xc3>
 9d8:	22 20       	and	r2, r2
 9da:	09 f4       	brne	.+2      	; 0x9de <__stack+0xdf>
 9dc:	42 ce       	rjmp	.-892    	; 0x662 <vfprintf+0x24>
 9de:	b6 01       	movw	r22, r12
 9e0:	80 e2       	ldi	r24, 0x20	; 32
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 16 05 	call	0xa2c	; 0xa2c <fputc>
 9e8:	2a 94       	dec	r2
 9ea:	f6 cf       	rjmp	.-20     	; 0x9d8 <__stack+0xd9>
 9ec:	f6 01       	movw	r30, r12
 9ee:	86 81       	ldd	r24, Z+6	; 0x06
 9f0:	97 81       	ldd	r25, Z+7	; 0x07
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__stack+0xf9>
 9f4:	8f ef       	ldi	r24, 0xFF	; 255
 9f6:	9f ef       	ldi	r25, 0xFF	; 255
 9f8:	2b 96       	adiw	r28, 0x0b	; 11
 9fa:	e2 e1       	ldi	r30, 0x12	; 18
 9fc:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__epilogue_restores__>

00000a00 <strnlen_P>:
 a00:	fc 01       	movw	r30, r24
 a02:	05 90       	lpm	r0, Z+
 a04:	61 50       	subi	r22, 0x01	; 1
 a06:	70 40       	sbci	r23, 0x00	; 0
 a08:	01 10       	cpse	r0, r1
 a0a:	d8 f7       	brcc	.-10     	; 0xa02 <strnlen_P+0x2>
 a0c:	80 95       	com	r24
 a0e:	90 95       	com	r25
 a10:	8e 0f       	add	r24, r30
 a12:	9f 1f       	adc	r25, r31
 a14:	08 95       	ret

00000a16 <strnlen>:
 a16:	fc 01       	movw	r30, r24
 a18:	61 50       	subi	r22, 0x01	; 1
 a1a:	70 40       	sbci	r23, 0x00	; 0
 a1c:	01 90       	ld	r0, Z+
 a1e:	01 10       	cpse	r0, r1
 a20:	d8 f7       	brcc	.-10     	; 0xa18 <strnlen+0x2>
 a22:	80 95       	com	r24
 a24:	90 95       	com	r25
 a26:	8e 0f       	add	r24, r30
 a28:	9f 1f       	adc	r25, r31
 a2a:	08 95       	ret

00000a2c <fputc>:
 a2c:	0f 93       	push	r16
 a2e:	1f 93       	push	r17
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	fb 01       	movw	r30, r22
 a36:	23 81       	ldd	r18, Z+3	; 0x03
 a38:	21 fd       	sbrc	r18, 1
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <fputc+0x16>
 a3c:	8f ef       	ldi	r24, 0xFF	; 255
 a3e:	9f ef       	ldi	r25, 0xFF	; 255
 a40:	2c c0       	rjmp	.+88     	; 0xa9a <fputc+0x6e>
 a42:	22 ff       	sbrs	r18, 2
 a44:	16 c0       	rjmp	.+44     	; 0xa72 <fputc+0x46>
 a46:	46 81       	ldd	r20, Z+6	; 0x06
 a48:	57 81       	ldd	r21, Z+7	; 0x07
 a4a:	24 81       	ldd	r18, Z+4	; 0x04
 a4c:	35 81       	ldd	r19, Z+5	; 0x05
 a4e:	42 17       	cp	r20, r18
 a50:	53 07       	cpc	r21, r19
 a52:	44 f4       	brge	.+16     	; 0xa64 <fputc+0x38>
 a54:	a0 81       	ld	r26, Z
 a56:	b1 81       	ldd	r27, Z+1	; 0x01
 a58:	9d 01       	movw	r18, r26
 a5a:	2f 5f       	subi	r18, 0xFF	; 255
 a5c:	3f 4f       	sbci	r19, 0xFF	; 255
 a5e:	31 83       	std	Z+1, r19	; 0x01
 a60:	20 83       	st	Z, r18
 a62:	8c 93       	st	X, r24
 a64:	26 81       	ldd	r18, Z+6	; 0x06
 a66:	37 81       	ldd	r19, Z+7	; 0x07
 a68:	2f 5f       	subi	r18, 0xFF	; 255
 a6a:	3f 4f       	sbci	r19, 0xFF	; 255
 a6c:	37 83       	std	Z+7, r19	; 0x07
 a6e:	26 83       	std	Z+6, r18	; 0x06
 a70:	14 c0       	rjmp	.+40     	; 0xa9a <fputc+0x6e>
 a72:	8b 01       	movw	r16, r22
 a74:	ec 01       	movw	r28, r24
 a76:	fb 01       	movw	r30, r22
 a78:	00 84       	ldd	r0, Z+8	; 0x08
 a7a:	f1 85       	ldd	r31, Z+9	; 0x09
 a7c:	e0 2d       	mov	r30, r0
 a7e:	09 95       	icall
 a80:	89 2b       	or	r24, r25
 a82:	e1 f6       	brne	.-72     	; 0xa3c <fputc+0x10>
 a84:	d8 01       	movw	r26, r16
 a86:	16 96       	adiw	r26, 0x06	; 6
 a88:	8d 91       	ld	r24, X+
 a8a:	9c 91       	ld	r25, X
 a8c:	17 97       	sbiw	r26, 0x07	; 7
 a8e:	01 96       	adiw	r24, 0x01	; 1
 a90:	17 96       	adiw	r26, 0x07	; 7
 a92:	9c 93       	st	X, r25
 a94:	8e 93       	st	-X, r24
 a96:	16 97       	sbiw	r26, 0x06	; 6
 a98:	ce 01       	movw	r24, r28
 a9a:	df 91       	pop	r29
 a9c:	cf 91       	pop	r28
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	08 95       	ret

00000aa4 <__ultoa_invert>:
 aa4:	fa 01       	movw	r30, r20
 aa6:	aa 27       	eor	r26, r26
 aa8:	28 30       	cpi	r18, 0x08	; 8
 aaa:	51 f1       	breq	.+84     	; 0xb00 <__ultoa_invert+0x5c>
 aac:	20 31       	cpi	r18, 0x10	; 16
 aae:	81 f1       	breq	.+96     	; 0xb10 <__ultoa_invert+0x6c>
 ab0:	e8 94       	clt
 ab2:	6f 93       	push	r22
 ab4:	6e 7f       	andi	r22, 0xFE	; 254
 ab6:	6e 5f       	subi	r22, 0xFE	; 254
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	af 4f       	sbci	r26, 0xFF	; 255
 ac0:	b1 e0       	ldi	r27, 0x01	; 1
 ac2:	3e d0       	rcall	.+124    	; 0xb40 <__ultoa_invert+0x9c>
 ac4:	b4 e0       	ldi	r27, 0x04	; 4
 ac6:	3c d0       	rcall	.+120    	; 0xb40 <__ultoa_invert+0x9c>
 ac8:	67 0f       	add	r22, r23
 aca:	78 1f       	adc	r23, r24
 acc:	89 1f       	adc	r24, r25
 ace:	9a 1f       	adc	r25, r26
 ad0:	a1 1d       	adc	r26, r1
 ad2:	68 0f       	add	r22, r24
 ad4:	79 1f       	adc	r23, r25
 ad6:	8a 1f       	adc	r24, r26
 ad8:	91 1d       	adc	r25, r1
 ada:	a1 1d       	adc	r26, r1
 adc:	6a 0f       	add	r22, r26
 ade:	71 1d       	adc	r23, r1
 ae0:	81 1d       	adc	r24, r1
 ae2:	91 1d       	adc	r25, r1
 ae4:	a1 1d       	adc	r26, r1
 ae6:	20 d0       	rcall	.+64     	; 0xb28 <__ultoa_invert+0x84>
 ae8:	09 f4       	brne	.+2      	; 0xaec <__ultoa_invert+0x48>
 aea:	68 94       	set
 aec:	3f 91       	pop	r19
 aee:	2a e0       	ldi	r18, 0x0A	; 10
 af0:	26 9f       	mul	r18, r22
 af2:	11 24       	eor	r1, r1
 af4:	30 19       	sub	r19, r0
 af6:	30 5d       	subi	r19, 0xD0	; 208
 af8:	31 93       	st	Z+, r19
 afa:	de f6       	brtc	.-74     	; 0xab2 <__ultoa_invert+0xe>
 afc:	cf 01       	movw	r24, r30
 afe:	08 95       	ret
 b00:	46 2f       	mov	r20, r22
 b02:	47 70       	andi	r20, 0x07	; 7
 b04:	40 5d       	subi	r20, 0xD0	; 208
 b06:	41 93       	st	Z+, r20
 b08:	b3 e0       	ldi	r27, 0x03	; 3
 b0a:	0f d0       	rcall	.+30     	; 0xb2a <__ultoa_invert+0x86>
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__ultoa_invert+0x5c>
 b0e:	f6 cf       	rjmp	.-20     	; 0xafc <__ultoa_invert+0x58>
 b10:	46 2f       	mov	r20, r22
 b12:	4f 70       	andi	r20, 0x0F	; 15
 b14:	40 5d       	subi	r20, 0xD0	; 208
 b16:	4a 33       	cpi	r20, 0x3A	; 58
 b18:	18 f0       	brcs	.+6      	; 0xb20 <__ultoa_invert+0x7c>
 b1a:	49 5d       	subi	r20, 0xD9	; 217
 b1c:	31 fd       	sbrc	r19, 1
 b1e:	40 52       	subi	r20, 0x20	; 32
 b20:	41 93       	st	Z+, r20
 b22:	02 d0       	rcall	.+4      	; 0xb28 <__ultoa_invert+0x84>
 b24:	a9 f7       	brne	.-22     	; 0xb10 <__ultoa_invert+0x6c>
 b26:	ea cf       	rjmp	.-44     	; 0xafc <__ultoa_invert+0x58>
 b28:	b4 e0       	ldi	r27, 0x04	; 4
 b2a:	a6 95       	lsr	r26
 b2c:	97 95       	ror	r25
 b2e:	87 95       	ror	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	ba 95       	dec	r27
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__ultoa_invert+0x86>
 b38:	00 97       	sbiw	r24, 0x00	; 0
 b3a:	61 05       	cpc	r22, r1
 b3c:	71 05       	cpc	r23, r1
 b3e:	08 95       	ret
 b40:	9b 01       	movw	r18, r22
 b42:	ac 01       	movw	r20, r24
 b44:	0a 2e       	mov	r0, r26
 b46:	06 94       	lsr	r0
 b48:	57 95       	ror	r21
 b4a:	47 95       	ror	r20
 b4c:	37 95       	ror	r19
 b4e:	27 95       	ror	r18
 b50:	ba 95       	dec	r27
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__ultoa_invert+0xa2>
 b54:	62 0f       	add	r22, r18
 b56:	73 1f       	adc	r23, r19
 b58:	84 1f       	adc	r24, r20
 b5a:	95 1f       	adc	r25, r21
 b5c:	a0 1d       	adc	r26, r0
 b5e:	08 95       	ret

00000b60 <__prologue_saves__>:
 b60:	2f 92       	push	r2
 b62:	3f 92       	push	r3
 b64:	4f 92       	push	r4
 b66:	5f 92       	push	r5
 b68:	6f 92       	push	r6
 b6a:	7f 92       	push	r7
 b6c:	8f 92       	push	r8
 b6e:	9f 92       	push	r9
 b70:	af 92       	push	r10
 b72:	bf 92       	push	r11
 b74:	cf 92       	push	r12
 b76:	df 92       	push	r13
 b78:	ef 92       	push	r14
 b7a:	ff 92       	push	r15
 b7c:	0f 93       	push	r16
 b7e:	1f 93       	push	r17
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	cd b7       	in	r28, 0x3d	; 61
 b86:	de b7       	in	r29, 0x3e	; 62
 b88:	ca 1b       	sub	r28, r26
 b8a:	db 0b       	sbc	r29, r27
 b8c:	0f b6       	in	r0, 0x3f	; 63
 b8e:	f8 94       	cli
 b90:	de bf       	out	0x3e, r29	; 62
 b92:	0f be       	out	0x3f, r0	; 63
 b94:	cd bf       	out	0x3d, r28	; 61
 b96:	09 94       	ijmp

00000b98 <__epilogue_restores__>:
 b98:	2a 88       	ldd	r2, Y+18	; 0x12
 b9a:	39 88       	ldd	r3, Y+17	; 0x11
 b9c:	48 88       	ldd	r4, Y+16	; 0x10
 b9e:	5f 84       	ldd	r5, Y+15	; 0x0f
 ba0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ba2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ba4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ba6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ba8:	aa 84       	ldd	r10, Y+10	; 0x0a
 baa:	b9 84       	ldd	r11, Y+9	; 0x09
 bac:	c8 84       	ldd	r12, Y+8	; 0x08
 bae:	df 80       	ldd	r13, Y+7	; 0x07
 bb0:	ee 80       	ldd	r14, Y+6	; 0x06
 bb2:	fd 80       	ldd	r15, Y+5	; 0x05
 bb4:	0c 81       	ldd	r16, Y+4	; 0x04
 bb6:	1b 81       	ldd	r17, Y+3	; 0x03
 bb8:	aa 81       	ldd	r26, Y+2	; 0x02
 bba:	b9 81       	ldd	r27, Y+1	; 0x01
 bbc:	ce 0f       	add	r28, r30
 bbe:	d1 1d       	adc	r29, r1
 bc0:	0f b6       	in	r0, 0x3f	; 63
 bc2:	f8 94       	cli
 bc4:	de bf       	out	0x3e, r29	; 62
 bc6:	0f be       	out	0x3f, r0	; 63
 bc8:	cd bf       	out	0x3d, r28	; 61
 bca:	ed 01       	movw	r28, r26
 bcc:	08 95       	ret

00000bce <_exit>:
 bce:	f8 94       	cli

00000bd0 <__stop_program>:
 bd0:	ff cf       	rjmp	.-2      	; 0xbd0 <__stop_program>
