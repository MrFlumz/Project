
RFM69Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000f1e  00000fb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  0080011a  0080011a  00000fcc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002139  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d58  00000000  00000000  00003379  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ee  00000000  00000000  000040d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000560  00000000  00000000  000051c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d2  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b5  00000000  00000000  00005ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000073a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <millis_init>:
    ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
        millis_return = timer1_millis;
    }
    return millis_return;
}
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8a 60       	ori	r24, 0x0A	; 10
  ae:	80 83       	st	Z, r24
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  b6:	88 ee       	ldi	r24, 0xE8	; 232
  b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  bc:	78 94       	sei
  be:	ef e6       	ldi	r30, 0x6F	; 111
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
    timer1_millis++;
  dc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <timer1_millis>
  e0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <timer1_millis+0x1>
  e4:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <timer1_millis+0x2>
  e8:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <timer1_millis+0x3>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	a1 1d       	adc	r26, r1
  f0:	b1 1d       	adc	r27, r1
  f2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <timer1_millis>
  f6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <timer1_millis+0x1>
  fa:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <timer1_millis+0x2>
  fe:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <timer1_millis+0x3>
}
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <main>:

#define NETWORKID 33
#define NODEID     4

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	a0 97       	sbiw	r28, 0x20	; 32
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	DDRB  |= 0b00000001;
 128:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= 0b00000001;		// sæt resetpin høj
 12a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	89 e6       	ldi	r24, 0x69	; 105
 130:	98 e1       	ldi	r25, 0x18	; 24
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x1e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x28>
 13c:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(0b00000001);	// sæt resetpin lav
 13e:	28 98       	cbi	0x05, 0	; 5
	#define myUART UART0
	InitUART(myUART, 9600, 8, 'N');
 140:	0e e4       	ldi	r16, 0x4E	; 78
 142:	28 e0       	ldi	r18, 0x08	; 8
 144:	40 e8       	ldi	r20, 0x80	; 128
 146:	55 e2       	ldi	r21, 0x25	; 37
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 12 04 	call	0x824	; 0x824 <InitUART>
	// initialize RFM69
	rfm69_init(433, NODEID,NETWORKID);
 154:	41 e2       	ldi	r20, 0x21	; 33
 156:	64 e0       	ldi	r22, 0x04	; 4
 158:	81 eb       	ldi	r24, 0xB1	; 177
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rfm69_init>
	setHighPower(0);   // if model number rfm69hw
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 c9 01 	call	0x392	; 0x392 <setHighPower>
	setPowerLevel(30); // 0-31; 5dBm to 20 dBm 
 166:	8e e1       	ldi	r24, 0x1E	; 30
 168:	0e 94 44 01 	call	0x288	; 0x288 <setPowerLevel>
	encrypt(NULL);     // if set has to be 16 bytes. example: "1234567890123456"
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 3c 02 	call	0x478	; 0x478 <encrypt>
 174:	8e 01       	movw	r16, r28
 176:	0f 5e       	subi	r16, 0xEF	; 239
 178:	1f 4f       	sbci	r17, 0xFF	; 255
 17a:	7e 01       	movw	r14, r28
 17c:	21 e2       	ldi	r18, 0x21	; 33
 17e:	e2 0e       	add	r14, r18
 180:	f1 1c       	adc	r15, r1
			{
				stringData[i]=DATA[i];
			}
			SendString(myUART, stringData);
			char rssilevel[16];
			sprintf(rssilevel,"\n\nRssi level is : %d \n",readRSSI(0));
 182:	0f 2e       	mov	r0, r31
 184:	f3 e0       	ldi	r31, 0x03	; 3
 186:	af 2e       	mov	r10, r31
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	bf 2e       	mov	r11, r31
 18c:	f0 2d       	mov	r31, r0
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	6c 01       	movw	r12, r24
	
	  
    while (1) 
    {
		//SendString(myUART, "_");
		if(receiveDone())
 194:	0e 94 22 02 	call	0x444	; 0x444 <receiveDone>
 198:	88 23       	and	r24, r24
 19a:	e1 f3       	breq	.-8      	; 0x194 <main+0x80>
 19c:	8f e1       	ldi	r24, 0x1F	; 31
 19e:	9e e4       	ldi	r25, 0x4E	; 78
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x8c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x92>
 1a6:	00 00       	nop
		{
			_delay_ms(10);
			if(ACKRequested())
 1a8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <ACKRequested>
 1ac:	f8 01       	movw	r30, r16
 1ae:	df 01       	movw	r26, r30
 1b0:	a0 1b       	sub	r26, r16
 1b2:	b1 0b       	sbc	r27, r17
				;//sendACK();
			char stringData[16];
			for(uint8_t i=0;i<16;i++) // max 16 digit can be shown in this case
			{
				stringData[i]=DATA[i];
 1b4:	a0 5e       	subi	r26, 0xE0	; 224
 1b6:	be 4f       	sbci	r27, 0xFE	; 254
 1b8:	8c 91       	ld	r24, X
 1ba:	81 93       	st	Z+, r24
		{
			_delay_ms(10);
			if(ACKRequested())
				;//sendACK();
			char stringData[16];
			for(uint8_t i=0;i<16;i++) // max 16 digit can be shown in this case
 1bc:	ee 15       	cp	r30, r14
 1be:	ff 05       	cpc	r31, r15
 1c0:	b1 f7       	brne	.-20     	; 0x1ae <main+0x9a>
			{
				stringData[i]=DATA[i];
			}
			SendString(myUART, stringData);
 1c2:	b8 01       	movw	r22, r16
 1c4:	80 ec       	ldi	r24, 0xC0	; 192
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <SendString>
			char rssilevel[16];
			sprintf(rssilevel,"\n\nRssi level is : %d \n",readRSSI(0));
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <readRSSI>
 1d2:	9f 93       	push	r25
 1d4:	8f 93       	push	r24
 1d6:	bf 92       	push	r11
 1d8:	af 92       	push	r10
 1da:	df 92       	push	r13
 1dc:	cf 92       	push	r12
 1de:	0e 94 a3 04 	call	0x946	; 0x946 <sprintf>
			SendString(myUART,	rssilevel);
 1e2:	b6 01       	movw	r22, r12
 1e4:	80 ec       	ldi	r24, 0xC0	; 192
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <SendString>
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	cd cf       	rjmp	.-102    	; 0x194 <main+0x80>

000001fa <ACKRequested>:
    millis_current = millis();
    while (!canSend() && millis() - millis_current < RF69_CSMA_LIMIT_MS) receiveDone();
    SENDERID = sender;    // TWS: Restore SenderID after it gets wiped out by receiveDone() n.b. actually now there is no receiveDone() :D
    sendFrame(sender, buffer, bufferSize, 0, 1);
    RSSI = _RSSI; // restore payload RSSI
}
 1fa:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ACK_REQUESTED>
 1fe:	88 23       	and	r24, r24
 200:	39 f0       	breq	.+14     	; 0x210 <ACKRequested+0x16>
 202:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <TARGETID>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	9f 3f       	cpi	r25, 0xFF	; 255
 20a:	19 f4       	brne	.+6      	; 0x212 <ACKRequested+0x18>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret

00000214 <maybeInterrupts>:
 214:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <inISR>
 218:	81 11       	cpse	r24, r1
 21a:	01 c0       	rjmp	.+2      	; 0x21e <maybeInterrupts+0xa>
 21c:	78 94       	sei
 21e:	08 95       	ret

00000220 <select>:
 220:	2a 98       	cbi	0x05, 2	; 5
 222:	f8 94       	cli
 224:	08 95       	ret

00000226 <unselect>:
 226:	2a 9a       	sbi	0x05, 2	; 5
 228:	0e 94 0a 01 	call	0x214	; 0x214 <maybeInterrupts>
 22c:	08 95       	ret

0000022e <readReg>:
 22e:	cf 93       	push	r28
 230:	c8 2f       	mov	r28, r24
 232:	0e 94 10 01 	call	0x220	; 0x220 <select>
 236:	8c 2f       	mov	r24, r28
 238:	8f 77       	andi	r24, 0x7F	; 127
 23a:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 244:	c8 2f       	mov	r28, r24
 246:	0e 94 13 01 	call	0x226	; 0x226 <unselect>
 24a:	8c 2f       	mov	r24, r28
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <writeReg>:
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	d8 2f       	mov	r29, r24
 256:	c6 2f       	mov	r28, r22
 258:	0e 94 10 01 	call	0x220	; 0x220 <select>
 25c:	8d 2f       	mov	r24, r29
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 264:	8c 2f       	mov	r24, r28
 266:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 26a:	0e 94 13 01 	call	0x226	; 0x226 <unselect>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <setAddress>:
 274:	68 2f       	mov	r22, r24
 276:	89 e3       	ldi	r24, 0x39	; 57
 278:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 27c:	08 95       	ret

0000027e <setNetwork>:
 27e:	68 2f       	mov	r22, r24
 280:	80 e3       	ldi	r24, 0x30	; 48
 282:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 286:	08 95       	ret

00000288 <setPowerLevel>:
 288:	cf 93       	push	r28
 28a:	c8 2f       	mov	r28, r24
 28c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isRFM69HW>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	09 f4       	brne	.+2      	; 0x296 <setPowerLevel+0xe>
 294:	c6 95       	lsr	r28
 296:	81 e1       	ldi	r24, 0x11	; 17
 298:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 29c:	80 7e       	andi	r24, 0xE0	; 224
 29e:	68 2f       	mov	r22, r24
 2a0:	6c 2b       	or	r22, r28
 2a2:	81 e1       	ldi	r24, 0x11	; 17
 2a4:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <setHighPowerRegs>:
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	49 f4       	brne	.+18     	; 0x2c2 <setHighPowerRegs+0x16>
 2b0:	6d e5       	ldi	r22, 0x5D	; 93
 2b2:	8a e5       	ldi	r24, 0x5A	; 90
 2b4:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 2b8:	6c e7       	ldi	r22, 0x7C	; 124
 2ba:	8c e5       	ldi	r24, 0x5C	; 92
 2bc:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 2c0:	08 95       	ret
 2c2:	65 e5       	ldi	r22, 0x55	; 85
 2c4:	8a e5       	ldi	r24, 0x5A	; 90
 2c6:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 2ca:	60 e7       	ldi	r22, 0x70	; 112
 2cc:	8c e5       	ldi	r24, 0x5C	; 92
 2ce:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 2d2:	08 95       	ret

000002d4 <setMode>:
 2d4:	cf 93       	push	r28
 2d6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <mode>
 2da:	98 17       	cp	r25, r24
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <setMode+0xc>
 2de:	57 c0       	rjmp	.+174    	; 0x38e <setMode+0xba>
 2e0:	c8 2f       	mov	r28, r24
 2e2:	82 30       	cpi	r24, 0x02	; 2
 2e4:	69 f1       	breq	.+90     	; 0x340 <setMode+0x6c>
 2e6:	28 f4       	brcc	.+10     	; 0x2f2 <setMode+0x1e>
 2e8:	88 23       	and	r24, r24
 2ea:	f1 f1       	breq	.+124    	; 0x368 <setMode+0x94>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	91 f1       	breq	.+100    	; 0x354 <setMode+0x80>
 2f0:	4e c0       	rjmp	.+156    	; 0x38e <setMode+0xba>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	a1 f0       	breq	.+40     	; 0x31e <setMode+0x4a>
 2f6:	84 30       	cpi	r24, 0x04	; 4
 2f8:	09 f0       	breq	.+2      	; 0x2fc <setMode+0x28>
 2fa:	49 c0       	rjmp	.+146    	; 0x38e <setMode+0xba>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 302:	83 7e       	andi	r24, 0xE3	; 227
 304:	68 2f       	mov	r22, r24
 306:	6c 60       	ori	r22, 0x0C	; 12
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 30e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isRFM69HW>
 312:	88 23       	and	r24, r24
 314:	89 f1       	breq	.+98     	; 0x378 <setMode+0xa4>
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 56 01 	call	0x2ac	; 0x2ac <setHighPowerRegs>
 31c:	2d c0       	rjmp	.+90     	; 0x378 <setMode+0xa4>
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 324:	83 7e       	andi	r24, 0xE3	; 227
 326:	68 2f       	mov	r22, r24
 328:	60 61       	ori	r22, 0x10	; 16
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 330:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isRFM69HW>
 334:	88 23       	and	r24, r24
 336:	01 f1       	breq	.+64     	; 0x378 <setMode+0xa4>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 56 01 	call	0x2ac	; 0x2ac <setHighPowerRegs>
 33e:	1c c0       	rjmp	.+56     	; 0x378 <setMode+0xa4>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 346:	83 7e       	andi	r24, 0xE3	; 227
 348:	68 2f       	mov	r22, r24
 34a:	68 60       	ori	r22, 0x08	; 8
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 352:	12 c0       	rjmp	.+36     	; 0x378 <setMode+0xa4>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 35a:	83 7e       	andi	r24, 0xE3	; 227
 35c:	68 2f       	mov	r22, r24
 35e:	64 60       	ori	r22, 0x04	; 4
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 366:	08 c0       	rjmp	.+16     	; 0x378 <setMode+0xa4>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 36e:	68 2f       	mov	r22, r24
 370:	63 7e       	andi	r22, 0xE3	; 227
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 378:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <mode>
 37c:	91 11       	cpse	r25, r1
 37e:	05 c0       	rjmp	.+10     	; 0x38a <setMode+0xb6>
 380:	87 e2       	ldi	r24, 0x27	; 39
 382:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 386:	88 23       	and	r24, r24
 388:	bc f7       	brge	.-18     	; 0x378 <setMode+0xa4>
 38a:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <mode>
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <setHighPower>:
 392:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <isRFM69HW>
 396:	81 11       	cpse	r24, r1
 398:	02 c0       	rjmp	.+4      	; 0x39e <setHighPower+0xc>
 39a:	6a e1       	ldi	r22, 0x1A	; 26
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <setHighPower+0xe>
 39e:	6f e0       	ldi	r22, 0x0F	; 15
 3a0:	83 e1       	ldi	r24, 0x13	; 19
 3a2:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 3a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isRFM69HW>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	51 f4       	brne	.+20     	; 0x3c2 <setHighPower+0x30>
 3ae:	81 e1       	ldi	r24, 0x11	; 17
 3b0:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 3b4:	8f 71       	andi	r24, 0x1F	; 31
 3b6:	68 2f       	mov	r22, r24
 3b8:	60 66       	ori	r22, 0x60	; 96
 3ba:	81 e1       	ldi	r24, 0x11	; 17
 3bc:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 3c0:	08 95       	ret
 3c2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 3c6:	60 68       	ori	r22, 0x80	; 128
 3c8:	81 e1       	ldi	r24, 0x11	; 17
 3ca:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 3ce:	08 95       	ret

000003d0 <readRSSI>:
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	49 f4       	brne	.+18     	; 0x3e6 <readRSSI+0x16>
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	83 e2       	ldi	r24, 0x23	; 35
 3d8:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 3dc:	83 e2       	ldi	r24, 0x23	; 35
 3de:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 3e2:	81 ff       	sbrs	r24, 1
 3e4:	fb cf       	rjmp	.-10     	; 0x3dc <readRSSI+0xc>
 3e6:	84 e2       	ldi	r24, 0x24	; 36
 3e8:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	91 95       	neg	r25
 3f0:	81 95       	neg	r24
 3f2:	91 09       	sbc	r25, r1
 3f4:	95 95       	asr	r25
 3f6:	87 95       	ror	r24
 3f8:	08 95       	ret

000003fa <receiveBegin>:
 3fa:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <DATALEN>
 3fe:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <SENDERID>
 402:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <TARGETID>
 406:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <PAYLOADLEN>
 40a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <ACK_REQUESTED>
 40e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <ACK_RECEIVED>
 412:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <RSSI+0x1>
 416:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <RSSI>
 41a:	88 e2       	ldi	r24, 0x28	; 40
 41c:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 420:	82 ff       	sbrs	r24, 2
 422:	08 c0       	rjmp	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 424:	8d e3       	ldi	r24, 0x3D	; 61
 426:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 42a:	68 2f       	mov	r22, r24
 42c:	64 60       	ori	r22, 0x04	; 4
 42e:	8d e3       	ldi	r24, 0x3D	; 61
 430:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 434:	60 e4       	ldi	r22, 0x40	; 64
 436:	85 e2       	ldi	r24, 0x25	; 37
 438:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setMode>
 442:	08 95       	ret

00000444 <receiveDone>:
 444:	f8 94       	cli
 446:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	49 f4       	brne	.+18     	; 0x460 <receiveDone+0x1c>
 44e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <PAYLOADLEN>
 452:	88 23       	and	r24, r24
 454:	29 f0       	breq	.+10     	; 0x460 <receiveDone+0x1c>
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setMode>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	08 95       	ret
 460:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	19 f4       	brne	.+6      	; 0x46e <receiveDone+0x2a>
 468:	78 94       	sei
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
 46e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <receiveBegin>
 472:	78 94       	sei
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	08 95       	ret

00000478 <encrypt>:
 478:	ef 92       	push	r14
 47a:	ff 92       	push	r15
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	7c 01       	movw	r14, r24
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setMode>
 48c:	e1 14       	cp	r14, r1
 48e:	f1 04       	cpc	r15, r1
 490:	89 f0       	breq	.+34     	; 0x4b4 <encrypt+0x3c>
 492:	0e 94 10 01 	call	0x220	; 0x220 <select>
 496:	8e eb       	ldi	r24, 0xBE	; 190
 498:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 49c:	e7 01       	movw	r28, r14
 49e:	87 01       	movw	r16, r14
 4a0:	00 5f       	subi	r16, 0xF0	; 240
 4a2:	1f 4f       	sbci	r17, 0xFF	; 255
 4a4:	89 91       	ld	r24, Y+
 4a6:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 4aa:	c0 17       	cp	r28, r16
 4ac:	d1 07       	cpc	r29, r17
 4ae:	d1 f7       	brne	.-12     	; 0x4a4 <encrypt+0x2c>
 4b0:	0e 94 13 01 	call	0x226	; 0x226 <unselect>
 4b4:	8d e3       	ldi	r24, 0x3D	; 61
 4b6:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 4ba:	8e 7f       	andi	r24, 0xFE	; 254
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	ef 28       	or	r14, r15
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <encrypt+0x4c>
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	68 2f       	mov	r22, r24
 4c6:	69 2b       	or	r22, r25
 4c8:	8d e3       	ldi	r24, 0x3D	; 61
 4ca:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	08 95       	ret

000004dc <rfm69_init>:
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	ae 97       	sbiw	r28, 0x2e	; 46
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	06 2f       	mov	r16, r22
 4f8:	f4 2e       	mov	r15, r20
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	29 83       	std	Y+1, r18	; 0x01
 4fe:	34 e0       	ldi	r19, 0x04	; 4
 500:	3a 83       	std	Y+2, r19	; 0x02
 502:	22 e0       	ldi	r18, 0x02	; 2
 504:	2b 83       	std	Y+3, r18	; 0x03
 506:	1c 82       	std	Y+4, r1	; 0x04
 508:	23 e0       	ldi	r18, 0x03	; 3
 50a:	2d 83       	std	Y+5, r18	; 0x05
 50c:	4d e0       	ldi	r20, 0x0D	; 13
 50e:	4e 83       	std	Y+6, r20	; 0x06
 510:	3f 83       	std	Y+7, r19	; 0x07
 512:	35 e0       	ldi	r19, 0x05	; 5
 514:	38 87       	std	Y+8, r19	; 0x08
 516:	39 87       	std	Y+9, r19	; 0x09
 518:	2a 87       	std	Y+10, r18	; 0x0a
 51a:	26 e0       	ldi	r18, 0x06	; 6
 51c:	2b 87       	std	Y+11, r18	; 0x0b
 51e:	23 e3       	ldi	r18, 0x33	; 51
 520:	2c 87       	std	Y+12, r18	; 0x0c
 522:	27 e0       	ldi	r18, 0x07	; 7
 524:	2d 87       	std	Y+13, r18	; 0x0d
 526:	8b 33       	cpi	r24, 0x3B	; 59
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	92 07       	cpc	r25, r18
 52c:	09 f4       	brne	.+2      	; 0x530 <rfm69_init+0x54>
 52e:	a5 c0       	rjmp	.+330    	; 0x67a <rfm69_init+0x19e>
 530:	81 3b       	cpi	r24, 0xB1	; 177
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	92 07       	cpc	r25, r18
 536:	09 f4       	brne	.+2      	; 0x53a <rfm69_init+0x5e>
 538:	9a c0       	rjmp	.+308    	; 0x66e <rfm69_init+0x192>
 53a:	84 36       	cpi	r24, 0x64	; 100
 53c:	93 40       	sbci	r25, 0x03	; 3
 53e:	09 f0       	breq	.+2      	; 0x542 <rfm69_init+0x66>
 540:	a2 c0       	rjmp	.+324    	; 0x686 <rfm69_init+0x1aa>
 542:	a7 c0       	rjmp	.+334    	; 0x692 <rfm69_init+0x1b6>
 544:	88 8b       	std	Y+16, r24	; 0x10
 546:	89 e0       	ldi	r24, 0x09	; 9
 548:	89 8b       	std	Y+17, r24	; 0x11
 54a:	1a 8a       	std	Y+18, r1	; 0x12
 54c:	89 e1       	ldi	r24, 0x19	; 25
 54e:	8b 8b       	std	Y+19, r24	; 0x13
 550:	92 e4       	ldi	r25, 0x42	; 66
 552:	9c 8b       	std	Y+20, r25	; 0x14
 554:	85 e2       	ldi	r24, 0x25	; 37
 556:	8d 8b       	std	Y+21, r24	; 0x15
 558:	80 e4       	ldi	r24, 0x40	; 64
 55a:	8e 8b       	std	Y+22, r24	; 0x16
 55c:	86 e2       	ldi	r24, 0x26	; 38
 55e:	8f 8b       	std	Y+23, r24	; 0x17
 560:	87 e0       	ldi	r24, 0x07	; 7
 562:	88 8f       	std	Y+24, r24	; 0x18
 564:	88 e2       	ldi	r24, 0x28	; 40
 566:	89 8f       	std	Y+25, r24	; 0x19
 568:	80 e1       	ldi	r24, 0x10	; 16
 56a:	8a 8f       	std	Y+26, r24	; 0x1a
 56c:	89 e2       	ldi	r24, 0x29	; 41
 56e:	8b 8f       	std	Y+27, r24	; 0x1b
 570:	8c ed       	ldi	r24, 0xDC	; 220
 572:	8c 8f       	std	Y+28, r24	; 0x1c
 574:	8e e2       	ldi	r24, 0x2E	; 46
 576:	8d 8f       	std	Y+29, r24	; 0x1d
 578:	88 e8       	ldi	r24, 0x88	; 136
 57a:	8e 8f       	std	Y+30, r24	; 0x1e
 57c:	8f e2       	ldi	r24, 0x2F	; 47
 57e:	8f 8f       	std	Y+31, r24	; 0x1f
 580:	8d e2       	ldi	r24, 0x2D	; 45
 582:	88 a3       	std	Y+32, r24	; 0x20
 584:	80 e3       	ldi	r24, 0x30	; 48
 586:	89 a3       	std	Y+33, r24	; 0x21
 588:	fa a2       	std	Y+34, r15	; 0x22
 58a:	27 e3       	ldi	r18, 0x37	; 55
 58c:	2b a3       	std	Y+35, r18	; 0x23
 58e:	20 e9       	ldi	r18, 0x90	; 144
 590:	2c a3       	std	Y+36, r18	; 0x24
 592:	28 e3       	ldi	r18, 0x38	; 56
 594:	2d a3       	std	Y+37, r18	; 0x25
 596:	9e a3       	std	Y+38, r25	; 0x26
 598:	9c e3       	ldi	r25, 0x3C	; 60
 59a:	9f a3       	std	Y+39, r25	; 0x27
 59c:	9f e8       	ldi	r25, 0x8F	; 143
 59e:	98 a7       	std	Y+40, r25	; 0x28
 5a0:	9d e3       	ldi	r25, 0x3D	; 61
 5a2:	99 a7       	std	Y+41, r25	; 0x29
 5a4:	92 e1       	ldi	r25, 0x12	; 18
 5a6:	9a a7       	std	Y+42, r25	; 0x2a
 5a8:	9f e6       	ldi	r25, 0x6F	; 111
 5aa:	9b a7       	std	Y+43, r25	; 0x2b
 5ac:	8c a7       	std	Y+44, r24	; 0x2c
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	8d a7       	std	Y+45, r24	; 0x2d
 5b2:	1e a6       	std	Y+46, r1	; 0x2e
 5b4:	0e 94 01 04 	call	0x802	; 0x802 <spi_init>
 5b8:	22 9a       	sbi	0x04, 2	; 4
 5ba:	2a 9a       	sbi	0x05, 2	; 5
 5bc:	52 98       	cbi	0x0a, 2	; 10
 5be:	5a 98       	cbi	0x0b, 2	; 11
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <rfm69_init+0xee>
 5c2:	6a ea       	ldi	r22, 0xAA	; 170
 5c4:	8f e2       	ldi	r24, 0x2F	; 47
 5c6:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 5ca:	8f e2       	ldi	r24, 0x2F	; 47
 5cc:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 5d0:	8a 3a       	cpi	r24, 0xAA	; 170
 5d2:	b9 f7       	brne	.-18     	; 0x5c2 <rfm69_init+0xe6>
 5d4:	04 c0       	rjmp	.+8      	; 0x5de <rfm69_init+0x102>
 5d6:	65 e5       	ldi	r22, 0x55	; 85
 5d8:	8f e2       	ldi	r24, 0x2F	; 47
 5da:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 5de:	8f e2       	ldi	r24, 0x2F	; 47
 5e0:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 5e4:	85 35       	cpi	r24, 0x55	; 85
 5e6:	b9 f7       	brne	.-18     	; 0x5d6 <rfm69_init+0xfa>
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	8f 3f       	cpi	r24, 0xFF	; 255
 5ec:	e9 f0       	breq	.+58     	; 0x628 <rfm69_init+0x14c>
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	10 e0       	ldi	r17, 0x00	; 0
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	e1 e0       	ldi	r30, 0x01	; 1
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	ec 0f       	add	r30, r28
 5fe:	fd 1f       	adc	r31, r29
 600:	e2 0f       	add	r30, r18
 602:	f3 1f       	adc	r31, r19
 604:	61 81       	ldd	r22, Z+1	; 0x01
 606:	0e 94 28 01 	call	0x250	; 0x250 <writeReg>
 60a:	1f 5f       	subi	r17, 0xFF	; 255
 60c:	21 2f       	mov	r18, r17
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	f9 01       	movw	r30, r18
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	8c 0f       	add	r24, r28
 61c:	9d 1f       	adc	r25, r29
 61e:	e8 0f       	add	r30, r24
 620:	f9 1f       	adc	r31, r25
 622:	80 81       	ld	r24, Z
 624:	8f 3f       	cpi	r24, 0xFF	; 255
 626:	31 f7       	brne	.-52     	; 0x5f4 <rfm69_init+0x118>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 3c 02 	call	0x478	; 0x478 <encrypt>
 630:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isRFM69HW>
 634:	0e 94 c9 01 	call	0x392	; 0x392 <setHighPower>
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setMode>
 63e:	87 e2       	ldi	r24, 0x27	; 39
 640:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 644:	88 23       	and	r24, r24
 646:	dc f7       	brge	.-10     	; 0x63e <rfm69_init+0x162>
 648:	e9 e6       	ldi	r30, 0x69	; 105
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	83 60       	ori	r24, 0x03	; 3
 650:	80 83       	st	Z, r24
 652:	e8 9a       	sbi	0x1d, 0	; 29
 654:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <inISR>
 658:	0e 94 53 00 	call	0xa6	; 0xa6 <millis_init>
 65c:	00 93 61 01 	sts	0x0161, r16	; 0x800161 <address>
 660:	80 2f       	mov	r24, r16
 662:	0e 94 3a 01 	call	0x274	; 0x274 <setAddress>
 666:	8f 2d       	mov	r24, r15
 668:	0e 94 3f 01 	call	0x27e	; 0x27e <setNetwork>
 66c:	18 c0       	rjmp	.+48     	; 0x69e <rfm69_init+0x1c2>
 66e:	8c e6       	ldi	r24, 0x6C	; 108
 670:	8e 87       	std	Y+14, r24	; 0x0e
 672:	88 e0       	ldi	r24, 0x08	; 8
 674:	8f 87       	std	Y+15, r24	; 0x0f
 676:	80 e4       	ldi	r24, 0x40	; 64
 678:	65 cf       	rjmp	.-310    	; 0x544 <rfm69_init+0x68>
 67a:	8e e4       	ldi	r24, 0x4E	; 78
 67c:	8e 87       	std	Y+14, r24	; 0x0e
 67e:	88 e0       	ldi	r24, 0x08	; 8
 680:	8f 87       	std	Y+15, r24	; 0x0f
 682:	80 ec       	ldi	r24, 0xC0	; 192
 684:	5f cf       	rjmp	.-322    	; 0x544 <rfm69_init+0x68>
 686:	84 ee       	ldi	r24, 0xE4	; 228
 688:	8e 87       	std	Y+14, r24	; 0x0e
 68a:	88 e0       	ldi	r24, 0x08	; 8
 68c:	8f 87       	std	Y+15, r24	; 0x0f
 68e:	80 ec       	ldi	r24, 0xC0	; 192
 690:	59 cf       	rjmp	.-334    	; 0x544 <rfm69_init+0x68>
 692:	89 ed       	ldi	r24, 0xD9	; 217
 694:	8e 87       	std	Y+14, r24	; 0x0e
 696:	88 e0       	ldi	r24, 0x08	; 8
 698:	8f 87       	std	Y+15, r24	; 0x0f
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	53 cf       	rjmp	.-346    	; 0x544 <rfm69_init+0x68>
 69e:	ae 96       	adiw	r28, 0x2e	; 46
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	f8 94       	cli
 6a4:	de bf       	out	0x3e, r29	; 62
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	cd bf       	out	0x3d, r28	; 61
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	08 95       	ret

000006b6 <__vector_1>:
    maybeInterrupts();
}

// Interrupt Service Routine
ISR(INT_VECT)
{
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	2f 93       	push	r18
 6c6:	3f 93       	push	r19
 6c8:	4f 93       	push	r20
 6ca:	5f 93       	push	r21
 6cc:	6f 93       	push	r22
 6ce:	7f 93       	push	r23
 6d0:	8f 93       	push	r24
 6d2:	9f 93       	push	r25
 6d4:	af 93       	push	r26
 6d6:	bf 93       	push	r27
 6d8:	cf 93       	push	r28
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
    inISR = 1;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <inISR>
    if (mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
 6e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	09 f0       	breq	.+2      	; 0x6ee <__vector_1+0x38>
 6ec:	6d c0       	rjmp	.+218    	; 0x7c8 <__vector_1+0x112>
 6ee:	88 e2       	ldi	r24, 0x28	; 40
 6f0:	0e 94 17 01 	call	0x22e	; 0x22e <readReg>
 6f4:	82 ff       	sbrs	r24, 2
 6f6:	68 c0       	rjmp	.+208    	; 0x7c8 <__vector_1+0x112>
    {
        setMode(RF69_MODE_STANDBY);
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setMode>
        select();
 6fe:	0e 94 10 01 	call	0x220	; 0x220 <select>
        spi_fast_shift(REG_FIFO & 0x7F);
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
        PAYLOADLEN = spi_fast_shift(0);
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 70e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <PAYLOADLEN>
        if(PAYLOADLEN>66) PAYLOADLEN=66;
 712:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <PAYLOADLEN>
 716:	83 34       	cpi	r24, 0x43	; 67
 718:	18 f0       	brcs	.+6      	; 0x720 <__vector_1+0x6a>
 71a:	82 e4       	ldi	r24, 0x42	; 66
 71c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <PAYLOADLEN>
        TARGETID = spi_fast_shift(0);
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 726:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <TARGETID>
        if(!(promiscuousMode || TARGETID == address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in promiscuous mode
 72a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 72e:	81 11       	cpse	r24, r1
 730:	0a c0       	rjmp	.+20     	; 0x746 <__vector_1+0x90>
 732:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <TARGETID>
 736:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <address>
 73a:	98 17       	cp	r25, r24
 73c:	21 f0       	breq	.+8      	; 0x746 <__vector_1+0x90>
 73e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <TARGETID>
 742:	8f 3f       	cpi	r24, 0xFF	; 255
 744:	21 f4       	brne	.+8      	; 0x74e <__vector_1+0x98>
        || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
 746:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <PAYLOADLEN>
 74a:	83 30       	cpi	r24, 0x03	; 3
 74c:	38 f4       	brcc	.+14     	; 0x75c <__vector_1+0xa6>
        {
            PAYLOADLEN = 0;
 74e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <PAYLOADLEN>
            unselect();
 752:	0e 94 13 01 	call	0x226	; 0x226 <unselect>
            receiveBegin();
 756:	0e 94 fd 01 	call	0x3fa	; 0x3fa <receiveBegin>
            return;
 75a:	3f c0       	rjmp	.+126    	; 0x7da <__vector_1+0x124>
        }

        DATALEN = PAYLOADLEN - 3;
 75c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <PAYLOADLEN>
 760:	83 50       	subi	r24, 0x03	; 3
 762:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <DATALEN>
        SENDERID = spi_fast_shift(0);
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 76c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <SENDERID>
        uint8_t CTLbyte = spi_fast_shift(0);
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>

        ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
 776:	98 2f       	mov	r25, r24
 778:	90 78       	andi	r25, 0x80	; 128
 77a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <ACK_RECEIVED>
        ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 77e:	80 74       	andi	r24, 0x40	; 64
 780:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ACK_REQUESTED>
        
        //interruptHook(CTLbyte);                   // TWS: hook to derived class interrupt function

        for (uint8_t i = 0; i < DATALEN; i++)
 784:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <DATALEN>
 788:	88 23       	and	r24, r24
 78a:	79 f0       	breq	.+30     	; 0x7aa <__vector_1+0xf4>
 78c:	c0 e0       	ldi	r28, 0x00	; 0
        {
            DATA[i] = spi_fast_shift(0);
 78e:	0c 2f       	mov	r16, r28
 790:	10 e0       	ldi	r17, 0x00	; 0
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	0e 94 0c 04 	call	0x818	; 0x818 <spi_fast_shift>
 798:	f8 01       	movw	r30, r16
 79a:	e0 5e       	subi	r30, 0xE0	; 224
 79c:	fe 4f       	sbci	r31, 0xFE	; 254
 79e:	80 83       	st	Z, r24
        ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
        ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
        
        //interruptHook(CTLbyte);                   // TWS: hook to derived class interrupt function

        for (uint8_t i = 0; i < DATALEN; i++)
 7a0:	cf 5f       	subi	r28, 0xFF	; 255
 7a2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <DATALEN>
 7a6:	c8 17       	cp	r28, r24
 7a8:	90 f3       	brcs	.-28     	; 0x78e <__vector_1+0xd8>
        {
            DATA[i] = spi_fast_shift(0);
        }
        if (DATALEN < RF69_MAX_DATA_LEN) DATA[DATALEN] = 0; // add null at end of string
 7aa:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <DATALEN>
 7ae:	8d 33       	cpi	r24, 0x3D	; 61
 7b0:	30 f4       	brcc	.+12     	; 0x7be <__vector_1+0x108>
 7b2:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <DATALEN>
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	e0 5e       	subi	r30, 0xE0	; 224
 7ba:	fe 4f       	sbci	r31, 0xFE	; 254
 7bc:	10 82       	st	Z, r1
        unselect();
 7be:	0e 94 13 01 	call	0x226	; 0x226 <unselect>
        setMode(RF69_MODE_RX);
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setMode>
    }
    RSSI = readRSSI(0);
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <readRSSI>
 7ce:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <RSSI+0x1>
 7d2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <RSSI>
    inISR = 0;
 7d6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <inISR>
}
 7da:	ff 91       	pop	r31
 7dc:	ef 91       	pop	r30
 7de:	cf 91       	pop	r28
 7e0:	bf 91       	pop	r27
 7e2:	af 91       	pop	r26
 7e4:	9f 91       	pop	r25
 7e6:	8f 91       	pop	r24
 7e8:	7f 91       	pop	r23
 7ea:	6f 91       	pop	r22
 7ec:	5f 91       	pop	r21
 7ee:	4f 91       	pop	r20
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	1f 91       	pop	r17
 7f6:	0f 91       	pop	r16
 7f8:	0f 90       	pop	r0
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	0f 90       	pop	r0
 7fe:	1f 90       	pop	r1
 800:	18 95       	reti

00000802 <spi_init>:

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
    uint8_t i;
    for (i = 0; i < len; i++) {
 802:	84 b1       	in	r24, 0x04	; 4
 804:	83 7c       	andi	r24, 0xC3	; 195
 806:	84 b9       	out	0x04, r24	; 4
 808:	84 b1       	in	r24, 0x04	; 4
 80a:	8c 62       	ori	r24, 0x2C	; 44
 80c:	84 b9       	out	0x04, r24	; 4
 80e:	80 e5       	ldi	r24, 0x50	; 80
 810:	8c bd       	out	0x2c, r24	; 44
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	8d bd       	out	0x2d, r24	; 45
 816:	08 95       	ret

00000818 <spi_fast_shift>:
}

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
    SPDR = data;
 818:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & (1<<SPIF))==0);
 81a:	0d b4       	in	r0, 0x2d	; 45
 81c:	07 fe       	sbrs	r0, 7
 81e:	fd cf       	rjmp	.-6      	; 0x81a <spi_fast_shift+0x2>
    return SPDR;
 820:	8e b5       	in	r24, 0x2e	; 46
}
 822:	08 95       	ret

00000824 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 824:	0f 93       	push	r16
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	ec 01       	movw	r28, r24
 82c:	db 01       	movw	r26, r22
 82e:	ca 01       	movw	r24, r20
 830:	8c 52       	subi	r24, 0x2C	; 44
 832:	91 40       	sbci	r25, 0x01	; 1
 834:	a1 09       	sbc	r26, r1
 836:	b1 09       	sbc	r27, r1
 838:	85 3d       	cpi	r24, 0xD5	; 213
 83a:	90 4c       	sbci	r25, 0xC0	; 192
 83c:	a1 40       	sbci	r26, 0x01	; 1
 83e:	b1 05       	cpc	r27, r1
 840:	08 f0       	brcs	.+2      	; 0x844 <InitUART+0x20>
 842:	40 c0       	rjmp	.+128    	; 0x8c4 <InitUART+0xa0>
 844:	25 50       	subi	r18, 0x05	; 5
 846:	24 30       	cpi	r18, 0x04	; 4
 848:	e8 f5       	brcc	.+122    	; 0x8c4 <InitUART+0xa0>
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	88 83       	st	Y, r24
 84e:	88 e1       	ldi	r24, 0x18	; 24
 850:	89 83       	std	Y+1, r24	; 0x01
 852:	22 0f       	add	r18, r18
 854:	2a 83       	std	Y+2, r18	; 0x02
 856:	05 34       	cpi	r16, 0x45	; 69
 858:	21 f4       	brne	.+8      	; 0x862 <InitUART+0x3e>
 85a:	8a 81       	ldd	r24, Y+2	; 0x02
 85c:	80 62       	ori	r24, 0x20	; 32
 85e:	8a 83       	std	Y+2, r24	; 0x02
 860:	05 c0       	rjmp	.+10     	; 0x86c <InitUART+0x48>
 862:	0f 34       	cpi	r16, 0x4F	; 79
 864:	19 f4       	brne	.+6      	; 0x86c <InitUART+0x48>
 866:	8a 81       	ldd	r24, Y+2	; 0x02
 868:	80 63       	ori	r24, 0x30	; 48
 86a:	8a 83       	std	Y+2, r24	; 0x02
 86c:	db 01       	movw	r26, r22
 86e:	ca 01       	movw	r24, r20
 870:	80 58       	subi	r24, 0x80	; 128
 872:	9b 47       	sbci	r25, 0x7B	; 123
 874:	a1 4e       	sbci	r26, 0xE1	; 225
 876:	bf 4f       	sbci	r27, 0xFF	; 255
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	aa 1f       	adc	r26, r26
 87e:	bb 1f       	adc	r27, r27
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	aa 1f       	adc	r26, r26
 886:	bb 1f       	adc	r27, r27
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	aa 1f       	adc	r26, r26
 88e:	bb 1f       	adc	r27, r27
 890:	44 0f       	add	r20, r20
 892:	55 1f       	adc	r21, r21
 894:	66 1f       	adc	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	44 0f       	add	r20, r20
 89a:	55 1f       	adc	r21, r21
 89c:	66 1f       	adc	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	9a 01       	movw	r18, r20
 8a2:	ab 01       	movw	r20, r22
 8a4:	22 0f       	add	r18, r18
 8a6:	33 1f       	adc	r19, r19
 8a8:	44 1f       	adc	r20, r20
 8aa:	55 1f       	adc	r21, r21
 8ac:	22 0f       	add	r18, r18
 8ae:	33 1f       	adc	r19, r19
 8b0:	44 1f       	adc	r20, r20
 8b2:	55 1f       	adc	r21, r21
 8b4:	bc 01       	movw	r22, r24
 8b6:	cd 01       	movw	r24, r26
 8b8:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodsi4>
 8bc:	21 50       	subi	r18, 0x01	; 1
 8be:	31 09       	sbc	r19, r1
 8c0:	3d 83       	std	Y+5, r19	; 0x05
 8c2:	2c 83       	std	Y+4, r18	; 0x04
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	0f 91       	pop	r16
 8ca:	08 95       	ret

000008cc <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 8cc:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 8ce:	90 81       	ld	r25, Z
 8d0:	95 ff       	sbrs	r25, 5
 8d2:	fd cf       	rjmp	.-6      	; 0x8ce <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 8d4:	66 83       	std	Z+6, r22	; 0x06
 8d6:	08 95       	ret

000008d8 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 8e2:	68 81       	ld	r22, Y
 8e4:	66 23       	and	r22, r22
 8e6:	41 f0       	breq	.+16     	; 0x8f8 <SendString+0x20>
 8e8:	8c 01       	movw	r16, r24
 8ea:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 8ec:	c8 01       	movw	r24, r16
 8ee:	0e 94 66 04 	call	0x8cc	; 0x8cc <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 8f2:	69 91       	ld	r22, Y+
 8f4:	61 11       	cpse	r22, r1
 8f6:	fa cf       	rjmp	.-12     	; 0x8ec <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	1f 91       	pop	r17
 8fe:	0f 91       	pop	r16
 900:	08 95       	ret

00000902 <__udivmodsi4>:
 902:	a1 e2       	ldi	r26, 0x21	; 33
 904:	1a 2e       	mov	r1, r26
 906:	aa 1b       	sub	r26, r26
 908:	bb 1b       	sub	r27, r27
 90a:	fd 01       	movw	r30, r26
 90c:	0d c0       	rjmp	.+26     	; 0x928 <__udivmodsi4_ep>

0000090e <__udivmodsi4_loop>:
 90e:	aa 1f       	adc	r26, r26
 910:	bb 1f       	adc	r27, r27
 912:	ee 1f       	adc	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	a2 17       	cp	r26, r18
 918:	b3 07       	cpc	r27, r19
 91a:	e4 07       	cpc	r30, r20
 91c:	f5 07       	cpc	r31, r21
 91e:	20 f0       	brcs	.+8      	; 0x928 <__udivmodsi4_ep>
 920:	a2 1b       	sub	r26, r18
 922:	b3 0b       	sbc	r27, r19
 924:	e4 0b       	sbc	r30, r20
 926:	f5 0b       	sbc	r31, r21

00000928 <__udivmodsi4_ep>:
 928:	66 1f       	adc	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	1a 94       	dec	r1
 932:	69 f7       	brne	.-38     	; 0x90e <__udivmodsi4_loop>
 934:	60 95       	com	r22
 936:	70 95       	com	r23
 938:	80 95       	com	r24
 93a:	90 95       	com	r25
 93c:	9b 01       	movw	r18, r22
 93e:	ac 01       	movw	r20, r24
 940:	bd 01       	movw	r22, r26
 942:	cf 01       	movw	r24, r30
 944:	08 95       	ret

00000946 <sprintf>:
 946:	ae e0       	ldi	r26, 0x0E	; 14
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	e9 ea       	ldi	r30, 0xA9	; 169
 94c:	f4 e0       	ldi	r31, 0x04	; 4
 94e:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__prologue_saves__+0x1c>
 952:	0d 89       	ldd	r16, Y+21	; 0x15
 954:	1e 89       	ldd	r17, Y+22	; 0x16
 956:	86 e0       	ldi	r24, 0x06	; 6
 958:	8c 83       	std	Y+4, r24	; 0x04
 95a:	1a 83       	std	Y+2, r17	; 0x02
 95c:	09 83       	std	Y+1, r16	; 0x01
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	9f e7       	ldi	r25, 0x7F	; 127
 962:	9e 83       	std	Y+6, r25	; 0x06
 964:	8d 83       	std	Y+5, r24	; 0x05
 966:	ae 01       	movw	r20, r28
 968:	47 5e       	subi	r20, 0xE7	; 231
 96a:	5f 4f       	sbci	r21, 0xFF	; 255
 96c:	6f 89       	ldd	r22, Y+23	; 0x17
 96e:	78 8d       	ldd	r23, Y+24	; 0x18
 970:	ce 01       	movw	r24, r28
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	0e 94 c5 04 	call	0x98a	; 0x98a <vfprintf>
 978:	ef 81       	ldd	r30, Y+7	; 0x07
 97a:	f8 85       	ldd	r31, Y+8	; 0x08
 97c:	e0 0f       	add	r30, r16
 97e:	f1 1f       	adc	r31, r17
 980:	10 82       	st	Z, r1
 982:	2e 96       	adiw	r28, 0x0e	; 14
 984:	e4 e0       	ldi	r30, 0x04	; 4
 986:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__epilogue_restores__+0x1c>

0000098a <vfprintf>:
 98a:	ab e0       	ldi	r26, 0x0B	; 11
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	eb ec       	ldi	r30, 0xCB	; 203
 990:	f4 e0       	ldi	r31, 0x04	; 4
 992:	0c 94 56 07 	jmp	0xeac	; 0xeac <__prologue_saves__>
 996:	6c 01       	movw	r12, r24
 998:	7b 01       	movw	r14, r22
 99a:	8a 01       	movw	r16, r20
 99c:	fc 01       	movw	r30, r24
 99e:	17 82       	std	Z+7, r1	; 0x07
 9a0:	16 82       	std	Z+6, r1	; 0x06
 9a2:	83 81       	ldd	r24, Z+3	; 0x03
 9a4:	81 ff       	sbrs	r24, 1
 9a6:	cc c1       	rjmp	.+920    	; 0xd40 <vfprintf+0x3b6>
 9a8:	ce 01       	movw	r24, r28
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	3c 01       	movw	r6, r24
 9ae:	f6 01       	movw	r30, r12
 9b0:	93 81       	ldd	r25, Z+3	; 0x03
 9b2:	f7 01       	movw	r30, r14
 9b4:	93 fd       	sbrc	r25, 3
 9b6:	85 91       	lpm	r24, Z+
 9b8:	93 ff       	sbrs	r25, 3
 9ba:	81 91       	ld	r24, Z+
 9bc:	7f 01       	movw	r14, r30
 9be:	88 23       	and	r24, r24
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <vfprintf+0x3a>
 9c2:	ba c1       	rjmp	.+884    	; 0xd38 <vfprintf+0x3ae>
 9c4:	85 32       	cpi	r24, 0x25	; 37
 9c6:	39 f4       	brne	.+14     	; 0x9d6 <vfprintf+0x4c>
 9c8:	93 fd       	sbrc	r25, 3
 9ca:	85 91       	lpm	r24, Z+
 9cc:	93 ff       	sbrs	r25, 3
 9ce:	81 91       	ld	r24, Z+
 9d0:	7f 01       	movw	r14, r30
 9d2:	85 32       	cpi	r24, 0x25	; 37
 9d4:	29 f4       	brne	.+10     	; 0x9e0 <vfprintf+0x56>
 9d6:	b6 01       	movw	r22, r12
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 9de:	e7 cf       	rjmp	.-50     	; 0x9ae <vfprintf+0x24>
 9e0:	91 2c       	mov	r9, r1
 9e2:	21 2c       	mov	r2, r1
 9e4:	31 2c       	mov	r3, r1
 9e6:	ff e1       	ldi	r31, 0x1F	; 31
 9e8:	f3 15       	cp	r31, r3
 9ea:	d8 f0       	brcs	.+54     	; 0xa22 <vfprintf+0x98>
 9ec:	8b 32       	cpi	r24, 0x2B	; 43
 9ee:	79 f0       	breq	.+30     	; 0xa0e <vfprintf+0x84>
 9f0:	38 f4       	brcc	.+14     	; 0xa00 <vfprintf+0x76>
 9f2:	80 32       	cpi	r24, 0x20	; 32
 9f4:	79 f0       	breq	.+30     	; 0xa14 <vfprintf+0x8a>
 9f6:	83 32       	cpi	r24, 0x23	; 35
 9f8:	a1 f4       	brne	.+40     	; 0xa22 <vfprintf+0x98>
 9fa:	23 2d       	mov	r18, r3
 9fc:	20 61       	ori	r18, 0x10	; 16
 9fe:	1d c0       	rjmp	.+58     	; 0xa3a <vfprintf+0xb0>
 a00:	8d 32       	cpi	r24, 0x2D	; 45
 a02:	61 f0       	breq	.+24     	; 0xa1c <vfprintf+0x92>
 a04:	80 33       	cpi	r24, 0x30	; 48
 a06:	69 f4       	brne	.+26     	; 0xa22 <vfprintf+0x98>
 a08:	23 2d       	mov	r18, r3
 a0a:	21 60       	ori	r18, 0x01	; 1
 a0c:	16 c0       	rjmp	.+44     	; 0xa3a <vfprintf+0xb0>
 a0e:	83 2d       	mov	r24, r3
 a10:	82 60       	ori	r24, 0x02	; 2
 a12:	38 2e       	mov	r3, r24
 a14:	e3 2d       	mov	r30, r3
 a16:	e4 60       	ori	r30, 0x04	; 4
 a18:	3e 2e       	mov	r3, r30
 a1a:	2a c0       	rjmp	.+84     	; 0xa70 <vfprintf+0xe6>
 a1c:	f3 2d       	mov	r31, r3
 a1e:	f8 60       	ori	r31, 0x08	; 8
 a20:	1d c0       	rjmp	.+58     	; 0xa5c <vfprintf+0xd2>
 a22:	37 fc       	sbrc	r3, 7
 a24:	2d c0       	rjmp	.+90     	; 0xa80 <vfprintf+0xf6>
 a26:	20 ed       	ldi	r18, 0xD0	; 208
 a28:	28 0f       	add	r18, r24
 a2a:	2a 30       	cpi	r18, 0x0A	; 10
 a2c:	40 f0       	brcs	.+16     	; 0xa3e <vfprintf+0xb4>
 a2e:	8e 32       	cpi	r24, 0x2E	; 46
 a30:	b9 f4       	brne	.+46     	; 0xa60 <vfprintf+0xd6>
 a32:	36 fc       	sbrc	r3, 6
 a34:	81 c1       	rjmp	.+770    	; 0xd38 <vfprintf+0x3ae>
 a36:	23 2d       	mov	r18, r3
 a38:	20 64       	ori	r18, 0x40	; 64
 a3a:	32 2e       	mov	r3, r18
 a3c:	19 c0       	rjmp	.+50     	; 0xa70 <vfprintf+0xe6>
 a3e:	36 fe       	sbrs	r3, 6
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <vfprintf+0xc4>
 a42:	8a e0       	ldi	r24, 0x0A	; 10
 a44:	98 9e       	mul	r9, r24
 a46:	20 0d       	add	r18, r0
 a48:	11 24       	eor	r1, r1
 a4a:	92 2e       	mov	r9, r18
 a4c:	11 c0       	rjmp	.+34     	; 0xa70 <vfprintf+0xe6>
 a4e:	ea e0       	ldi	r30, 0x0A	; 10
 a50:	2e 9e       	mul	r2, r30
 a52:	20 0d       	add	r18, r0
 a54:	11 24       	eor	r1, r1
 a56:	22 2e       	mov	r2, r18
 a58:	f3 2d       	mov	r31, r3
 a5a:	f0 62       	ori	r31, 0x20	; 32
 a5c:	3f 2e       	mov	r3, r31
 a5e:	08 c0       	rjmp	.+16     	; 0xa70 <vfprintf+0xe6>
 a60:	8c 36       	cpi	r24, 0x6C	; 108
 a62:	21 f4       	brne	.+8      	; 0xa6c <vfprintf+0xe2>
 a64:	83 2d       	mov	r24, r3
 a66:	80 68       	ori	r24, 0x80	; 128
 a68:	38 2e       	mov	r3, r24
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <vfprintf+0xe6>
 a6c:	88 36       	cpi	r24, 0x68	; 104
 a6e:	41 f4       	brne	.+16     	; 0xa80 <vfprintf+0xf6>
 a70:	f7 01       	movw	r30, r14
 a72:	93 fd       	sbrc	r25, 3
 a74:	85 91       	lpm	r24, Z+
 a76:	93 ff       	sbrs	r25, 3
 a78:	81 91       	ld	r24, Z+
 a7a:	7f 01       	movw	r14, r30
 a7c:	81 11       	cpse	r24, r1
 a7e:	b3 cf       	rjmp	.-154    	; 0x9e6 <vfprintf+0x5c>
 a80:	98 2f       	mov	r25, r24
 a82:	9f 7d       	andi	r25, 0xDF	; 223
 a84:	95 54       	subi	r25, 0x45	; 69
 a86:	93 30       	cpi	r25, 0x03	; 3
 a88:	28 f4       	brcc	.+10     	; 0xa94 <vfprintf+0x10a>
 a8a:	0c 5f       	subi	r16, 0xFC	; 252
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	9f e3       	ldi	r25, 0x3F	; 63
 a90:	99 83       	std	Y+1, r25	; 0x01
 a92:	0d c0       	rjmp	.+26     	; 0xaae <vfprintf+0x124>
 a94:	83 36       	cpi	r24, 0x63	; 99
 a96:	31 f0       	breq	.+12     	; 0xaa4 <vfprintf+0x11a>
 a98:	83 37       	cpi	r24, 0x73	; 115
 a9a:	71 f0       	breq	.+28     	; 0xab8 <vfprintf+0x12e>
 a9c:	83 35       	cpi	r24, 0x53	; 83
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <vfprintf+0x118>
 aa0:	59 c0       	rjmp	.+178    	; 0xb54 <vfprintf+0x1ca>
 aa2:	21 c0       	rjmp	.+66     	; 0xae6 <vfprintf+0x15c>
 aa4:	f8 01       	movw	r30, r16
 aa6:	80 81       	ld	r24, Z
 aa8:	89 83       	std	Y+1, r24	; 0x01
 aaa:	0e 5f       	subi	r16, 0xFE	; 254
 aac:	1f 4f       	sbci	r17, 0xFF	; 255
 aae:	88 24       	eor	r8, r8
 ab0:	83 94       	inc	r8
 ab2:	91 2c       	mov	r9, r1
 ab4:	53 01       	movw	r10, r6
 ab6:	13 c0       	rjmp	.+38     	; 0xade <vfprintf+0x154>
 ab8:	28 01       	movw	r4, r16
 aba:	f2 e0       	ldi	r31, 0x02	; 2
 abc:	4f 0e       	add	r4, r31
 abe:	51 1c       	adc	r5, r1
 ac0:	f8 01       	movw	r30, r16
 ac2:	a0 80       	ld	r10, Z
 ac4:	b1 80       	ldd	r11, Z+1	; 0x01
 ac6:	36 fe       	sbrs	r3, 6
 ac8:	03 c0       	rjmp	.+6      	; 0xad0 <vfprintf+0x146>
 aca:	69 2d       	mov	r22, r9
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <vfprintf+0x14a>
 ad0:	6f ef       	ldi	r22, 0xFF	; 255
 ad2:	7f ef       	ldi	r23, 0xFF	; 255
 ad4:	c5 01       	movw	r24, r10
 ad6:	0e 94 b1 06 	call	0xd62	; 0xd62 <strnlen>
 ada:	4c 01       	movw	r8, r24
 adc:	82 01       	movw	r16, r4
 ade:	f3 2d       	mov	r31, r3
 ae0:	ff 77       	andi	r31, 0x7F	; 127
 ae2:	3f 2e       	mov	r3, r31
 ae4:	16 c0       	rjmp	.+44     	; 0xb12 <vfprintf+0x188>
 ae6:	28 01       	movw	r4, r16
 ae8:	22 e0       	ldi	r18, 0x02	; 2
 aea:	42 0e       	add	r4, r18
 aec:	51 1c       	adc	r5, r1
 aee:	f8 01       	movw	r30, r16
 af0:	a0 80       	ld	r10, Z
 af2:	b1 80       	ldd	r11, Z+1	; 0x01
 af4:	36 fe       	sbrs	r3, 6
 af6:	03 c0       	rjmp	.+6      	; 0xafe <vfprintf+0x174>
 af8:	69 2d       	mov	r22, r9
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <vfprintf+0x178>
 afe:	6f ef       	ldi	r22, 0xFF	; 255
 b00:	7f ef       	ldi	r23, 0xFF	; 255
 b02:	c5 01       	movw	r24, r10
 b04:	0e 94 a6 06 	call	0xd4c	; 0xd4c <strnlen_P>
 b08:	4c 01       	movw	r8, r24
 b0a:	f3 2d       	mov	r31, r3
 b0c:	f0 68       	ori	r31, 0x80	; 128
 b0e:	3f 2e       	mov	r3, r31
 b10:	82 01       	movw	r16, r4
 b12:	33 fc       	sbrc	r3, 3
 b14:	1b c0       	rjmp	.+54     	; 0xb4c <vfprintf+0x1c2>
 b16:	82 2d       	mov	r24, r2
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	88 16       	cp	r8, r24
 b1c:	99 06       	cpc	r9, r25
 b1e:	b0 f4       	brcc	.+44     	; 0xb4c <vfprintf+0x1c2>
 b20:	b6 01       	movw	r22, r12
 b22:	80 e2       	ldi	r24, 0x20	; 32
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 b2a:	2a 94       	dec	r2
 b2c:	f4 cf       	rjmp	.-24     	; 0xb16 <vfprintf+0x18c>
 b2e:	f5 01       	movw	r30, r10
 b30:	37 fc       	sbrc	r3, 7
 b32:	85 91       	lpm	r24, Z+
 b34:	37 fe       	sbrs	r3, 7
 b36:	81 91       	ld	r24, Z+
 b38:	5f 01       	movw	r10, r30
 b3a:	b6 01       	movw	r22, r12
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 b42:	21 10       	cpse	r2, r1
 b44:	2a 94       	dec	r2
 b46:	21 e0       	ldi	r18, 0x01	; 1
 b48:	82 1a       	sub	r8, r18
 b4a:	91 08       	sbc	r9, r1
 b4c:	81 14       	cp	r8, r1
 b4e:	91 04       	cpc	r9, r1
 b50:	71 f7       	brne	.-36     	; 0xb2e <vfprintf+0x1a4>
 b52:	e8 c0       	rjmp	.+464    	; 0xd24 <vfprintf+0x39a>
 b54:	84 36       	cpi	r24, 0x64	; 100
 b56:	11 f0       	breq	.+4      	; 0xb5c <vfprintf+0x1d2>
 b58:	89 36       	cpi	r24, 0x69	; 105
 b5a:	41 f5       	brne	.+80     	; 0xbac <vfprintf+0x222>
 b5c:	f8 01       	movw	r30, r16
 b5e:	37 fe       	sbrs	r3, 7
 b60:	07 c0       	rjmp	.+14     	; 0xb70 <vfprintf+0x1e6>
 b62:	60 81       	ld	r22, Z
 b64:	71 81       	ldd	r23, Z+1	; 0x01
 b66:	82 81       	ldd	r24, Z+2	; 0x02
 b68:	93 81       	ldd	r25, Z+3	; 0x03
 b6a:	0c 5f       	subi	r16, 0xFC	; 252
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	08 c0       	rjmp	.+16     	; 0xb80 <vfprintf+0x1f6>
 b70:	60 81       	ld	r22, Z
 b72:	71 81       	ldd	r23, Z+1	; 0x01
 b74:	07 2e       	mov	r0, r23
 b76:	00 0c       	add	r0, r0
 b78:	88 0b       	sbc	r24, r24
 b7a:	99 0b       	sbc	r25, r25
 b7c:	0e 5f       	subi	r16, 0xFE	; 254
 b7e:	1f 4f       	sbci	r17, 0xFF	; 255
 b80:	f3 2d       	mov	r31, r3
 b82:	ff 76       	andi	r31, 0x6F	; 111
 b84:	3f 2e       	mov	r3, r31
 b86:	97 ff       	sbrs	r25, 7
 b88:	09 c0       	rjmp	.+18     	; 0xb9c <vfprintf+0x212>
 b8a:	90 95       	com	r25
 b8c:	80 95       	com	r24
 b8e:	70 95       	com	r23
 b90:	61 95       	neg	r22
 b92:	7f 4f       	sbci	r23, 0xFF	; 255
 b94:	8f 4f       	sbci	r24, 0xFF	; 255
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	f0 68       	ori	r31, 0x80	; 128
 b9a:	3f 2e       	mov	r3, r31
 b9c:	2a e0       	ldi	r18, 0x0A	; 10
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	a3 01       	movw	r20, r6
 ba2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__ultoa_invert>
 ba6:	88 2e       	mov	r8, r24
 ba8:	86 18       	sub	r8, r6
 baa:	45 c0       	rjmp	.+138    	; 0xc36 <vfprintf+0x2ac>
 bac:	85 37       	cpi	r24, 0x75	; 117
 bae:	31 f4       	brne	.+12     	; 0xbbc <vfprintf+0x232>
 bb0:	23 2d       	mov	r18, r3
 bb2:	2f 7e       	andi	r18, 0xEF	; 239
 bb4:	b2 2e       	mov	r11, r18
 bb6:	2a e0       	ldi	r18, 0x0A	; 10
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	25 c0       	rjmp	.+74     	; 0xc06 <vfprintf+0x27c>
 bbc:	93 2d       	mov	r25, r3
 bbe:	99 7f       	andi	r25, 0xF9	; 249
 bc0:	b9 2e       	mov	r11, r25
 bc2:	8f 36       	cpi	r24, 0x6F	; 111
 bc4:	c1 f0       	breq	.+48     	; 0xbf6 <vfprintf+0x26c>
 bc6:	18 f4       	brcc	.+6      	; 0xbce <vfprintf+0x244>
 bc8:	88 35       	cpi	r24, 0x58	; 88
 bca:	79 f0       	breq	.+30     	; 0xbea <vfprintf+0x260>
 bcc:	b5 c0       	rjmp	.+362    	; 0xd38 <vfprintf+0x3ae>
 bce:	80 37       	cpi	r24, 0x70	; 112
 bd0:	19 f0       	breq	.+6      	; 0xbd8 <vfprintf+0x24e>
 bd2:	88 37       	cpi	r24, 0x78	; 120
 bd4:	21 f0       	breq	.+8      	; 0xbde <vfprintf+0x254>
 bd6:	b0 c0       	rjmp	.+352    	; 0xd38 <vfprintf+0x3ae>
 bd8:	e9 2f       	mov	r30, r25
 bda:	e0 61       	ori	r30, 0x10	; 16
 bdc:	be 2e       	mov	r11, r30
 bde:	b4 fe       	sbrs	r11, 4
 be0:	0d c0       	rjmp	.+26     	; 0xbfc <vfprintf+0x272>
 be2:	fb 2d       	mov	r31, r11
 be4:	f4 60       	ori	r31, 0x04	; 4
 be6:	bf 2e       	mov	r11, r31
 be8:	09 c0       	rjmp	.+18     	; 0xbfc <vfprintf+0x272>
 bea:	34 fe       	sbrs	r3, 4
 bec:	0a c0       	rjmp	.+20     	; 0xc02 <vfprintf+0x278>
 bee:	29 2f       	mov	r18, r25
 bf0:	26 60       	ori	r18, 0x06	; 6
 bf2:	b2 2e       	mov	r11, r18
 bf4:	06 c0       	rjmp	.+12     	; 0xc02 <vfprintf+0x278>
 bf6:	28 e0       	ldi	r18, 0x08	; 8
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	05 c0       	rjmp	.+10     	; 0xc06 <vfprintf+0x27c>
 bfc:	20 e1       	ldi	r18, 0x10	; 16
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x27c>
 c02:	20 e1       	ldi	r18, 0x10	; 16
 c04:	32 e0       	ldi	r19, 0x02	; 2
 c06:	f8 01       	movw	r30, r16
 c08:	b7 fe       	sbrs	r11, 7
 c0a:	07 c0       	rjmp	.+14     	; 0xc1a <vfprintf+0x290>
 c0c:	60 81       	ld	r22, Z
 c0e:	71 81       	ldd	r23, Z+1	; 0x01
 c10:	82 81       	ldd	r24, Z+2	; 0x02
 c12:	93 81       	ldd	r25, Z+3	; 0x03
 c14:	0c 5f       	subi	r16, 0xFC	; 252
 c16:	1f 4f       	sbci	r17, 0xFF	; 255
 c18:	06 c0       	rjmp	.+12     	; 0xc26 <vfprintf+0x29c>
 c1a:	60 81       	ld	r22, Z
 c1c:	71 81       	ldd	r23, Z+1	; 0x01
 c1e:	80 e0       	ldi	r24, 0x00	; 0
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	0e 5f       	subi	r16, 0xFE	; 254
 c24:	1f 4f       	sbci	r17, 0xFF	; 255
 c26:	a3 01       	movw	r20, r6
 c28:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__ultoa_invert>
 c2c:	88 2e       	mov	r8, r24
 c2e:	86 18       	sub	r8, r6
 c30:	fb 2d       	mov	r31, r11
 c32:	ff 77       	andi	r31, 0x7F	; 127
 c34:	3f 2e       	mov	r3, r31
 c36:	36 fe       	sbrs	r3, 6
 c38:	0d c0       	rjmp	.+26     	; 0xc54 <vfprintf+0x2ca>
 c3a:	23 2d       	mov	r18, r3
 c3c:	2e 7f       	andi	r18, 0xFE	; 254
 c3e:	a2 2e       	mov	r10, r18
 c40:	89 14       	cp	r8, r9
 c42:	58 f4       	brcc	.+22     	; 0xc5a <vfprintf+0x2d0>
 c44:	34 fe       	sbrs	r3, 4
 c46:	0b c0       	rjmp	.+22     	; 0xc5e <vfprintf+0x2d4>
 c48:	32 fc       	sbrc	r3, 2
 c4a:	09 c0       	rjmp	.+18     	; 0xc5e <vfprintf+0x2d4>
 c4c:	83 2d       	mov	r24, r3
 c4e:	8e 7e       	andi	r24, 0xEE	; 238
 c50:	a8 2e       	mov	r10, r24
 c52:	05 c0       	rjmp	.+10     	; 0xc5e <vfprintf+0x2d4>
 c54:	b8 2c       	mov	r11, r8
 c56:	a3 2c       	mov	r10, r3
 c58:	03 c0       	rjmp	.+6      	; 0xc60 <vfprintf+0x2d6>
 c5a:	b8 2c       	mov	r11, r8
 c5c:	01 c0       	rjmp	.+2      	; 0xc60 <vfprintf+0x2d6>
 c5e:	b9 2c       	mov	r11, r9
 c60:	a4 fe       	sbrs	r10, 4
 c62:	0f c0       	rjmp	.+30     	; 0xc82 <vfprintf+0x2f8>
 c64:	fe 01       	movw	r30, r28
 c66:	e8 0d       	add	r30, r8
 c68:	f1 1d       	adc	r31, r1
 c6a:	80 81       	ld	r24, Z
 c6c:	80 33       	cpi	r24, 0x30	; 48
 c6e:	21 f4       	brne	.+8      	; 0xc78 <vfprintf+0x2ee>
 c70:	9a 2d       	mov	r25, r10
 c72:	99 7e       	andi	r25, 0xE9	; 233
 c74:	a9 2e       	mov	r10, r25
 c76:	09 c0       	rjmp	.+18     	; 0xc8a <vfprintf+0x300>
 c78:	a2 fe       	sbrs	r10, 2
 c7a:	06 c0       	rjmp	.+12     	; 0xc88 <vfprintf+0x2fe>
 c7c:	b3 94       	inc	r11
 c7e:	b3 94       	inc	r11
 c80:	04 c0       	rjmp	.+8      	; 0xc8a <vfprintf+0x300>
 c82:	8a 2d       	mov	r24, r10
 c84:	86 78       	andi	r24, 0x86	; 134
 c86:	09 f0       	breq	.+2      	; 0xc8a <vfprintf+0x300>
 c88:	b3 94       	inc	r11
 c8a:	a3 fc       	sbrc	r10, 3
 c8c:	11 c0       	rjmp	.+34     	; 0xcb0 <vfprintf+0x326>
 c8e:	a0 fe       	sbrs	r10, 0
 c90:	06 c0       	rjmp	.+12     	; 0xc9e <vfprintf+0x314>
 c92:	b2 14       	cp	r11, r2
 c94:	88 f4       	brcc	.+34     	; 0xcb8 <vfprintf+0x32e>
 c96:	28 0c       	add	r2, r8
 c98:	92 2c       	mov	r9, r2
 c9a:	9b 18       	sub	r9, r11
 c9c:	0e c0       	rjmp	.+28     	; 0xcba <vfprintf+0x330>
 c9e:	b2 14       	cp	r11, r2
 ca0:	60 f4       	brcc	.+24     	; 0xcba <vfprintf+0x330>
 ca2:	b6 01       	movw	r22, r12
 ca4:	80 e2       	ldi	r24, 0x20	; 32
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 cac:	b3 94       	inc	r11
 cae:	f7 cf       	rjmp	.-18     	; 0xc9e <vfprintf+0x314>
 cb0:	b2 14       	cp	r11, r2
 cb2:	18 f4       	brcc	.+6      	; 0xcba <vfprintf+0x330>
 cb4:	2b 18       	sub	r2, r11
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x332>
 cb8:	98 2c       	mov	r9, r8
 cba:	21 2c       	mov	r2, r1
 cbc:	a4 fe       	sbrs	r10, 4
 cbe:	10 c0       	rjmp	.+32     	; 0xce0 <vfprintf+0x356>
 cc0:	b6 01       	movw	r22, r12
 cc2:	80 e3       	ldi	r24, 0x30	; 48
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 cca:	a2 fe       	sbrs	r10, 2
 ccc:	17 c0       	rjmp	.+46     	; 0xcfc <vfprintf+0x372>
 cce:	a1 fc       	sbrc	r10, 1
 cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <vfprintf+0x34e>
 cd2:	88 e7       	ldi	r24, 0x78	; 120
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <vfprintf+0x352>
 cd8:	88 e5       	ldi	r24, 0x58	; 88
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	b6 01       	movw	r22, r12
 cde:	0c c0       	rjmp	.+24     	; 0xcf8 <vfprintf+0x36e>
 ce0:	8a 2d       	mov	r24, r10
 ce2:	86 78       	andi	r24, 0x86	; 134
 ce4:	59 f0       	breq	.+22     	; 0xcfc <vfprintf+0x372>
 ce6:	a1 fe       	sbrs	r10, 1
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <vfprintf+0x364>
 cea:	8b e2       	ldi	r24, 0x2B	; 43
 cec:	01 c0       	rjmp	.+2      	; 0xcf0 <vfprintf+0x366>
 cee:	80 e2       	ldi	r24, 0x20	; 32
 cf0:	a7 fc       	sbrc	r10, 7
 cf2:	8d e2       	ldi	r24, 0x2D	; 45
 cf4:	b6 01       	movw	r22, r12
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 cfc:	89 14       	cp	r8, r9
 cfe:	38 f4       	brcc	.+14     	; 0xd0e <vfprintf+0x384>
 d00:	b6 01       	movw	r22, r12
 d02:	80 e3       	ldi	r24, 0x30	; 48
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 d0a:	9a 94       	dec	r9
 d0c:	f7 cf       	rjmp	.-18     	; 0xcfc <vfprintf+0x372>
 d0e:	8a 94       	dec	r8
 d10:	f3 01       	movw	r30, r6
 d12:	e8 0d       	add	r30, r8
 d14:	f1 1d       	adc	r31, r1
 d16:	80 81       	ld	r24, Z
 d18:	b6 01       	movw	r22, r12
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 d20:	81 10       	cpse	r8, r1
 d22:	f5 cf       	rjmp	.-22     	; 0xd0e <vfprintf+0x384>
 d24:	22 20       	and	r2, r2
 d26:	09 f4       	brne	.+2      	; 0xd2a <vfprintf+0x3a0>
 d28:	42 ce       	rjmp	.-892    	; 0x9ae <vfprintf+0x24>
 d2a:	b6 01       	movw	r22, r12
 d2c:	80 e2       	ldi	r24, 0x20	; 32
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 94 bc 06 	call	0xd78	; 0xd78 <fputc>
 d34:	2a 94       	dec	r2
 d36:	f6 cf       	rjmp	.-20     	; 0xd24 <vfprintf+0x39a>
 d38:	f6 01       	movw	r30, r12
 d3a:	86 81       	ldd	r24, Z+6	; 0x06
 d3c:	97 81       	ldd	r25, Z+7	; 0x07
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x3ba>
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	9f ef       	ldi	r25, 0xFF	; 255
 d44:	2b 96       	adiw	r28, 0x0b	; 11
 d46:	e2 e1       	ldi	r30, 0x12	; 18
 d48:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__epilogue_restores__>

00000d4c <strnlen_P>:
 d4c:	fc 01       	movw	r30, r24
 d4e:	05 90       	lpm	r0, Z+
 d50:	61 50       	subi	r22, 0x01	; 1
 d52:	70 40       	sbci	r23, 0x00	; 0
 d54:	01 10       	cpse	r0, r1
 d56:	d8 f7       	brcc	.-10     	; 0xd4e <strnlen_P+0x2>
 d58:	80 95       	com	r24
 d5a:	90 95       	com	r25
 d5c:	8e 0f       	add	r24, r30
 d5e:	9f 1f       	adc	r25, r31
 d60:	08 95       	ret

00000d62 <strnlen>:
 d62:	fc 01       	movw	r30, r24
 d64:	61 50       	subi	r22, 0x01	; 1
 d66:	70 40       	sbci	r23, 0x00	; 0
 d68:	01 90       	ld	r0, Z+
 d6a:	01 10       	cpse	r0, r1
 d6c:	d8 f7       	brcc	.-10     	; 0xd64 <strnlen+0x2>
 d6e:	80 95       	com	r24
 d70:	90 95       	com	r25
 d72:	8e 0f       	add	r24, r30
 d74:	9f 1f       	adc	r25, r31
 d76:	08 95       	ret

00000d78 <fputc>:
 d78:	0f 93       	push	r16
 d7a:	1f 93       	push	r17
 d7c:	cf 93       	push	r28
 d7e:	df 93       	push	r29
 d80:	fb 01       	movw	r30, r22
 d82:	23 81       	ldd	r18, Z+3	; 0x03
 d84:	21 fd       	sbrc	r18, 1
 d86:	03 c0       	rjmp	.+6      	; 0xd8e <fputc+0x16>
 d88:	8f ef       	ldi	r24, 0xFF	; 255
 d8a:	9f ef       	ldi	r25, 0xFF	; 255
 d8c:	2c c0       	rjmp	.+88     	; 0xde6 <fputc+0x6e>
 d8e:	22 ff       	sbrs	r18, 2
 d90:	16 c0       	rjmp	.+44     	; 0xdbe <fputc+0x46>
 d92:	46 81       	ldd	r20, Z+6	; 0x06
 d94:	57 81       	ldd	r21, Z+7	; 0x07
 d96:	24 81       	ldd	r18, Z+4	; 0x04
 d98:	35 81       	ldd	r19, Z+5	; 0x05
 d9a:	42 17       	cp	r20, r18
 d9c:	53 07       	cpc	r21, r19
 d9e:	44 f4       	brge	.+16     	; 0xdb0 <fputc+0x38>
 da0:	a0 81       	ld	r26, Z
 da2:	b1 81       	ldd	r27, Z+1	; 0x01
 da4:	9d 01       	movw	r18, r26
 da6:	2f 5f       	subi	r18, 0xFF	; 255
 da8:	3f 4f       	sbci	r19, 0xFF	; 255
 daa:	31 83       	std	Z+1, r19	; 0x01
 dac:	20 83       	st	Z, r18
 dae:	8c 93       	st	X, r24
 db0:	26 81       	ldd	r18, Z+6	; 0x06
 db2:	37 81       	ldd	r19, Z+7	; 0x07
 db4:	2f 5f       	subi	r18, 0xFF	; 255
 db6:	3f 4f       	sbci	r19, 0xFF	; 255
 db8:	37 83       	std	Z+7, r19	; 0x07
 dba:	26 83       	std	Z+6, r18	; 0x06
 dbc:	14 c0       	rjmp	.+40     	; 0xde6 <fputc+0x6e>
 dbe:	8b 01       	movw	r16, r22
 dc0:	ec 01       	movw	r28, r24
 dc2:	fb 01       	movw	r30, r22
 dc4:	00 84       	ldd	r0, Z+8	; 0x08
 dc6:	f1 85       	ldd	r31, Z+9	; 0x09
 dc8:	e0 2d       	mov	r30, r0
 dca:	09 95       	icall
 dcc:	89 2b       	or	r24, r25
 dce:	e1 f6       	brne	.-72     	; 0xd88 <fputc+0x10>
 dd0:	d8 01       	movw	r26, r16
 dd2:	16 96       	adiw	r26, 0x06	; 6
 dd4:	8d 91       	ld	r24, X+
 dd6:	9c 91       	ld	r25, X
 dd8:	17 97       	sbiw	r26, 0x07	; 7
 dda:	01 96       	adiw	r24, 0x01	; 1
 ddc:	17 96       	adiw	r26, 0x07	; 7
 dde:	9c 93       	st	X, r25
 de0:	8e 93       	st	-X, r24
 de2:	16 97       	sbiw	r26, 0x06	; 6
 de4:	ce 01       	movw	r24, r28
 de6:	df 91       	pop	r29
 de8:	cf 91       	pop	r28
 dea:	1f 91       	pop	r17
 dec:	0f 91       	pop	r16
 dee:	08 95       	ret

00000df0 <__ultoa_invert>:
 df0:	fa 01       	movw	r30, r20
 df2:	aa 27       	eor	r26, r26
 df4:	28 30       	cpi	r18, 0x08	; 8
 df6:	51 f1       	breq	.+84     	; 0xe4c <__ultoa_invert+0x5c>
 df8:	20 31       	cpi	r18, 0x10	; 16
 dfa:	81 f1       	breq	.+96     	; 0xe5c <__ultoa_invert+0x6c>
 dfc:	e8 94       	clt
 dfe:	6f 93       	push	r22
 e00:	6e 7f       	andi	r22, 0xFE	; 254
 e02:	6e 5f       	subi	r22, 0xFE	; 254
 e04:	7f 4f       	sbci	r23, 0xFF	; 255
 e06:	8f 4f       	sbci	r24, 0xFF	; 255
 e08:	9f 4f       	sbci	r25, 0xFF	; 255
 e0a:	af 4f       	sbci	r26, 0xFF	; 255
 e0c:	b1 e0       	ldi	r27, 0x01	; 1
 e0e:	3e d0       	rcall	.+124    	; 0xe8c <__ultoa_invert+0x9c>
 e10:	b4 e0       	ldi	r27, 0x04	; 4
 e12:	3c d0       	rcall	.+120    	; 0xe8c <__ultoa_invert+0x9c>
 e14:	67 0f       	add	r22, r23
 e16:	78 1f       	adc	r23, r24
 e18:	89 1f       	adc	r24, r25
 e1a:	9a 1f       	adc	r25, r26
 e1c:	a1 1d       	adc	r26, r1
 e1e:	68 0f       	add	r22, r24
 e20:	79 1f       	adc	r23, r25
 e22:	8a 1f       	adc	r24, r26
 e24:	91 1d       	adc	r25, r1
 e26:	a1 1d       	adc	r26, r1
 e28:	6a 0f       	add	r22, r26
 e2a:	71 1d       	adc	r23, r1
 e2c:	81 1d       	adc	r24, r1
 e2e:	91 1d       	adc	r25, r1
 e30:	a1 1d       	adc	r26, r1
 e32:	20 d0       	rcall	.+64     	; 0xe74 <__ultoa_invert+0x84>
 e34:	09 f4       	brne	.+2      	; 0xe38 <__ultoa_invert+0x48>
 e36:	68 94       	set
 e38:	3f 91       	pop	r19
 e3a:	2a e0       	ldi	r18, 0x0A	; 10
 e3c:	26 9f       	mul	r18, r22
 e3e:	11 24       	eor	r1, r1
 e40:	30 19       	sub	r19, r0
 e42:	30 5d       	subi	r19, 0xD0	; 208
 e44:	31 93       	st	Z+, r19
 e46:	de f6       	brtc	.-74     	; 0xdfe <__ultoa_invert+0xe>
 e48:	cf 01       	movw	r24, r30
 e4a:	08 95       	ret
 e4c:	46 2f       	mov	r20, r22
 e4e:	47 70       	andi	r20, 0x07	; 7
 e50:	40 5d       	subi	r20, 0xD0	; 208
 e52:	41 93       	st	Z+, r20
 e54:	b3 e0       	ldi	r27, 0x03	; 3
 e56:	0f d0       	rcall	.+30     	; 0xe76 <__ultoa_invert+0x86>
 e58:	c9 f7       	brne	.-14     	; 0xe4c <__ultoa_invert+0x5c>
 e5a:	f6 cf       	rjmp	.-20     	; 0xe48 <__ultoa_invert+0x58>
 e5c:	46 2f       	mov	r20, r22
 e5e:	4f 70       	andi	r20, 0x0F	; 15
 e60:	40 5d       	subi	r20, 0xD0	; 208
 e62:	4a 33       	cpi	r20, 0x3A	; 58
 e64:	18 f0       	brcs	.+6      	; 0xe6c <__ultoa_invert+0x7c>
 e66:	49 5d       	subi	r20, 0xD9	; 217
 e68:	31 fd       	sbrc	r19, 1
 e6a:	40 52       	subi	r20, 0x20	; 32
 e6c:	41 93       	st	Z+, r20
 e6e:	02 d0       	rcall	.+4      	; 0xe74 <__ultoa_invert+0x84>
 e70:	a9 f7       	brne	.-22     	; 0xe5c <__ultoa_invert+0x6c>
 e72:	ea cf       	rjmp	.-44     	; 0xe48 <__ultoa_invert+0x58>
 e74:	b4 e0       	ldi	r27, 0x04	; 4
 e76:	a6 95       	lsr	r26
 e78:	97 95       	ror	r25
 e7a:	87 95       	ror	r24
 e7c:	77 95       	ror	r23
 e7e:	67 95       	ror	r22
 e80:	ba 95       	dec	r27
 e82:	c9 f7       	brne	.-14     	; 0xe76 <__ultoa_invert+0x86>
 e84:	00 97       	sbiw	r24, 0x00	; 0
 e86:	61 05       	cpc	r22, r1
 e88:	71 05       	cpc	r23, r1
 e8a:	08 95       	ret
 e8c:	9b 01       	movw	r18, r22
 e8e:	ac 01       	movw	r20, r24
 e90:	0a 2e       	mov	r0, r26
 e92:	06 94       	lsr	r0
 e94:	57 95       	ror	r21
 e96:	47 95       	ror	r20
 e98:	37 95       	ror	r19
 e9a:	27 95       	ror	r18
 e9c:	ba 95       	dec	r27
 e9e:	c9 f7       	brne	.-14     	; 0xe92 <__ultoa_invert+0xa2>
 ea0:	62 0f       	add	r22, r18
 ea2:	73 1f       	adc	r23, r19
 ea4:	84 1f       	adc	r24, r20
 ea6:	95 1f       	adc	r25, r21
 ea8:	a0 1d       	adc	r26, r0
 eaa:	08 95       	ret

00000eac <__prologue_saves__>:
 eac:	2f 92       	push	r2
 eae:	3f 92       	push	r3
 eb0:	4f 92       	push	r4
 eb2:	5f 92       	push	r5
 eb4:	6f 92       	push	r6
 eb6:	7f 92       	push	r7
 eb8:	8f 92       	push	r8
 eba:	9f 92       	push	r9
 ebc:	af 92       	push	r10
 ebe:	bf 92       	push	r11
 ec0:	cf 92       	push	r12
 ec2:	df 92       	push	r13
 ec4:	ef 92       	push	r14
 ec6:	ff 92       	push	r15
 ec8:	0f 93       	push	r16
 eca:	1f 93       	push	r17
 ecc:	cf 93       	push	r28
 ece:	df 93       	push	r29
 ed0:	cd b7       	in	r28, 0x3d	; 61
 ed2:	de b7       	in	r29, 0x3e	; 62
 ed4:	ca 1b       	sub	r28, r26
 ed6:	db 0b       	sbc	r29, r27
 ed8:	0f b6       	in	r0, 0x3f	; 63
 eda:	f8 94       	cli
 edc:	de bf       	out	0x3e, r29	; 62
 ede:	0f be       	out	0x3f, r0	; 63
 ee0:	cd bf       	out	0x3d, r28	; 61
 ee2:	09 94       	ijmp

00000ee4 <__epilogue_restores__>:
 ee4:	2a 88       	ldd	r2, Y+18	; 0x12
 ee6:	39 88       	ldd	r3, Y+17	; 0x11
 ee8:	48 88       	ldd	r4, Y+16	; 0x10
 eea:	5f 84       	ldd	r5, Y+15	; 0x0f
 eec:	6e 84       	ldd	r6, Y+14	; 0x0e
 eee:	7d 84       	ldd	r7, Y+13	; 0x0d
 ef0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ef6:	b9 84       	ldd	r11, Y+9	; 0x09
 ef8:	c8 84       	ldd	r12, Y+8	; 0x08
 efa:	df 80       	ldd	r13, Y+7	; 0x07
 efc:	ee 80       	ldd	r14, Y+6	; 0x06
 efe:	fd 80       	ldd	r15, Y+5	; 0x05
 f00:	0c 81       	ldd	r16, Y+4	; 0x04
 f02:	1b 81       	ldd	r17, Y+3	; 0x03
 f04:	aa 81       	ldd	r26, Y+2	; 0x02
 f06:	b9 81       	ldd	r27, Y+1	; 0x01
 f08:	ce 0f       	add	r28, r30
 f0a:	d1 1d       	adc	r29, r1
 f0c:	0f b6       	in	r0, 0x3f	; 63
 f0e:	f8 94       	cli
 f10:	de bf       	out	0x3e, r29	; 62
 f12:	0f be       	out	0x3f, r0	; 63
 f14:	cd bf       	out	0x3d, r28	; 61
 f16:	ed 01       	movw	r28, r26
 f18:	08 95       	ret

00000f1a <_exit>:
 f1a:	f8 94       	cli

00000f1c <__stop_program>:
 f1c:	ff cf       	rjmp	.-2      	; 0xf1c <__stop_program>
