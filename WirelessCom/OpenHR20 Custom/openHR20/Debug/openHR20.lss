
openHR20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000017e4  00001898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017e4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080011e  0080011e  000018b6  2**0
                  ALLOC
  3 .eeprom       0000012c  00810000  00810000  000018b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000019e2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000388  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032db  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013bb  00000000  00000000  000050b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002549  00000000  00000000  00006472  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cf8  00000000  00000000  000089bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000013b2  00000000  00000000  000096b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ab9  00000000  00000000  0000aa66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000320  00000000  00000000  0000c51f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_2>
       c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_3>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_5>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__vector_22>

0000005c <LCD_CharTablePrgMem>:
      5c:	3f 06 5b 4f 66 6d 7d 07 7f 6f 77 7c 39 5e 79 71     ?.[Ofm}..ow|9^yq
      6c:	63 54 73 76 30 08 40 01 48 41 11 49 50 54 10 5c     cTsv0.@.HA.IPT.\
      7c:	00 33 27 38                                         .3'8

00000080 <LCD_FieldOffsetTablePrgMem>:
      80:	28 24 1f 1b                                         ($..

00000084 <LCD_SegOffsetTablePrgMem>:
      84:	02 03 1b 19 18 00 01                                .......

0000008b <RTC_DayOfMonthTablePrgMem>:
      8b:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000097 <daysInYear>:
      97:	00 00 1f 00 3b 00 5a 00 78 00 97 00 b5 00 d4 00     ....;.Z.x.......
      a7:	f3 00 11 01 30 01 4e 01 00                          ....0.N..

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d4 e0       	ldi	r29, 0x04	; 4
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	11 e0       	ldi	r17, 0x01	; 1
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	e4 ee       	ldi	r30, 0xE4	; 228
      c4:	f7 e1       	ldi	r31, 0x17	; 23
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	ae 31       	cpi	r26, 0x1E	; 30
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	ae e1       	ldi	r26, 0x1E	; 30
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a5 38       	cpi	r26, 0x85	; 133
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 58 05 	call	0xab0	; 0xab0 <main>
      e6:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <_exit>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <ADC_Measure_Ub>:
 *  - measurment has been performed before using \ref ADC_Measure_Ub 
 ******************************************************************************/
uint16_t ADC_Get_Bat_Val(void)             // Get Batteriy Voltage in mV
{
    return (ADC_Val_Ub);
}
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	8e e1       	ldi	r24, 0x1E	; 30
      f8:	0e 94 b0 01 	call	0x360	; 0x360 <ADC_Sample_Channel>
      fc:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <ADC_Val_Ub+0x1>
     100:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ADC_Val_Ub>
     104:	00 00       	nop
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <ADC_Measure_Temp>:
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	81 e3       	ldi	r24, 0x31	; 49
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	21 e3       	ldi	r18, 0x31	; 49
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	f9 01       	movw	r30, r18
     11e:	20 81       	ld	r18, Z
     120:	28 60       	ori	r18, 0x08	; 8
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	0e 94 b0 01 	call	0x360	; 0x360 <ADC_Sample_Channel>
     12c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADC_Val_Temp+0x1>
     130:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADC_Val_Temp>
     134:	81 e3       	ldi	r24, 0x31	; 49
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	21 e3       	ldi	r18, 0x31	; 49
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	20 81       	ld	r18, Z
     140:	27 7f       	andi	r18, 0xF7	; 247
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
     146:	00 00       	nop
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <ADC_Get_Temp_Degree>:
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <ADC_Get_Temp_Degree+0x6>
     154:	00 d0       	rcall	.+0      	; 0x156 <ADC_Get_Temp_Degree+0x8>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ADC_Val_Temp>
     15e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ADC_Val_Temp+0x1>
     162:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ADC_Convert_To_Degree>
     166:	dc 01       	movw	r26, r24
     168:	cb 01       	movw	r24, r22
     16a:	89 83       	std	Y+1, r24	; 0x01
     16c:	9a 83       	std	Y+2, r25	; 0x02
     16e:	ab 83       	std	Y+3, r26	; 0x03
     170:	bc 83       	std	Y+4, r27	; 0x04
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
     176:	ab 81       	ldd	r26, Y+3	; 0x03
     178:	bc 81       	ldd	r27, Y+4	; 0x04
     17a:	81 15       	cp	r24, r1
     17c:	90 48       	sbci	r25, 0x80	; 128
     17e:	af 4f       	sbci	r26, 0xFF	; 255
     180:	bf 4f       	sbci	r27, 0xFF	; 255
     182:	1c f4       	brge	.+6      	; 0x18a <ADC_Get_Temp_Degree+0x3c>
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e8       	ldi	r25, 0x80	; 128
     188:	0e c0       	rjmp	.+28     	; 0x1a6 <ADC_Get_Temp_Degree+0x58>
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	9a 81       	ldd	r25, Y+2	; 0x02
     18e:	ab 81       	ldd	r26, Y+3	; 0x03
     190:	bc 81       	ldd	r27, Y+4	; 0x04
     192:	81 15       	cp	r24, r1
     194:	90 48       	sbci	r25, 0x80	; 128
     196:	a1 05       	cpc	r26, r1
     198:	b1 05       	cpc	r27, r1
     19a:	1c f0       	brlt	.+6      	; 0x1a2 <ADC_Get_Temp_Degree+0x54>
     19c:	8f ef       	ldi	r24, 0xFF	; 255
     19e:	9f e7       	ldi	r25, 0x7F	; 127
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <ADC_Get_Temp_Degree+0x58>
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	9a 81       	ldd	r25, Y+2	; 0x02
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <ADC_Convert_To_Degree>:
 *  \param  adc value from ADC
 *
 *  \todo: store values for conversion in EEPROM 
 ******************************************************************************/
int32_t ADC_Convert_To_Degree(uint16_t adc)
{
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	27 97       	sbiw	r28, 0x07	; 7
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	9f 83       	std	Y+7, r25	; 0x07
     1d2:	8e 83       	std	Y+6, r24	; 0x06
    int32_t dummy;
    uint8_t i;

    for (i=1; i<kz; i++){
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	12 c0       	rjmp	.+36     	; 0x1fe <ADC_Convert_To_Degree+0x4a>
        if (adc<kx[i]){
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	8f 5f       	subi	r24, 0xFF	; 255
     1e6:	9e 4f       	sbci	r25, 0xFE	; 254
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 81       	ld	r18, Z
     1ec:	31 81       	ldd	r19, Z+1	; 0x01
     1ee:	8e 81       	ldd	r24, Y+6	; 0x06
     1f0:	9f 81       	ldd	r25, Y+7	; 0x07
     1f2:	82 17       	cp	r24, r18
     1f4:	93 07       	cpc	r25, r19
     1f6:	48 f0       	brcs	.+18     	; 0x20a <ADC_Convert_To_Degree+0x56>
int32_t ADC_Convert_To_Degree(uint16_t adc)
{
    int32_t dummy;
    uint8_t i;

    for (i=1; i<kz; i++){
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	8f 5f       	subi	r24, 0xFF	; 255
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     202:	99 81       	ldd	r25, Y+1	; 0x01
     204:	98 17       	cp	r25, r24
     206:	48 f3       	brcs	.-46     	; 0x1da <ADC_Convert_To_Degree+0x26>
     208:	01 c0       	rjmp	.+2      	; 0x20c <ADC_Convert_To_Degree+0x58>
        if (adc<kx[i]){
            break;
     20a:	00 00       	nop
        }        
    }

    dummy =  ((int32_t) ky[i] - (int32_t) ky[i-1]);
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	88 2f       	mov	r24, r24
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	81 5f       	subi	r24, 0xF1	; 241
     218:	9e 4f       	sbci	r25, 0xFE	; 254
     21a:	fc 01       	movw	r30, r24
     21c:	80 81       	ld	r24, Z
     21e:	91 81       	ldd	r25, Z+1	; 0x01
     220:	9c 01       	movw	r18, r24
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	81 5f       	subi	r24, 0xF1	; 241
     234:	9e 4f       	sbci	r25, 0xFE	; 254
     236:	fc 01       	movw	r30, r24
     238:	80 81       	ld	r24, Z
     23a:	91 81       	ldd	r25, Z+1	; 0x01
     23c:	cc 01       	movw	r24, r24
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	79 01       	movw	r14, r18
     244:	8a 01       	movw	r16, r20
     246:	e8 1a       	sub	r14, r24
     248:	f9 0a       	sbc	r15, r25
     24a:	0a 0b       	sbc	r16, r26
     24c:	1b 0b       	sbc	r17, r27
     24e:	d8 01       	movw	r26, r16
     250:	c7 01       	movw	r24, r14
     252:	8a 83       	std	Y+2, r24	; 0x02
     254:	9b 83       	std	Y+3, r25	; 0x03
     256:	ac 83       	std	Y+4, r26	; 0x04
     258:	bd 83       	std	Y+5, r27	; 0x05
	dummy *= ((int32_t) adc   - (int32_t) kx[i-1]);
     25a:	8e 81       	ldd	r24, Y+6	; 0x06
     25c:	9f 81       	ldd	r25, Y+7	; 0x07
     25e:	9c 01       	movw	r18, r24
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	88 2f       	mov	r24, r24
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	8f 5f       	subi	r24, 0xFF	; 255
     272:	9e 4f       	sbci	r25, 0xFE	; 254
     274:	fc 01       	movw	r30, r24
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	cc 01       	movw	r24, r24
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	79 01       	movw	r14, r18
     282:	8a 01       	movw	r16, r20
     284:	e8 1a       	sub	r14, r24
     286:	f9 0a       	sbc	r15, r25
     288:	0a 0b       	sbc	r16, r26
     28a:	1b 0b       	sbc	r17, r27
     28c:	d8 01       	movw	r26, r16
     28e:	c7 01       	movw	r24, r14
     290:	2a 81       	ldd	r18, Y+2	; 0x02
     292:	3b 81       	ldd	r19, Y+3	; 0x03
     294:	4c 81       	ldd	r20, Y+4	; 0x04
     296:	5d 81       	ldd	r21, Y+5	; 0x05
     298:	bc 01       	movw	r22, r24
     29a:	cd 01       	movw	r24, r26
     29c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsi3>
     2a0:	dc 01       	movw	r26, r24
     2a2:	cb 01       	movw	r24, r22
     2a4:	8a 83       	std	Y+2, r24	; 0x02
     2a6:	9b 83       	std	Y+3, r25	; 0x03
     2a8:	ac 83       	std	Y+4, r26	; 0x04
     2aa:	bd 83       	std	Y+5, r27	; 0x05
    dummy /= ((int32_t) kx[i] - (int32_t) kx[i-1]);
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
     2b8:	9e 4f       	sbci	r25, 0xFE	; 254
     2ba:	fc 01       	movw	r30, r24
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	9c 01       	movw	r18, r24
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	88 2f       	mov	r24, r24
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	8f 5f       	subi	r24, 0xFF	; 255
     2d4:	9e 4f       	sbci	r25, 0xFE	; 254
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	cc 01       	movw	r24, r24
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	28 1b       	sub	r18, r24
     2e4:	39 0b       	sbc	r19, r25
     2e6:	4a 0b       	sbc	r20, r26
     2e8:	5b 0b       	sbc	r21, r27
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	9b 81       	ldd	r25, Y+3	; 0x03
     2ee:	ac 81       	ldd	r26, Y+4	; 0x04
     2f0:	bd 81       	ldd	r27, Y+5	; 0x05
     2f2:	bc 01       	movw	r22, r24
     2f4:	cd 01       	movw	r24, r26
     2f6:	0e 94 b7 0b 	call	0x176e	; 0x176e <__divmodsi4>
     2fa:	da 01       	movw	r26, r20
     2fc:	c9 01       	movw	r24, r18
     2fe:	8a 83       	std	Y+2, r24	; 0x02
     300:	9b 83       	std	Y+3, r25	; 0x03
     302:	ac 83       	std	Y+4, r26	; 0x04
     304:	bd 83       	std	Y+5, r27	; 0x05
    dummy += (int32_t)  ky[i-1];
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	88 2f       	mov	r24, r24
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	81 5f       	subi	r24, 0xF1	; 241
     314:	9e 4f       	sbci	r25, 0xFE	; 254
     316:	fc 01       	movw	r30, r24
     318:	80 81       	ld	r24, Z
     31a:	91 81       	ldd	r25, Z+1	; 0x01
     31c:	cc 01       	movw	r24, r24
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	2a 81       	ldd	r18, Y+2	; 0x02
     324:	3b 81       	ldd	r19, Y+3	; 0x03
     326:	4c 81       	ldd	r20, Y+4	; 0x04
     328:	5d 81       	ldd	r21, Y+5	; 0x05
     32a:	82 0f       	add	r24, r18
     32c:	93 1f       	adc	r25, r19
     32e:	a4 1f       	adc	r26, r20
     330:	b5 1f       	adc	r27, r21
     332:	8a 83       	std	Y+2, r24	; 0x02
     334:	9b 83       	std	Y+3, r25	; 0x03
     336:	ac 83       	std	Y+4, r26	; 0x04
     338:	bd 83       	std	Y+5, r27	; 0x05

    return dummy;
     33a:	8a 81       	ldd	r24, Y+2	; 0x02
     33c:	9b 81       	ldd	r25, Y+3	; 0x03
     33e:	ac 81       	ldd	r26, Y+4	; 0x04
     340:	bd 81       	ldd	r27, Y+5	; 0x05
}
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	27 96       	adiw	r28, 0x07	; 7
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	08 95       	ret

00000360 <ADC_Sample_Channel>:
 * - set MUX
 * - start dummy conversion
 * - get value from second conversion 
 ******************************************************************************/
uint16_t ADC_Sample_Channel(uint8_t mux)
{
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	00 d0       	rcall	.+0      	; 0x366 <ADC_Sample_Channel+0x6>
     366:	00 d0       	rcall	.+0      	; 0x368 <ADC_Sample_Channel+0x8>
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t i;
    uint16_t value;

    // enable ADC
    ADCSRA |= (1<<ADEN);
     36e:	8a e7       	ldi	r24, 0x7A	; 122
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	2a e7       	ldi	r18, 0x7A	; 122
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	f9 01       	movw	r30, r18
     378:	20 81       	ld	r18, Z
     37a:	20 68       	ori	r18, 0x80	; 128
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18

    // set mux
    ADMUX = mux;
     380:	8c e7       	ldi	r24, 0x7C	; 124
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	2c 81       	ldd	r18, Y+4	; 0x04
     386:	fc 01       	movw	r30, r24
     388:	20 83       	st	Z, r18

    // set reference to AVCC 
    ADMUX |= (1<<REFS0);
     38a:	8c e7       	ldi	r24, 0x7C	; 124
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	2c e7       	ldi	r18, 0x7C	; 124
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	f9 01       	movw	r30, r18
     394:	20 81       	ld	r18, Z
     396:	20 64       	ori	r18, 0x40	; 64
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18

    // 2 conversions (first to warmup ADC)
    for (i=0; i<2; i++){
     39c:	19 82       	std	Y+1, r1	; 0x01
     39e:	2d c0       	rjmp	.+90     	; 0x3fa <ADC_Sample_Channel+0x9a>
        // start conversions
        ADCSRA |= (1<<ADSC);
     3a0:	8a e7       	ldi	r24, 0x7A	; 122
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	2a e7       	ldi	r18, 0x7A	; 122
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	20 81       	ld	r18, Z
     3ac:	20 64       	ori	r18, 0x40	; 64
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
        // wait for conversion to be finished
        while ( ADCSRA & (1<<ADSC) ) {
     3b2:	00 00       	nop
     3b4:	8a e7       	ldi	r24, 0x7A	; 122
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	80 81       	ld	r24, Z
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 74       	andi	r24, 0x40	; 64
     3c2:	99 27       	eor	r25, r25
     3c4:	89 2b       	or	r24, r25
     3c6:	b1 f7       	brne	.-20     	; 0x3b4 <ADC_Sample_Channel+0x54>
        }
        value = ADCL;
     3c8:	88 e7       	ldi	r24, 0x78	; 120
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	80 81       	ld	r24, Z
     3d0:	88 2f       	mov	r24, r24
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	9b 83       	std	Y+3, r25	; 0x03
     3d6:	8a 83       	std	Y+2, r24	; 0x02
        value += ((uint16_t) ADCH) * 256;
     3d8:	89 e7       	ldi	r24, 0x79	; 121
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	88 2f       	mov	r24, r24
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	98 2f       	mov	r25, r24
     3e6:	88 27       	eor	r24, r24
     3e8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ea:	3b 81       	ldd	r19, Y+3	; 0x03
     3ec:	82 0f       	add	r24, r18
     3ee:	93 1f       	adc	r25, r19
     3f0:	9b 83       	std	Y+3, r25	; 0x03
     3f2:	8a 83       	std	Y+2, r24	; 0x02

    // set reference to AVCC 
    ADMUX |= (1<<REFS0);

    // 2 conversions (first to warmup ADC)
    for (i=0; i<2; i++){
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	80 f2       	brcs	.-96     	; 0x3a0 <ADC_Sample_Channel+0x40>
        value = ADCL;
        value += ((uint16_t) ADCH) * 256;
    }

    // disable ADC
    ADCSRA &= ~(1<<ADEN);
     400:	8a e7       	ldi	r24, 0x7A	; 122
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2a e7       	ldi	r18, 0x7A	; 122
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	f9 01       	movw	r30, r18
     40a:	20 81       	ld	r18, Z
     40c:	2f 77       	andi	r18, 0x7F	; 127
     40e:	fc 01       	movw	r30, r24
     410:	20 83       	st	Z, r18
    
    // return last conversion result
    return (value);
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	9b 81       	ldd	r25, Y+3	; 0x03
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <CTL_temp_change_inc>:
 *******************************************************************************
 *  Change controller temperature (+-)
 *
 *  \param ch relative change
 ******************************************************************************/
void CTL_temp_change_inc (int8_t ch) {
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	1f 92       	push	r1
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	89 83       	std	Y+1, r24	; 0x01
    CTL_temp_wanted+=ch;
     430:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__data_end>
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	89 0f       	add	r24, r25
     438:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	if (CTL_temp_wanted<TEMP_MIN-1) {
     43c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     440:	89 30       	cpi	r24, 0x09	; 9
     442:	20 f4       	brcc	.+8      	; 0x44c <CTL_temp_change_inc+0x28>
		CTL_temp_wanted= TEMP_MIN-1;
     444:	89 e0       	ldi	r24, 0x09	; 9
     446:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
     44a:	07 c0       	rjmp	.+14     	; 0x45a <CTL_temp_change_inc+0x36>
	} else if (CTL_temp_wanted>TEMP_MAX+1) {
     44c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     450:	8e 33       	cpi	r24, 0x3E	; 62
     452:	18 f0       	brcs	.+6      	; 0x45a <CTL_temp_change_inc+0x36>
		CTL_temp_wanted= TEMP_MAX+1;
     454:	8d e3       	ldi	r24, 0x3D	; 61
     456:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	}
	CTL_mode_window = 0;
     45a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <CTL_mode_window>
    PID_force_update = 9;
     45e:	89 e0       	ldi	r24, 0x09	; 9
     460:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <PID_force_update>
}
     464:	00 00       	nop
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <e_Init>:
		};
	}
}

void e_Init(void)
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
	e_resetTemp();
     476:	0e 94 41 02 	call	0x482	; 0x482 <e_resetTemp>
}
     47a:	00 00       	nop
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <e_resetTemp>:

void e_resetTemp(void)
{
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	register uint16_t temp = ADC_Get_Temp_Degree();
     48e:	0e 94 a7 00 	call	0x14e	; 0x14e <ADC_Get_Temp_Degree>
     492:	8c 01       	movw	r16, r24
	st.tempCur = temp;
     494:	10 93 2b 01 	sts	0x012B, r17	; 0x80012b <st+0x5>
     498:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <st+0x4>
	st.tempMax = temp;
     49c:	10 93 2d 01 	sts	0x012D, r17	; 0x80012d <st+0x7>
     4a0:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <st+0x6>
	st.tempMin = temp;
     4a4:	10 93 29 01 	sts	0x0129, r17	; 0x800129 <st+0x3>
     4a8:	00 93 28 01 	sts	0x0128, r16	; 0x800128 <st+0x2>
}
     4ac:	00 00       	nop
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <LCD_Init>:
    LCD_PrintChar(LCD_CHAR_NULL, 1, LCD_MODE_OFF);
    LCD_PrintChar(LCD_CHAR_NULL, 0, LCD_MODE_OFF);
    LCD_SetSeg(LCD_SEG_COL1, LCD_MODE_OFF);
    LCD_SetSeg(LCD_SEG_COL2, LCD_MODE_OFF);
    LCD_UpdateRequired = true;
}
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_AllSegments>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 82 02 	call	0x504	; 0x504 <LCD_ContrastAdjust>
     4cc:	85 ee       	ldi	r24, 0xE5	; 229
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	25 ea       	ldi	r18, 0xA5	; 165
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
     4d6:	86 ee       	ldi	r24, 0xE6	; 230
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	26 e0       	ldi	r18, 0x06	; 6
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18
     4e0:	84 ee       	ldi	r24, 0xE4	; 228
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	20 ec       	ldi	r18, 0xC0	; 192
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
     4ea:	84 ee       	ldi	r24, 0xE4	; 228
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	24 ee       	ldi	r18, 0xE4	; 228
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	f9 01       	movw	r30, r18
     4f4:	20 81       	ld	r18, Z
     4f6:	28 60       	ori	r18, 0x08	; 8
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
     4fc:	00 00       	nop
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <LCD_ContrastAdjust>:
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	00 d0       	rcall	.+0      	; 0x50a <LCD_ContrastAdjust+0x6>
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	8a 83       	std	Y+2, r24	; 0x02
     510:	87 ee       	ldi	r24, 0xE7	; 231
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	fc 01       	movw	r30, r24
     516:	80 81       	ld	r24, Z
     518:	8f 70       	andi	r24, 0x0F	; 15
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	88 23       	and	r24, r24
     520:	11 f4       	brne	.+4      	; 0x526 <LCD_ContrastAdjust+0x22>
     522:	8e e0       	ldi	r24, 0x0E	; 14
     524:	89 83       	std	Y+1, r24	; 0x01
     526:	8a 81       	ldd	r24, Y+2	; 0x02
     528:	81 30       	cpi	r24, 0x01	; 1
     52a:	49 f4       	brne	.+18     	; 0x53e <LCD_ContrastAdjust+0x3a>
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	8f 30       	cpi	r24, 0x0F	; 15
     530:	20 f4       	brcc	.+8      	; 0x53a <LCD_ContrastAdjust+0x36>
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	8f 5f       	subi	r24, 0xFF	; 255
     536:	89 83       	std	Y+1, r24	; 0x01
     538:	02 c0       	rjmp	.+4      	; 0x53e <LCD_ContrastAdjust+0x3a>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	12 c0       	rjmp	.+36     	; 0x562 <LCD_ContrastAdjust+0x5e>
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	8f 3f       	cpi	r24, 0xFF	; 255
     542:	49 f4       	brne	.+18     	; 0x556 <LCD_ContrastAdjust+0x52>
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	88 23       	and	r24, r24
     548:	21 f0       	breq	.+8      	; 0x552 <LCD_ContrastAdjust+0x4e>
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	81 50       	subi	r24, 0x01	; 1
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	02 c0       	rjmp	.+4      	; 0x556 <LCD_ContrastAdjust+0x52>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	06 c0       	rjmp	.+12     	; 0x562 <LCD_ContrastAdjust+0x5e>
     556:	87 ee       	ldi	r24, 0xE7	; 231
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	29 81       	ldd	r18, Y+1	; 0x01
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <LCD_AllSegments>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <LCD_AllSegments+0x6>
     572:	00 d0       	rcall	.+0      	; 0x574 <LCD_AllSegments+0x8>
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	8c 83       	std	Y+4, r24	; 0x04
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	34 c0       	rjmp	.+104    	; 0x5e6 <LCD_AllSegments+0x7a>
     57e:	8c 81       	ldd	r24, Y+4	; 0x04
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	29 81       	ldd	r18, Y+1	; 0x01
     586:	22 2f       	mov	r18, r18
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	02 c0       	rjmp	.+4      	; 0x590 <LCD_AllSegments+0x24>
     58c:	95 95       	asr	r25
     58e:	87 95       	ror	r24
     590:	2a 95       	dec	r18
     592:	e2 f7       	brpl	.-8      	; 0x58c <LCD_AllSegments+0x20>
     594:	81 70       	andi	r24, 0x01	; 1
     596:	99 27       	eor	r25, r25
     598:	89 2b       	or	r24, r25
     59a:	19 f0       	breq	.+6      	; 0x5a2 <LCD_AllSegments+0x36>
     59c:	8f ef       	ldi	r24, 0xFF	; 255
     59e:	8b 83       	std	Y+3, r24	; 0x03
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <LCD_AllSegments+0x38>
     5a2:	1b 82       	std	Y+3, r1	; 0x03
     5a4:	1a 82       	std	Y+2, r1	; 0x02
     5a6:	19 c0       	rjmp	.+50     	; 0x5da <LCD_AllSegments+0x6e>
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	28 2f       	mov	r18, r24
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	8a 81       	ldd	r24, Y+2	; 0x02
     5b0:	48 2f       	mov	r20, r24
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	c9 01       	movw	r24, r18
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	82 0f       	add	r24, r18
     5c4:	93 1f       	adc	r25, r19
     5c6:	84 0f       	add	r24, r20
     5c8:	95 1f       	adc	r25, r21
     5ca:	8f 5c       	subi	r24, 0xCF	; 207
     5cc:	9e 4f       	sbci	r25, 0xFE	; 254
     5ce:	2b 81       	ldd	r18, Y+3	; 0x03
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	8a 83       	std	Y+2, r24	; 0x02
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	89 30       	cpi	r24, 0x09	; 9
     5de:	20 f3       	brcs	.-56     	; 0x5a8 <LCD_AllSegments+0x3c>
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	8f 5f       	subi	r24, 0xFF	; 255
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	48 f2       	brcs	.-110    	; 0x57e <LCD_AllSegments+0x12>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <LCD_UpdateRequired>
     5f2:	00 00       	nop
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <LCD_PrintChar>:
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	61 97       	sbiw	r28, 0x11	; 17
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	8f 87       	std	Y+15, r24	; 0x0f
     618:	68 8b       	std	Y+16, r22	; 0x10
     61a:	49 8b       	std	Y+17, r20	; 0x11
     61c:	88 89       	ldd	r24, Y+16	; 0x10
     61e:	84 30       	cpi	r24, 0x04	; 4
     620:	08 f0       	brcs	.+2      	; 0x624 <LCD_PrintChar+0x22>
     622:	4b c0       	rjmp	.+150    	; 0x6ba <LCD_PrintChar+0xb8>
     624:	8f 85       	ldd	r24, Y+15	; 0x0f
     626:	85 32       	cpi	r24, 0x25	; 37
     628:	08 f0       	brcs	.+2      	; 0x62c <LCD_PrintChar+0x2a>
     62a:	47 c0       	rjmp	.+142    	; 0x6ba <LCD_PrintChar+0xb8>
     62c:	88 89       	ldd	r24, Y+16	; 0x10
     62e:	88 2f       	mov	r24, r24
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	80 58       	subi	r24, 0x80	; 128
     634:	9f 4f       	sbci	r25, 0xFF	; 255
     636:	9c 83       	std	Y+4, r25	; 0x04
     638:	8b 83       	std	Y+3, r24	; 0x03
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	fc 01       	movw	r30, r24
     640:	84 91       	lpm	r24, Z
     642:	8d 83       	std	Y+5, r24	; 0x05
     644:	8d 81       	ldd	r24, Y+5	; 0x05
     646:	8e 83       	std	Y+6, r24	; 0x06
     648:	8f 85       	ldd	r24, Y+15	; 0x0f
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	84 5a       	subi	r24, 0xA4	; 164
     650:	9f 4f       	sbci	r25, 0xFF	; 255
     652:	98 87       	std	Y+8, r25	; 0x08
     654:	8f 83       	std	Y+7, r24	; 0x07
     656:	8f 81       	ldd	r24, Y+7	; 0x07
     658:	98 85       	ldd	r25, Y+8	; 0x08
     65a:	fc 01       	movw	r30, r24
     65c:	84 91       	lpm	r24, Z
     65e:	89 87       	std	Y+9, r24	; 0x09
     660:	89 85       	ldd	r24, Y+9	; 0x09
     662:	8a 87       	std	Y+10, r24	; 0x0a
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	8a 83       	std	Y+2, r24	; 0x02
     668:	19 82       	std	Y+1, r1	; 0x01
     66a:	24 c0       	rjmp	.+72     	; 0x6b4 <LCD_PrintChar+0xb2>
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	8c 57       	subi	r24, 0x7C	; 124
     674:	9f 4f       	sbci	r25, 0xFF	; 255
     676:	9c 87       	std	Y+12, r25	; 0x0c
     678:	8b 87       	std	Y+11, r24	; 0x0b
     67a:	8b 85       	ldd	r24, Y+11	; 0x0b
     67c:	9c 85       	ldd	r25, Y+12	; 0x0c
     67e:	fc 01       	movw	r30, r24
     680:	84 91       	lpm	r24, Z
     682:	8d 87       	std	Y+13, r24	; 0x0d
     684:	9d 85       	ldd	r25, Y+13	; 0x0d
     686:	8e 81       	ldd	r24, Y+6	; 0x06
     688:	89 0f       	add	r24, r25
     68a:	8e 87       	std	Y+14, r24	; 0x0e
     68c:	9a 85       	ldd	r25, Y+10	; 0x0a
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	89 23       	and	r24, r25
     692:	88 23       	and	r24, r24
     694:	29 f0       	breq	.+10     	; 0x6a0 <LCD_PrintChar+0x9e>
     696:	69 89       	ldd	r22, Y+17	; 0x11
     698:	8e 85       	ldd	r24, Y+14	; 0x0e
     69a:	0e 94 a8 03 	call	0x750	; 0x750 <LCD_SetSeg>
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <LCD_PrintChar+0xa6>
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	8e 85       	ldd	r24, Y+14	; 0x0e
     6a4:	0e 94 a8 03 	call	0x750	; 0x750 <LCD_SetSeg>
     6a8:	8a 81       	ldd	r24, Y+2	; 0x02
     6aa:	88 0f       	add	r24, r24
     6ac:	8a 83       	std	Y+2, r24	; 0x02
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	8f 5f       	subi	r24, 0xFF	; 255
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	87 30       	cpi	r24, 0x07	; 7
     6b8:	c8 f2       	brcs	.-78     	; 0x66c <LCD_PrintChar+0x6a>
     6ba:	00 00       	nop
     6bc:	61 96       	adiw	r28, 0x11	; 17
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <LCD_PrintDec>:
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <LCD_PrintDec+0x6>
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <LCD_PrintDec+0x8>
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	8a 83       	std	Y+2, r24	; 0x02
     6dc:	6b 83       	std	Y+3, r22	; 0x03
     6de:	4c 83       	std	Y+4, r20	; 0x04
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	68 f5       	brcc	.+90     	; 0x740 <LCD_PrintDec+0x72>
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	84 36       	cpi	r24, 0x64	; 100
     6ea:	50 f5       	brcc	.+84     	; 0x740 <LCD_PrintDec+0x72>
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	88 0f       	add	r24, r24
     6f0:	8b 83       	std	Y+3, r24	; 0x03
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	8d ec       	ldi	r24, 0xCD	; 205
     6f6:	98 9f       	mul	r25, r24
     6f8:	81 2d       	mov	r24, r1
     6fa:	11 24       	eor	r1, r1
     6fc:	86 95       	lsr	r24
     6fe:	86 95       	lsr	r24
     700:	86 95       	lsr	r24
     702:	88 0f       	add	r24, r24
     704:	28 2f       	mov	r18, r24
     706:	22 0f       	add	r18, r18
     708:	22 0f       	add	r18, r18
     70a:	82 0f       	add	r24, r18
     70c:	29 2f       	mov	r18, r25
     70e:	28 1b       	sub	r18, r24
     710:	82 2f       	mov	r24, r18
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	4c 81       	ldd	r20, Y+4	; 0x04
     716:	6b 81       	ldd	r22, Y+3	; 0x03
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	0e 94 01 03 	call	0x602	; 0x602 <LCD_PrintChar>
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	8b 83       	std	Y+3, r24	; 0x03
     724:	9a 81       	ldd	r25, Y+2	; 0x02
     726:	8d ec       	ldi	r24, 0xCD	; 205
     728:	98 9f       	mul	r25, r24
     72a:	81 2d       	mov	r24, r1
     72c:	11 24       	eor	r1, r1
     72e:	86 95       	lsr	r24
     730:	86 95       	lsr	r24
     732:	86 95       	lsr	r24
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	4c 81       	ldd	r20, Y+4	; 0x04
     738:	6b 81       	ldd	r22, Y+3	; 0x03
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	0e 94 01 03 	call	0x602	; 0x602 <LCD_PrintChar>
     740:	00 00       	nop
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <LCD_SetSeg>:
 *
 *  \param seg No of the segment to be set see \ref LCD_SEG_B0 ...
 *  \param mode  \ref LCD_MODE_ON, \ref LCD_MODE_OFF, \ref LCD_MODE_BLINK_1
 ******************************************************************************/
void LCD_SetSeg(uint8_t seg, uint8_t mode)
{
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	00 d0       	rcall	.+0      	; 0x756 <LCD_SetSeg+0x6>
     756:	00 d0       	rcall	.+0      	; 0x758 <LCD_SetSeg+0x8>
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	8c 83       	std	Y+4, r24	; 0x04
     760:	6d 83       	std	Y+5, r22	; 0x05
    uint8_t r;
    uint8_t b;
    uint8_t bp;

    // Register = segment DIV 8
    r = seg / 8;
     762:	8c 81       	ldd	r24, Y+4	; 0x04
     764:	86 95       	lsr	r24
     766:	86 95       	lsr	r24
     768:	86 95       	lsr	r24
     76a:	8a 83       	std	Y+2, r24	; 0x02
    // Bitposition = segment mod 8
    b = seg % 8;
     76c:	8c 81       	ldd	r24, Y+4	; 0x04
     76e:	87 70       	andi	r24, 0x07	; 7
     770:	8b 83       	std	Y+3, r24	; 0x03

    // Set bits in each bitplane
    for (bp=0; bp<LCD_BITPLANES;  bp++){
     772:	19 82       	std	Y+1, r1	; 0x01
     774:	82 c0       	rjmp	.+260    	; 0x87a <LCD_SetSeg+0x12a>
        if (mode & (1<<bp)){
     776:	8d 81       	ldd	r24, Y+5	; 0x05
     778:	88 2f       	mov	r24, r24
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	29 81       	ldd	r18, Y+1	; 0x01
     77e:	22 2f       	mov	r18, r18
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <LCD_SetSeg+0x38>
     784:	95 95       	asr	r25
     786:	87 95       	ror	r24
     788:	2a 95       	dec	r18
     78a:	e2 f7       	brpl	.-8      	; 0x784 <LCD_SetSeg+0x34>
     78c:	81 70       	andi	r24, 0x01	; 1
     78e:	99 27       	eor	r25, r25
     790:	89 2b       	or	r24, r25
     792:	c1 f1       	breq	.+112    	; 0x804 <LCD_SetSeg+0xb4>
            // Set Bit in Bitplane if ON (0b11) or Blinkmode 1 (0b01)
            LCD_Data[bp][r] |= (1<<b);
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	28 2f       	mov	r18, r24
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	68 2f       	mov	r22, r24
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	48 2f       	mov	r20, r24
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	e8 2f       	mov	r30, r24
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ca 01       	movw	r24, r20
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	84 0f       	add	r24, r20
     7bc:	95 1f       	adc	r25, r21
     7be:	8e 0f       	add	r24, r30
     7c0:	9f 1f       	adc	r25, r31
     7c2:	8f 5c       	subi	r24, 0xCF	; 207
     7c4:	9e 4f       	sbci	r25, 0xFE	; 254
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	e8 2f       	mov	r30, r24
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	48 2f       	mov	r20, r24
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <LCD_SetSeg+0x8c>
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	4a 95       	dec	r20
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <LCD_SetSeg+0x88>
     7e0:	8e 2b       	or	r24, r30
     7e2:	48 2f       	mov	r20, r24
     7e4:	c9 01       	movw	r24, r18
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	82 0f       	add	r24, r18
     7f4:	93 1f       	adc	r25, r19
     7f6:	86 0f       	add	r24, r22
     7f8:	97 1f       	adc	r25, r23
     7fa:	8f 5c       	subi	r24, 0xCF	; 207
     7fc:	9e 4f       	sbci	r25, 0xFE	; 254
     7fe:	fc 01       	movw	r30, r24
     800:	40 83       	st	Z, r20
     802:	38 c0       	rjmp	.+112    	; 0x874 <LCD_SetSeg+0x124>
        } else {
            // Clear Bit in Bitplane if OFF (0b00) or Blinkmode 2 (0b10)
            LCD_Data[bp][r] &= ~(1<<b);
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	28 2f       	mov	r18, r24
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	68 2f       	mov	r22, r24
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	48 2f       	mov	r20, r24
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	8a 81       	ldd	r24, Y+2	; 0x02
     818:	e8 2f       	mov	r30, r24
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	ca 01       	movw	r24, r20
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	84 0f       	add	r24, r20
     82c:	95 1f       	adc	r25, r21
     82e:	8e 0f       	add	r24, r30
     830:	9f 1f       	adc	r25, r31
     832:	8f 5c       	subi	r24, 0xCF	; 207
     834:	9e 4f       	sbci	r25, 0xFE	; 254
     836:	fc 01       	movw	r30, r24
     838:	80 81       	ld	r24, Z
     83a:	e8 2f       	mov	r30, r24
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	48 2f       	mov	r20, r24
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <LCD_SetSeg+0xfc>
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	4a 95       	dec	r20
     84e:	e2 f7       	brpl	.-8      	; 0x848 <LCD_SetSeg+0xf8>
     850:	80 95       	com	r24
     852:	8e 23       	and	r24, r30
     854:	48 2f       	mov	r20, r24
     856:	c9 01       	movw	r24, r18
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	82 0f       	add	r24, r18
     866:	93 1f       	adc	r25, r19
     868:	86 0f       	add	r24, r22
     86a:	97 1f       	adc	r25, r23
     86c:	8f 5c       	subi	r24, 0xCF	; 207
     86e:	9e 4f       	sbci	r25, 0xFE	; 254
     870:	fc 01       	movw	r30, r24
     872:	40 83       	st	Z, r20
    r = seg / 8;
    // Bitposition = segment mod 8
    b = seg % 8;

    // Set bits in each bitplane
    for (bp=0; bp<LCD_BITPLANES;  bp++){
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	8f 5f       	subi	r24, 0xFF	; 255
     878:	89 83       	std	Y+1, r24	; 0x01
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	08 f4       	brcc	.+2      	; 0x882 <LCD_SetSeg+0x132>
     880:	7a cf       	rjmp	.-268    	; 0x776 <LCD_SetSeg+0x26>
        } else {
            // Clear Bit in Bitplane if OFF (0b00) or Blinkmode 2 (0b10)
            LCD_Data[bp][r] &= ~(1<<b);
        }
    }
}
     882:	00 00       	nop
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <LCD_Update>:
 *
 *  \note  Must be called after usage of \ref LCD_SetSeg and \ref LCD_PrintChar
 *         to trigger update of LCDDR Registers
 ******************************************************************************/
void LCD_Update(void)
{
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
    // Update at next LCD_ISR
    LCD_UpdateRequired = true;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <LCD_UpdateRequired>
}
     8a2:	00 00       	nop
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <__vector_22>:
 *  \note copy LCD_Data to LCDREG
 *
 *  \note cycle bitplanes every LCD_BLINK_FRAMES
 ******************************************************************************/
ISR(LCD_vect)
{
     8aa:	1f 92       	push	r1
     8ac:	0f 92       	push	r0
     8ae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	ef 93       	push	r30
     8c4:	ff 93       	push	r31
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
    // Bitplane 0 active
    if (LCD_BlinkCounter == 0) {
     8ce:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCD_BlinkCounter>
     8d2:	88 23       	and	r24, r24
     8d4:	29 f4       	brne	.+10     	; 0x8e0 <__vector_22+0x36>
        LCD_Bitplane = 0;
     8d6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <LCD_Bitplane>
        LCD_UpdateRequired = true;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <LCD_UpdateRequired>
    }
    // Bitplane 1 active
    if (LCD_BlinkCounter == LCD_BLINK_FRAMES) {
     8e0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCD_BlinkCounter>
     8e4:	88 31       	cpi	r24, 0x18	; 24
     8e6:	31 f4       	brne	.+12     	; 0x8f4 <__vector_22+0x4a>
        LCD_Bitplane = 1;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LCD_Bitplane>
        LCD_UpdateRequired = true;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <LCD_UpdateRequired>
    }
    if (LCD_UpdateRequired){
     8f4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <LCD_UpdateRequired>
     8f8:	88 23       	and	r24, r24
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__vector_22+0x54>
     8fc:	bd c0       	rjmp	.+378    	; 0xa78 <__vector_22+0x1ce>
        // Copy desired segment buffer to the real segments
        LCDDR0 = LCD_Data[LCD_Bitplane][0];
     8fe:	4c ee       	ldi	r20, 0xEC	; 236
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     906:	28 2f       	mov	r18, r24
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	c9 01       	movw	r24, r18
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	8f 5c       	subi	r24, 0xCF	; 207
     91e:	9e 4f       	sbci	r25, 0xFE	; 254
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	fa 01       	movw	r30, r20
     926:	80 83       	st	Z, r24
        LCDDR1 = LCD_Data[LCD_Bitplane][1];
     928:	4d ee       	ldi	r20, 0xED	; 237
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     930:	28 2f       	mov	r18, r24
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	c9 01       	movw	r24, r18
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	82 0f       	add	r24, r18
     944:	93 1f       	adc	r25, r19
     946:	8e 5c       	subi	r24, 0xCE	; 206
     948:	9e 4f       	sbci	r25, 0xFE	; 254
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	fa 01       	movw	r30, r20
     950:	80 83       	st	Z, r24
        LCDDR2 = LCD_Data[LCD_Bitplane][2];
     952:	4e ee       	ldi	r20, 0xEE	; 238
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     95a:	28 2f       	mov	r18, r24
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	c9 01       	movw	r24, r18
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	8d 5c       	subi	r24, 0xCD	; 205
     972:	9e 4f       	sbci	r25, 0xFE	; 254
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	fa 01       	movw	r30, r20
     97a:	80 83       	st	Z, r24
        LCDDR5 = LCD_Data[LCD_Bitplane][3];
     97c:	41 ef       	ldi	r20, 0xF1	; 241
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     984:	28 2f       	mov	r18, r24
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	c9 01       	movw	r24, r18
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	82 0f       	add	r24, r18
     998:	93 1f       	adc	r25, r19
     99a:	8c 5c       	subi	r24, 0xCC	; 204
     99c:	9e 4f       	sbci	r25, 0xFE	; 254
     99e:	fc 01       	movw	r30, r24
     9a0:	80 81       	ld	r24, Z
     9a2:	fa 01       	movw	r30, r20
     9a4:	80 83       	st	Z, r24
        LCDDR6 = LCD_Data[LCD_Bitplane][4];
     9a6:	42 ef       	ldi	r20, 0xF2	; 242
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	c9 01       	movw	r24, r18
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	82 0f       	add	r24, r18
     9c2:	93 1f       	adc	r25, r19
     9c4:	8b 5c       	subi	r24, 0xCB	; 203
     9c6:	9e 4f       	sbci	r25, 0xFE	; 254
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	fa 01       	movw	r30, r20
     9ce:	80 83       	st	Z, r24
        LCDDR7 = LCD_Data[LCD_Bitplane][5];
     9d0:	43 ef       	ldi	r20, 0xF3	; 243
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     9d8:	28 2f       	mov	r18, r24
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	c9 01       	movw	r24, r18
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	8a 5c       	subi	r24, 0xCA	; 202
     9f0:	9e 4f       	sbci	r25, 0xFE	; 254
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	fa 01       	movw	r30, r20
     9f8:	80 83       	st	Z, r24
        LCDDR10 = LCD_Data[LCD_Bitplane][6];
     9fa:	46 ef       	ldi	r20, 0xF6	; 246
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     a02:	28 2f       	mov	r18, r24
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	c9 01       	movw	r24, r18
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	82 0f       	add	r24, r18
     a16:	93 1f       	adc	r25, r19
     a18:	89 5c       	subi	r24, 0xC9	; 201
     a1a:	9e 4f       	sbci	r25, 0xFE	; 254
     a1c:	fc 01       	movw	r30, r24
     a1e:	80 81       	ld	r24, Z
     a20:	fa 01       	movw	r30, r20
     a22:	80 83       	st	Z, r24
        LCDDR11 = LCD_Data[LCD_Bitplane][7];
     a24:	47 ef       	ldi	r20, 0xF7	; 247
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     a2c:	28 2f       	mov	r18, r24
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	c9 01       	movw	r24, r18
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	82 0f       	add	r24, r18
     a40:	93 1f       	adc	r25, r19
     a42:	88 5c       	subi	r24, 0xC8	; 200
     a44:	9e 4f       	sbci	r25, 0xFE	; 254
     a46:	fc 01       	movw	r30, r24
     a48:	80 81       	ld	r24, Z
     a4a:	fa 01       	movw	r30, r20
     a4c:	80 83       	st	Z, r24
        LCDDR12 = LCD_Data[LCD_Bitplane][8];
     a4e:	48 ef       	ldi	r20, 0xF8	; 248
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LCD_Bitplane>
     a56:	28 2f       	mov	r18, r24
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	c9 01       	movw	r24, r18
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	87 5c       	subi	r24, 0xC7	; 199
     a6e:	9e 4f       	sbci	r25, 0xFE	; 254
     a70:	fc 01       	movw	r30, r24
     a72:	80 81       	ld	r24, Z
     a74:	fa 01       	movw	r30, r20
     a76:	80 83       	st	Z, r24
    }
    // inc Blink Counter
    LCD_BlinkCounter++;
     a78:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCD_BlinkCounter>
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <LCD_BlinkCounter>
    // Restart Blink Counter
    if (LCD_BlinkCounter > (2*LCD_BLINK_FRAMES)){
     a82:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LCD_BlinkCounter>
     a86:	81 33       	cpi	r24, 0x31	; 49
     a88:	10 f0       	brcs	.+4      	; 0xa8e <__vector_22+0x1e4>
        LCD_BlinkCounter=0;
     a8a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <LCD_BlinkCounter>
    }

}
     a8e:	00 00       	nop
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	5f 91       	pop	r21
     a9e:	4f 91       	pop	r20
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     aaa:	0f 90       	pop	r0
     aac:	1f 90       	pop	r1
     aae:	18 95       	reti

00000ab0 <main>:
    } else {
        LCD_SetSeg(LCD_SEG_AUTO, LCD_MODE_OFF);
        LCD_SetSeg(LCD_SEG_MANU, LCD_MODE_ON);
    }
    m_automatic_mode = newmode;
}
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	28 97       	sbiw	r28, 0x08	; 8
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <init>
     ac8:	0e 94 ed 05 	call	0xbda	; 0xbda <load_defauls>
     acc:	78 94       	sei
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_AllSegments>
     ad4:	88 ee       	ldi	r24, 0xE8	; 232
     ad6:	93 e0       	ldi	r25, 0x03	; 3
     ad8:	0e 94 c2 06 	call	0xd84	; 0xd84 <delay>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_AllSegments>
     ae2:	43 e0       	ldi	r20, 0x03	; 3
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_PrintDec>
     aec:	43 e0       	ldi	r20, 0x03	; 3
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	8d e3       	ldi	r24, 0x3D	; 61
     af2:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_PrintDec>
     af6:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_Update>
     afa:	88 ee       	ldi	r24, 0xE8	; 232
     afc:	93 e0       	ldi	r25, 0x03	; 3
     afe:	0e 94 c2 06 	call	0xd84	; 0xd84 <delay>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_AllSegments>
     b08:	19 82       	std	Y+1, r1	; 0x01
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	8a 83       	std	Y+2, r24	; 0x02
     b0e:	83 e6       	ldi	r24, 0x63	; 99
     b10:	8b 83       	std	Y+3, r24	; 0x03
     b12:	1c 82       	std	Y+4, r1	; 0x04
     b14:	1d 82       	std	Y+5, r1	; 0x05
     b16:	1e 82       	std	Y+6, r1	; 0x06
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <m_key_action>
     b1e:	8a e0       	ldi	r24, 0x0A	; 10
     b20:	8f 83       	std	Y+7, r24	; 0x07
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	88 87       	std	Y+8, r24	; 0x08
     b26:	0e 94 77 00 	call	0xee	; 0xee <ADC_Measure_Ub>
     b2a:	0e 94 86 00 	call	0x10c	; 0x10c <ADC_Measure_Temp>
     b2e:	88 e2       	ldi	r24, 0x28	; 40
     b30:	0e 94 12 02 	call	0x424	; 0x424 <CTL_temp_change_inc>
     b34:	6c 81       	ldd	r22, Y+4	; 0x04
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MOTOR_Control>
     b3c:	fb cf       	rjmp	.-10     	; 0xb34 <main+0x84>

00000b3e <init>:
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	81 e6       	ldi	r24, 0x61	; 97
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	20 e8       	ldi	r18, 0x80	; 128
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
     b50:	81 e6       	ldi	r24, 0x61	; 97
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	21 e0       	ldi	r18, 0x01	; 1
     b56:	fc 01       	movw	r30, r24
     b58:	20 83       	st	Z, r18
     b5a:	80 e5       	ldi	r24, 0x50	; 80
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	20 e8       	ldi	r18, 0x80	; 128
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
     b64:	8e e7       	ldi	r24, 0x7E	; 126
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	2f ef       	ldi	r18, 0xFF	; 255
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
     b6e:	84 e2       	ldi	r24, 0x24	; 36
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	20 e9       	ldi	r18, 0x90	; 144
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
     b78:	83 e3       	ldi	r24, 0x33	; 51
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	28 e1       	ldi	r18, 0x18	; 24
     b7e:	fc 01       	movw	r30, r24
     b80:	20 83       	st	Z, r18
     b82:	8d e2       	ldi	r24, 0x2D	; 45
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	28 e0       	ldi	r18, 0x08	; 8
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	80 e3       	ldi	r24, 0x30	; 48
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	28 e0       	ldi	r18, 0x08	; 8
     b92:	fc 01       	movw	r30, r24
     b94:	20 83       	st	Z, r18
     b96:	80 e3       	ldi	r24, 0x30	; 48
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	20 e4       	ldi	r18, 0x40	; 64
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
     ba0:	85 e2       	ldi	r24, 0x25	; 37
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	2f e6       	ldi	r18, 0x6F	; 111
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
     baa:	8c e6       	ldi	r24, 0x6C	; 108
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	2f e2       	ldi	r18, 0x2F	; 47
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
     bb4:	8d e3       	ldi	r24, 0x3D	; 61
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	20 ec       	ldi	r18, 0xC0	; 192
     bba:	fc 01       	movw	r30, r24
     bbc:	20 83       	st	Z, r18
     bbe:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_Init>
     bc2:	8b e3       	ldi	r24, 0x3B	; 59
     bc4:	96 e0       	ldi	r25, 0x06	; 6
     bc6:	0e 94 2a 08 	call	0x1054	; 0x1054 <RTC_Init>
     bca:	0e 94 f6 06 	call	0xdec	; 0xdec <MOTOR_Init>
     bce:	0e 94 37 02 	call	0x46e	; 0x46e <e_Init>
     bd2:	00 00       	nop
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <load_defauls>:
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	1f 92       	push	r1
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	0e 94 95 08 	call	0x112a	; 0x112a <RTC_SetDay>
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	0e 94 ab 08 	call	0x1156	; 0x1156 <RTC_SetMonth>
     bf0:	88 e0       	ldi	r24, 0x08	; 8
     bf2:	0e 94 c1 08 	call	0x1182	; 0x1182 <RTC_SetYear>
     bf6:	86 e1       	ldi	r24, 0x16	; 22
     bf8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <RTC_SetHour>
     bfc:	8d e1       	ldi	r24, 0x1D	; 29
     bfe:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <RTC_SetMinute>
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <RTC_SetSecond>
     c08:	8b ea       	ldi	r24, 0xAB	; 171
     c0a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <m_reftemp_mem>
     c0e:	8f e6       	ldi	r24, 0x6F	; 111
     c10:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <m_reftemp_mem+0x1>
     c14:	19 82       	std	Y+1, r1	; 0x01
     c16:	17 c0       	rjmp	.+46     	; 0xc46 <load_defauls+0x6c>
     c18:	44 ea       	ldi	r20, 0xA4	; 164
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	0e 94 04 09 	call	0x1208	; 0x1208 <RTC_DowTimerSet>
     c22:	4c e1       	ldi	r20, 0x1C	; 28
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	0e 94 04 09 	call	0x1208	; 0x1208 <RTC_DowTimerSet>
     c2c:	40 ec       	ldi	r20, 0xC0	; 192
     c2e:	62 e0       	ldi	r22, 0x02	; 2
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	0e 94 04 09 	call	0x1208	; 0x1208 <RTC_DowTimerSet>
     c36:	4c ee       	ldi	r20, 0xEC	; 236
     c38:	63 e0       	ldi	r22, 0x03	; 3
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	0e 94 04 09 	call	0x1208	; 0x1208 <RTC_DowTimerSet>
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	8f 5f       	subi	r24, 0xFF	; 255
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	87 30       	cpi	r24, 0x07	; 7
     c4a:	30 f3       	brcs	.-52     	; 0xc18 <load_defauls+0x3e>
     c4c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <m_speed>
     c50:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <m_key_action>
     c54:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <m_state_keys>
     c58:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <m_state_keys_prev>
     c5c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <m_state_wheel>
     c60:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <m_state_wheel_prev>
     c64:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <serialNumber+0x1>
     c68:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <serialNumber>
     c6c:	00 00       	nop
     c6e:	0f 90       	pop	r0
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <callback_settemp>:
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	1f 92       	push	r1
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	63 e0       	ldi	r22, 0x03	; 3
     c84:	8c e2       	ldi	r24, 0x2C	; 44
     c86:	0e 94 a8 03 	call	0x750	; 0x750 <LCD_SetSeg>
     c8a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <m_automatic_mode>
     c8e:	88 23       	and	r24, r24
     c90:	59 f0       	breq	.+22     	; 0xca8 <callback_settemp+0x32>
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	88 2f       	mov	r24, r24
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	81 70       	andi	r24, 0x01	; 1
     c9a:	99 27       	eor	r25, r25
     c9c:	84 5b       	subi	r24, 0xB4	; 180
     c9e:	9e 4f       	sbci	r25, 0xFE	; 254
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <m_reftemp>
     ca8:	00 00       	nop
     caa:	0f 90       	pop	r0
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <__vector_3>:
 *
 *  - check state of buttons
 *  - check state of wheel
 *  - check mount contact
 ******************************************************************************/
ISR(PCINT1_vect){
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62

    // keys
    m_state_keys = ~PINB & 0x6f; // low active, mask for input (PB 0,1,2,3,5,6)
     cce:	83 e2       	ldi	r24, 0x23	; 35
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
     cd6:	80 95       	com	r24
     cd8:	8f 76       	andi	r24, 0x6F	; 111
     cda:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <m_state_keys>

    if (m_state_keys_prev != m_state_keys){
     cde:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <m_state_keys_prev>
     ce2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <m_state_keys>
     ce6:	98 17       	cp	r25, r24
     ce8:	09 f4       	brne	.+2      	; 0xcec <__vector_3+0x3a>
     cea:	3f c0       	rjmp	.+126    	; 0xd6a <__vector_3+0xb8>
        m_state_keys_prev = m_state_keys;
     cec:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <m_state_keys>
     cf0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <m_state_keys_prev>

        // m_wheel
        m_state_wheel = ( m_state_keys & (0x60) );   // m_wheel on PB5 and PB6
     cf4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <m_state_keys>
     cf8:	80 76       	andi	r24, 0x60	; 96
     cfa:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <m_state_wheel>
        if (m_state_wheel !=m_state_wheel_prev){
     cfe:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <m_state_wheel>
     d02:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <m_state_wheel_prev>
     d06:	98 17       	cp	r25, r24
     d08:	69 f1       	breq	.+90     	; 0xd64 <__vector_3+0xb2>
            m_state_wheel_prev = m_state_wheel;
     d0a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <m_state_wheel>
     d0e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <m_state_wheel_prev>
             if ( (m_state_wheel == 0x20) || (m_state_wheel == 0x40) ) {
     d12:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <m_state_wheel>
     d16:	80 32       	cpi	r24, 0x20	; 32
     d18:	21 f0       	breq	.+8      	; 0xd22 <__vector_3+0x70>
     d1a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <m_state_wheel>
     d1e:	80 34       	cpi	r24, 0x40	; 64
     d20:	69 f4       	brne	.+26     	; 0xd3c <__vector_3+0x8a>
                if (m_wheel < 0xff){
     d22:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <m_wheel>
     d26:	8f 3f       	cpi	r24, 0xFF	; 255
     d28:	e9 f0       	breq	.+58     	; 0xd64 <__vector_3+0xb2>
                    m_wheel++;
     d2a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <m_wheel>
     d2e:	8f 5f       	subi	r24, 0xFF	; 255
     d30:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <m_wheel>
                    m_wheel_action = true;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <m_wheel_action>
        // m_wheel
        m_state_wheel = ( m_state_keys & (0x60) );   // m_wheel on PB5 and PB6
        if (m_state_wheel !=m_state_wheel_prev){
            m_state_wheel_prev = m_state_wheel;
             if ( (m_state_wheel == 0x20) || (m_state_wheel == 0x40) ) {
                if (m_wheel < 0xff){
     d3a:	14 c0       	rjmp	.+40     	; 0xd64 <__vector_3+0xb2>
                    m_wheel++;
                    m_wheel_action = true;
               }
            } else if ( (m_state_wheel == 0x00) || (m_state_wheel == 0x60) ){
     d3c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <m_state_wheel>
     d40:	88 23       	and	r24, r24
     d42:	21 f0       	breq	.+8      	; 0xd4c <__vector_3+0x9a>
     d44:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <m_state_wheel>
     d48:	80 36       	cpi	r24, 0x60	; 96
     d4a:	61 f4       	brne	.+24     	; 0xd64 <__vector_3+0xb2>
                if (m_wheel > 0){
     d4c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <m_wheel>
     d50:	88 23       	and	r24, r24
     d52:	41 f0       	breq	.+16     	; 0xd64 <__vector_3+0xb2>
                    m_wheel--;
     d54:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <m_wheel>
     d58:	81 50       	subi	r24, 0x01	; 1
     d5a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <m_wheel>
                    m_wheel_action = true;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <m_wheel_action>
                }
            }
        }

        // set flag for main
        m_key_action = true;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <m_key_action>
    }
}
     d6a:	00 00       	nop
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	0f 90       	pop	r0
     d7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <delay>:
 *******************************************************************************
 * delay function
 *  quick and dirty used only for test purpose
 ******************************************************************************/
void delay(uint16_t millisec)
{
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	00 d0       	rcall	.+0      	; 0xd8a <delay+0x6>
     d8a:	1f 92       	push	r1
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9b 83       	std	Y+3, r25	; 0x03
     d92:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;
    while (millisec--){
     d94:	1b c0       	rjmp	.+54     	; 0xdcc <delay+0x48>
        for (i=0; i<255; i++){
     d96:	19 82       	std	Y+1, r1	; 0x01
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <delay+0x1e>
            asm volatile ("nop"::);
     d9a:	00 00       	nop
 ******************************************************************************/
void delay(uint16_t millisec)
{
    uint8_t i;
    while (millisec--){
        for (i=0; i<255; i++){
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	8f 3f       	cpi	r24, 0xFF	; 255
     da6:	c9 f7       	brne	.-14     	; 0xd9a <delay+0x16>
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){
     da8:	19 82       	std	Y+1, r1	; 0x01
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <delay+0x30>
            asm volatile ("nop"::);
     dac:	00 00       	nop
    uint8_t i;
    while (millisec--){
        for (i=0; i<255; i++){
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	8f 3f       	cpi	r24, 0xFF	; 255
     db8:	c9 f7       	brne	.-14     	; 0xdac <delay+0x28>
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){            
     dba:	19 82       	std	Y+1, r1	; 0x01
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <delay+0x42>
            asm volatile ("nop"::);
     dbe:	00 00       	nop
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){            
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	8f 3f       	cpi	r24, 0xFF	; 255
     dca:	c9 f7       	brne	.-14     	; 0xdbe <delay+0x3a>
 *  quick and dirty used only for test purpose
 ******************************************************************************/
void delay(uint16_t millisec)
{
    uint8_t i;
    while (millisec--){
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	9c 01       	movw	r18, r24
     dd2:	21 50       	subi	r18, 0x01	; 1
     dd4:	31 09       	sbc	r19, r1
     dd6:	3b 83       	std	Y+3, r19	; 0x03
     dd8:	2a 83       	std	Y+2, r18	; 0x02
     dda:	89 2b       	or	r24, r25
     ddc:	e1 f6       	brne	.-72     	; 0xd96 <delay+0x12>
        }
        for (i=0; i<255; i++){            
            asm volatile ("nop"::);
        }
    }
}
     dde:	00 00       	nop
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <MOTOR_Init>:
        // Send out notify to com.c
      	//COM_setNotify(NOTIFY_MOTOR_BLOCKED);
    } else {
        MOTOR_PosLast = MOTOR_PosAct;
    }
}
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <MOTOR_PosAct+0x1>
     df8:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <MOTOR_PosAct>
     dfc:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <MOTOR_PosMax+0x1>
     e00:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <MOTOR_PosMax>
     e04:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <MOTOR_PosStop+0x1>
     e08:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <MOTOR_PosStop>
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MOTOR_Control>
     e14:	00 00       	nop
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <MOTOR_Control>:
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	00 d0       	rcall	.+0      	; 0xe22 <MOTOR_Control+0x6>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	6a 83       	std	Y+2, r22	; 0x02
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	88 23       	and	r24, r24
     e2e:	99 f5       	brne	.+102    	; 0xe96 <MOTOR_Control+0x7a>
     e30:	8b e6       	ldi	r24, 0x6B	; 107
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	2b e6       	ldi	r18, 0x6B	; 107
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	f9 01       	movw	r30, r18
     e3a:	20 81       	ld	r18, Z
     e3c:	2f 7e       	andi	r18, 0xEF	; 239
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
     e42:	8e e2       	ldi	r24, 0x2E	; 46
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	2e e2       	ldi	r18, 0x2E	; 46
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	27 7f       	andi	r18, 0xF7	; 247
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
     e54:	84 e3       	ldi	r24, 0x34	; 52
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	24 e3       	ldi	r18, 0x34	; 52
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	f9 01       	movw	r30, r18
     e5e:	20 81       	ld	r18, Z
     e60:	27 7f       	andi	r18, 0xF7	; 247
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
     e66:	84 e3       	ldi	r24, 0x34	; 52
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	24 e3       	ldi	r18, 0x34	; 52
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	f9 01       	movw	r30, r18
     e70:	20 81       	ld	r18, Z
     e72:	2f 7e       	andi	r18, 0xEF	; 239
     e74:	fc 01       	movw	r30, r24
     e76:	20 83       	st	Z, r18
     e78:	85 e2       	ldi	r24, 0x25	; 37
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	25 e2       	ldi	r18, 0x25	; 37
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	f9 01       	movw	r30, r18
     e82:	20 81       	ld	r18, Z
     e84:	2f 77       	andi	r18, 0x7F	; 127
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
     e8a:	84 e4       	ldi	r24, 0x44	; 68
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	28 e4       	ldi	r18, 0x48	; 72
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
     e94:	6c c0       	rjmp	.+216    	; 0xf6e <MOTOR_Control+0x152>
     e96:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <MOTOR_Dir>
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	98 17       	cp	r25, r24
     e9e:	09 f4       	brne	.+2      	; 0xea2 <MOTOR_Control+0x86>
     ea0:	66 c0       	rjmp	.+204    	; 0xf6e <MOTOR_Control+0x152>
     ea2:	8e e2       	ldi	r24, 0x2E	; 46
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	2e e2       	ldi	r18, 0x2E	; 46
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	f9 01       	movw	r30, r18
     eac:	20 81       	ld	r18, Z
     eae:	28 60       	ori	r18, 0x08	; 8
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
     eb4:	8b e6       	ldi	r24, 0x6B	; 107
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	20 e1       	ldi	r18, 0x10	; 16
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	88 23       	and	r24, r24
     ec2:	31 f4       	brne	.+12     	; 0xed0 <MOTOR_Control+0xb4>
     ec4:	87 e4       	ldi	r24, 0x47	; 71
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	22 ef       	ldi	r18, 0xF2	; 242
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
     ece:	05 c0       	rjmp	.+10     	; 0xeda <MOTOR_Control+0xbe>
     ed0:	87 e4       	ldi	r24, 0x47	; 71
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	22 eb       	ldi	r18, 0xB2	; 178
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	9f ef       	ldi	r25, 0xFF	; 255
     ede:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <MOTOR_PosLast+0x1>
     ee2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <MOTOR_PosLast>
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	09 f5       	brne	.+66     	; 0xf2e <MOTOR_Control+0x112>
     eec:	84 e3       	ldi	r24, 0x34	; 52
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	24 e3       	ldi	r18, 0x34	; 52
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	f9 01       	movw	r30, r18
     ef6:	20 81       	ld	r18, Z
     ef8:	28 60       	ori	r18, 0x08	; 8
     efa:	fc 01       	movw	r30, r24
     efc:	20 83       	st	Z, r18
     efe:	84 e3       	ldi	r24, 0x34	; 52
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	24 e3       	ldi	r18, 0x34	; 52
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	f9 01       	movw	r30, r18
     f08:	20 81       	ld	r18, Z
     f0a:	2f 7e       	andi	r18, 0xEF	; 239
     f0c:	fc 01       	movw	r30, r24
     f0e:	20 83       	st	Z, r18
     f10:	85 e2       	ldi	r24, 0x25	; 37
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	25 e2       	ldi	r18, 0x25	; 37
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f9 01       	movw	r30, r18
     f1a:	20 81       	ld	r18, Z
     f1c:	2f 77       	andi	r18, 0x7F	; 127
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
     f22:	84 e4       	ldi	r24, 0x44	; 68
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	29 e6       	ldi	r18, 0x69	; 105
     f28:	fc 01       	movw	r30, r24
     f2a:	20 83       	st	Z, r18
     f2c:	20 c0       	rjmp	.+64     	; 0xf6e <MOTOR_Control+0x152>
     f2e:	84 e3       	ldi	r24, 0x34	; 52
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	24 e3       	ldi	r18, 0x34	; 52
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	f9 01       	movw	r30, r18
     f38:	20 81       	ld	r18, Z
     f3a:	27 7f       	andi	r18, 0xF7	; 247
     f3c:	fc 01       	movw	r30, r24
     f3e:	20 83       	st	Z, r18
     f40:	84 e3       	ldi	r24, 0x34	; 52
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	24 e3       	ldi	r18, 0x34	; 52
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	f9 01       	movw	r30, r18
     f4a:	20 81       	ld	r18, Z
     f4c:	20 61       	ori	r18, 0x10	; 16
     f4e:	fc 01       	movw	r30, r24
     f50:	20 83       	st	Z, r18
     f52:	85 e2       	ldi	r24, 0x25	; 37
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	25 e2       	ldi	r18, 0x25	; 37
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	f9 01       	movw	r30, r18
     f5c:	20 81       	ld	r18, Z
     f5e:	20 68       	ori	r18, 0x80	; 128
     f60:	fc 01       	movw	r30, r24
     f62:	20 83       	st	Z, r18
     f64:	84 e4       	ldi	r24, 0x44	; 68
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	29 e7       	ldi	r18, 0x79	; 121
     f6a:	fc 01       	movw	r30, r24
     f6c:	20 83       	st	Z, r18
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <MOTOR_Dir>
     f74:	00 00       	nop
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <__vector_2>:
 *
 * \note count light eye impulss: \ref MOTOR_PosAct
 *
 * \note stops the motor if \ref MOTOR_PosStop is reached
 ******************************************************************************/
ISR (PCINT0_vect){
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
    // count only on HIGH impulses
    if (((PINE & (1<<PE4)) != 0)) {
     fac:	8c e2       	ldi	r24, 0x2C	; 44
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	fc 01       	movw	r30, r24
     fb2:	80 81       	ld	r24, Z
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	80 71       	andi	r24, 0x10	; 16
     fba:	99 27       	eor	r25, r25
     fbc:	89 2b       	or	r24, r25
     fbe:	a9 f1       	breq	.+106    	; 0x102a <__vector_2+0xaa>
        if (MOTOR_Dir == open) {
     fc0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <MOTOR_Dir>
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	c9 f4       	brne	.+50     	; 0xffa <__vector_2+0x7a>
            MOTOR_PosAct++;
     fc8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <MOTOR_PosAct>
     fcc:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <MOTOR_PosAct+0x1>
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <MOTOR_PosAct+0x1>
     fd6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <MOTOR_PosAct>
            if (!(MOTOR_PosAct < MOTOR_PosStop)){
     fda:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <MOTOR_PosAct>
     fde:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <MOTOR_PosAct+0x1>
     fe2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <MOTOR_PosStop>
     fe6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <MOTOR_PosStop+0x1>
     fea:	28 17       	cp	r18, r24
     fec:	39 07       	cpc	r19, r25
     fee:	e8 f0       	brcs	.+58     	; 0x102a <__vector_2+0xaa>
                MOTOR_Control(stop, full);
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MOTOR_Control>
            if (!(MOTOR_PosAct > MOTOR_PosStop)){
                MOTOR_Control(stop, full);
            }
        }
    }
}
     ff8:	18 c0       	rjmp	.+48     	; 0x102a <__vector_2+0xaa>
            MOTOR_PosAct++;
            if (!(MOTOR_PosAct < MOTOR_PosStop)){
                MOTOR_Control(stop, full);
            }
        } else {
            MOTOR_PosAct--;
     ffa:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <MOTOR_PosAct>
     ffe:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <MOTOR_PosAct+0x1>
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <MOTOR_PosAct+0x1>
    1008:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <MOTOR_PosAct>
            if (!(MOTOR_PosAct > MOTOR_PosStop)){
    100c:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <MOTOR_PosAct>
    1010:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <MOTOR_PosAct+0x1>
    1014:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <MOTOR_PosStop>
    1018:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <MOTOR_PosStop+0x1>
    101c:	82 17       	cp	r24, r18
    101e:	93 07       	cpc	r25, r19
    1020:	20 f0       	brcs	.+8      	; 0x102a <__vector_2+0xaa>
                MOTOR_Control(stop, full);
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MOTOR_Control>
            }
        }
    }
}
    102a:	00 00       	nop
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <RTC_Init>:
	
	// Restore old date
	RTC_SetYear(old_yy);
	RTC_SetMonth(old_mm);
	return false;
}
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	00 d0       	rcall	.+0      	; 0x105a <RTC_Init+0x6>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <RTC_DowTimerCallbackFunc+0x1>
    106a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <RTC_DowTimerCallbackFunc>
    106e:	80 e7       	ldi	r24, 0x70	; 112
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	20 e7       	ldi	r18, 0x70	; 112
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	f9 01       	movw	r30, r18
    1078:	20 81       	ld	r18, Z
    107a:	2e 7f       	andi	r18, 0xFE	; 254
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
    1080:	86 eb       	ldi	r24, 0xB6	; 182
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	28 e0       	ldi	r18, 0x08	; 8
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
    108a:	82 eb       	ldi	r24, 0xB2	; 178
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	fc 01       	movw	r30, r24
    1090:	10 82       	st	Z, r1
    1092:	80 eb       	ldi	r24, 0xB0	; 176
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	20 eb       	ldi	r18, 0xB0	; 176
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	f9 01       	movw	r30, r18
    109c:	20 81       	ld	r18, Z
    109e:	25 60       	ori	r18, 0x05	; 5
    10a0:	fc 01       	movw	r30, r24
    10a2:	20 83       	st	Z, r18
    10a4:	00 00       	nop
    10a6:	86 eb       	ldi	r24, 0xB6	; 182
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	fc 01       	movw	r30, r24
    10ac:	80 81       	ld	r24, Z
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9c 01       	movw	r18, r24
    10b4:	21 70       	andi	r18, 0x01	; 1
    10b6:	33 27       	eor	r19, r19
    10b8:	86 eb       	ldi	r24, 0xB6	; 182
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	fc 01       	movw	r30, r24
    10be:	80 81       	ld	r24, Z
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	84 70       	andi	r24, 0x04	; 4
    10c6:	99 27       	eor	r25, r25
    10c8:	82 2b       	or	r24, r18
    10ca:	93 2b       	or	r25, r19
    10cc:	89 2b       	or	r24, r25
    10ce:	59 f7       	brne	.-42     	; 0x10a6 <RTC_Init+0x52>
    10d0:	87 e3       	ldi	r24, 0x37	; 55
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	2f ef       	ldi	r18, 0xFF	; 255
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 83       	st	Z, r18
    10da:	80 e7       	ldi	r24, 0x70	; 112
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	20 e7       	ldi	r18, 0x70	; 112
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	f9 01       	movw	r30, r18
    10e4:	20 81       	ld	r18, Z
    10e6:	21 60       	ori	r18, 0x01	; 1
    10e8:	fc 01       	movw	r30, r24
    10ea:	20 83       	st	Z, r18
    10ec:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <RTC_Ticks>
    10f0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <RTC_Ticks+0x1>
    10f4:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <RTC_Ticks+0x2>
    10f8:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <RTC_Ticks+0x3>
    10fc:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <RTC_hh>
    1100:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <RTC_mm>
    1104:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <RTC_ss>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <RTC_DD>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <RTC_MM>
    1114:	88 e0       	ldi	r24, 0x08	; 8
    1116:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <RTC_YY>
    111a:	0e 94 90 0a 	call	0x1520	; 0x1520 <RTC_SetDayOfWeek>
    111e:	00 00       	nop
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <RTC_SetDay>:
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	1f 92       	push	r1
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	88 23       	and	r24, r24
    113a:	31 f0       	breq	.+12     	; 0x1148 <RTC_SetDay+0x1e>
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	80 32       	cpi	r24, 0x20	; 32
    1140:	18 f4       	brcc	.+6      	; 0x1148 <RTC_SetDay+0x1e>
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <RTC_DD>
    1148:	0e 94 90 0a 	call	0x1520	; 0x1520 <RTC_SetDayOfWeek>
    114c:	00 00       	nop
    114e:	0f 90       	pop	r0
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <RTC_SetMonth>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	1f 92       	push	r1
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	88 23       	and	r24, r24
    1166:	31 f0       	breq	.+12     	; 0x1174 <RTC_SetMonth+0x1e>
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	8d 30       	cpi	r24, 0x0D	; 13
    116c:	18 f4       	brcc	.+6      	; 0x1174 <RTC_SetMonth+0x1e>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <RTC_MM>
    1174:	0e 94 90 0a 	call	0x1520	; 0x1520 <RTC_SetDayOfWeek>
    1178:	00 00       	nop
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <RTC_SetYear>:
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	1f 92       	push	r1
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <RTC_YY>
    1194:	0e 94 90 0a 	call	0x1520	; 0x1520 <RTC_SetDayOfWeek>
    1198:	00 00       	nop
    119a:	0f 90       	pop	r0
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <RTC_SetHour>:
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	1f 92       	push	r1
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 31       	cpi	r24, 0x18	; 24
    11b2:	18 f4       	brcc	.+6      	; 0x11ba <RTC_SetHour+0x18>
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <RTC_hh>
    11ba:	00 00       	nop
    11bc:	0f 90       	pop	r0
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <RTC_SetMinute>:
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	1f 92       	push	r1
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	8c 33       	cpi	r24, 0x3C	; 60
    11d4:	18 f4       	brcc	.+6      	; 0x11dc <RTC_SetMinute+0x18>
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <RTC_mm>
    11dc:	00 00       	nop
    11de:	0f 90       	pop	r0
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <RTC_SetSecond>:
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	1f 92       	push	r1
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	8c 33       	cpi	r24, 0x3C	; 60
    11f6:	18 f4       	brcc	.+6      	; 0x11fe <RTC_SetSecond+0x18>
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <RTC_ss>
    11fe:	00 00       	nop
    1200:	0f 90       	pop	r0
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <RTC_DowTimerSet>:
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 d0       	rcall	.+0      	; 0x120e <RTC_DowTimerSet+0x6>
    120e:	1f 92       	push	r1
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	6a 83       	std	Y+2, r22	; 0x02
    1218:	4b 83       	std	Y+3, r20	; 0x03
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	88 2f       	mov	r24, r24
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	22 0f       	add	r18, r18
    122c:	33 1f       	adc	r19, r19
    122e:	82 0f       	add	r24, r18
    1230:	93 1f       	adc	r25, r19
    1232:	8c 59       	subi	r24, 0x9C	; 156
    1234:	9e 4f       	sbci	r25, 0xFE	; 254
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
    123c:	00 00       	nop
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <RTC_AddOneSecond>:
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	1f 92       	push	r1
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <RTC_ss>
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <RTC_ss>
    125e:	8c 33       	cpi	r24, 0x3C	; 60
    1260:	09 f0       	breq	.+2      	; 0x1264 <RTC_AddOneSecond+0x1a>
    1262:	92 c0       	rjmp	.+292    	; 0x1388 <RTC_AddOneSecond+0x13e>
    1264:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <RTC_ss>
    1268:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <RTC_mm>
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <RTC_mm>
    1272:	8c 33       	cpi	r24, 0x3C	; 60
    1274:	b1 f5       	brne	.+108    	; 0x12e2 <RTC_AddOneSecond+0x98>
    1276:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <RTC_mm>
    127a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RTC_hh>
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <RTC_hh>
    1284:	88 31       	cpi	r24, 0x18	; 24
    1286:	21 f4       	brne	.+8      	; 0x1290 <RTC_AddOneSecond+0x46>
    1288:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <RTC_hh>
    128c:	0e 94 c9 09 	call	0x1392	; 0x1392 <RTC_AddOneDay>
    1290:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	69 f4       	brne	.+26     	; 0x12b2 <RTC_AddOneSecond+0x68>
    1298:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RTC_hh>
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	49 f4       	brne	.+18     	; 0x12b2 <RTC_AddOneSecond+0x68>
    12a0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <RTC_IsLastSunday>
    12a4:	88 23       	and	r24, r24
    12a6:	29 f0       	breq	.+10     	; 0x12b2 <RTC_AddOneSecond+0x68>
    12a8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RTC_hh>
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <RTC_hh>
    12b2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    12b6:	8a 30       	cpi	r24, 0x0A	; 10
    12b8:	a1 f4       	brne	.+40     	; 0x12e2 <RTC_AddOneSecond+0x98>
    12ba:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RTC_hh>
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	81 f4       	brne	.+32     	; 0x12e2 <RTC_AddOneSecond+0x98>
    12c2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <RTC_DS>
    12c6:	88 23       	and	r24, r24
    12c8:	61 f4       	brne	.+24     	; 0x12e2 <RTC_AddOneSecond+0x98>
    12ca:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <RTC_IsLastSunday>
    12ce:	88 23       	and	r24, r24
    12d0:	41 f0       	breq	.+16     	; 0x12e2 <RTC_AddOneSecond+0x98>
    12d2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RTC_hh>
    12d6:	81 50       	subi	r24, 0x01	; 1
    12d8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <RTC_hh>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <RTC_DS>
    12e2:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <RTC_mm>
    12e6:	8d ec       	ldi	r24, 0xCD	; 205
    12e8:	98 9f       	mul	r25, r24
    12ea:	81 2d       	mov	r24, r1
    12ec:	11 24       	eor	r1, r1
    12ee:	86 95       	lsr	r24
    12f0:	86 95       	lsr	r24
    12f2:	86 95       	lsr	r24
    12f4:	88 0f       	add	r24, r24
    12f6:	28 2f       	mov	r18, r24
    12f8:	22 0f       	add	r18, r18
    12fa:	22 0f       	add	r18, r18
    12fc:	82 0f       	add	r24, r18
    12fe:	29 2f       	mov	r18, r25
    1300:	28 1b       	sub	r18, r24
    1302:	82 2f       	mov	r24, r18
    1304:	88 23       	and	r24, r24
    1306:	09 f0       	breq	.+2      	; 0x130a <RTC_AddOneSecond+0xc0>
    1308:	3f c0       	rjmp	.+126    	; 0x1388 <RTC_AddOneSecond+0x13e>
    130a:	19 82       	std	Y+1, r1	; 0x01
    130c:	3a c0       	rjmp	.+116    	; 0x1382 <RTC_AddOneSecond+0x138>
    130e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <RTC_DOW>
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	22 0f       	add	r18, r18
    131e:	33 1f       	adc	r19, r19
    1320:	22 0f       	add	r18, r18
    1322:	33 1f       	adc	r19, r19
    1324:	82 0f       	add	r24, r18
    1326:	93 1f       	adc	r25, r19
    1328:	8c 59       	subi	r24, 0x9C	; 156
    132a:	9e 4f       	sbci	r25, 0xFE	; 254
    132c:	fc 01       	movw	r30, r24
    132e:	80 81       	ld	r24, Z
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <RTC_hh>
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	ac 01       	movw	r20, r24
    1342:	44 0f       	add	r20, r20
    1344:	55 1f       	adc	r21, r21
    1346:	44 0f       	add	r20, r20
    1348:	55 1f       	adc	r21, r21
    134a:	48 0f       	add	r20, r24
    134c:	59 1f       	adc	r21, r25
    134e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <RTC_mm>
    1352:	8d ec       	ldi	r24, 0xCD	; 205
    1354:	98 9f       	mul	r25, r24
    1356:	81 2d       	mov	r24, r1
    1358:	11 24       	eor	r1, r1
    135a:	86 95       	lsr	r24
    135c:	86 95       	lsr	r24
    135e:	86 95       	lsr	r24
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	84 0f       	add	r24, r20
    1366:	95 1f       	adc	r25, r21
    1368:	28 17       	cp	r18, r24
    136a:	39 07       	cpc	r19, r25
    136c:	39 f4       	brne	.+14     	; 0x137c <RTC_AddOneSecond+0x132>
    136e:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <RTC_DowTimerCallbackFunc>
    1372:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <RTC_DowTimerCallbackFunc+0x1>
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	f9 01       	movw	r30, r18
    137a:	09 95       	icall
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	18 f2       	brcs	.-122    	; 0x130e <RTC_AddOneSecond+0xc4>
    1388:	00 00       	nop
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <RTC_AddOneDay>:
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	1f 92       	push	r1
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	0e 94 17 0a 	call	0x142e	; 0x142e <RTC_DaysOfMonth>
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RTC_DD>
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <RTC_DD>
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	28 17       	cp	r18, r24
    13ba:	39 07       	cpc	r19, r25
    13bc:	99 f5       	brne	.+102    	; 0x1424 <RTC_AddOneDay+0x92>
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <RTC_DD>
    13c4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <RTC_MM>
    13ce:	8d 30       	cpi	r24, 0x0D	; 13
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <RTC_AddOneDay+0x50>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <RTC_MM>
    13d8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <RTC_YY>
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <RTC_YY>
    13e2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    13e6:	8b 30       	cpi	r24, 0x0B	; 11
    13e8:	11 f4       	brne	.+4      	; 0x13ee <RTC_AddOneDay+0x5c>
    13ea:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <RTC_DS>
    13ee:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <RTC_DOW>
    13f2:	8f 5f       	subi	r24, 0xFF	; 255
    13f4:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <RTC_DOW>
    13f8:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <RTC_DOW>
    13fc:	85 e2       	ldi	r24, 0x25	; 37
    13fe:	28 9f       	mul	r18, r24
    1400:	81 2d       	mov	r24, r1
    1402:	11 24       	eor	r1, r1
    1404:	92 2f       	mov	r25, r18
    1406:	98 1b       	sub	r25, r24
    1408:	96 95       	lsr	r25
    140a:	89 0f       	add	r24, r25
    140c:	98 2f       	mov	r25, r24
    140e:	96 95       	lsr	r25
    1410:	96 95       	lsr	r25
    1412:	89 2f       	mov	r24, r25
    1414:	88 0f       	add	r24, r24
    1416:	88 0f       	add	r24, r24
    1418:	88 0f       	add	r24, r24
    141a:	89 1b       	sub	r24, r25
    141c:	92 2f       	mov	r25, r18
    141e:	98 1b       	sub	r25, r24
    1420:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <RTC_DOW>
    1424:	00 00       	nop
    1426:	0f 90       	pop	r0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <RTC_DaysOfMonth>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	00 d0       	rcall	.+0      	; 0x1434 <RTC_DaysOfMonth+0x6>
    1434:	1f 92       	push	r1
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	79 f0       	breq	.+30     	; 0x1460 <RTC_DaysOfMonth+0x32>
    1442:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	85 57       	subi	r24, 0x75	; 117
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	fc 01       	movw	r30, r24
    1458:	84 91       	lpm	r24, Z
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	07 c0       	rjmp	.+14     	; 0x146e <RTC_DaysOfMonth+0x40>
    1460:	0e 94 3d 0a 	call	0x147a	; 0x147a <RTC_NoLeapyear>
    1464:	88 23       	and	r24, r24
    1466:	11 f0       	breq	.+4      	; 0x146c <RTC_DaysOfMonth+0x3e>
    1468:	8c e1       	ldi	r24, 0x1C	; 28
    146a:	01 c0       	rjmp	.+2      	; 0x146e <RTC_DaysOfMonth+0x40>
    146c:	8d e1       	ldi	r24, 0x1D	; 29
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <RTC_NoLeapyear>:
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <RTC_YY>
    1486:	89 e2       	ldi	r24, 0x29	; 41
    1488:	98 9f       	mul	r25, r24
    148a:	81 2d       	mov	r24, r1
    148c:	11 24       	eor	r1, r1
    148e:	82 95       	swap	r24
    1490:	8f 70       	andi	r24, 0x0F	; 15
    1492:	24 e6       	ldi	r18, 0x64	; 100
    1494:	82 9f       	mul	r24, r18
    1496:	80 2d       	mov	r24, r0
    1498:	11 24       	eor	r1, r1
    149a:	29 2f       	mov	r18, r25
    149c:	28 1b       	sub	r18, r24
    149e:	82 2f       	mov	r24, r18
    14a0:	88 23       	and	r24, r24
    14a2:	21 f0       	breq	.+8      	; 0x14ac <RTC_NoLeapyear+0x32>
    14a4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <RTC_YY>
    14a8:	83 70       	andi	r24, 0x03	; 3
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <RTC_NoLeapyear+0x34>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <RTC_IsLastSunday>:
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <RTC_IsLastSunday+0x6>
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	29 f4       	brne	.+10     	; 0x14d0 <RTC_IsLastSunday+0x1c>
    14c6:	8f e1       	ldi	r24, 0x1F	; 31
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <RTC_IsLastSunday+0x32>
    14d0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    14d4:	8a 30       	cpi	r24, 0x0A	; 10
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <RTC_IsLastSunday+0x2e>
    14d8:	8e e1       	ldi	r24, 0x1E	; 30
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <RTC_IsLastSunday+0x32>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	18 c0       	rjmp	.+48     	; 0x1516 <RTC_IsLastSunday+0x62>
    14e6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RTC_DD>
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	29 81       	ldd	r18, Y+1	; 0x01
    14f0:	3a 81       	ldd	r19, Y+2	; 0x02
    14f2:	27 50       	subi	r18, 0x07	; 7
    14f4:	31 09       	sbc	r19, r1
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <RTC_IsLastSunday+0x48>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	2a 95       	dec	r18
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <RTC_IsLastSunday+0x44>
    1500:	89 2b       	or	r24, r25
    1502:	11 f0       	breq	.+4      	; 0x1508 <RTC_IsLastSunday+0x54>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	07 c0       	rjmp	.+14     	; 0x1516 <RTC_IsLastSunday+0x62>
    1508:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <RTC_DOW>
    150c:	87 30       	cpi	r24, 0x07	; 7
    150e:	11 f4       	brne	.+4      	; 0x1514 <RTC_IsLastSunday+0x60>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <RTC_IsLastSunday+0x62>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <RTC_SetDayOfWeek>:
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	28 97       	sbiw	r28, 0x08	; 8
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	89 56       	subi	r24, 0x69	; 105
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	9c 83       	std	Y+4, r25	; 0x04
    1548:	8b 83       	std	Y+3, r24	; 0x03
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	fc 01       	movw	r30, r24
    1550:	25 91       	lpm	r18, Z+
    1552:	34 91       	lpm	r19, Z
    1554:	cf 01       	movw	r24, r30
    1556:	3e 83       	std	Y+6, r19	; 0x06
    1558:	2d 83       	std	Y+5, r18	; 0x05
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	2d 81       	ldd	r18, Y+5	; 0x05
    1560:	3e 81       	ldd	r19, Y+6	; 0x06
    1562:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <RTC_DD>
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RTC_MM>
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	48 f0       	brcs	.+18     	; 0x158c <RTC_SetDayOfWeek+0x6c>
    157a:	0e 94 3d 0a 	call	0x147a	; 0x147a <RTC_NoLeapyear>
    157e:	88 23       	and	r24, r24
    1580:	29 f4       	brne	.+10     	; 0x158c <RTC_SetDayOfWeek+0x6c>
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <RTC_YY>
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <RTC_YY>
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	99 23       	and	r25, r25
    15a0:	0c f4       	brge	.+2      	; 0x15a4 <RTC_SetDayOfWeek+0x84>
    15a2:	03 96       	adiw	r24, 0x03	; 3
    15a4:	95 95       	asr	r25
    15a6:	87 95       	ror	r24
    15a8:	95 95       	asr	r25
    15aa:	87 95       	ror	r24
    15ac:	28 0f       	add	r18, r24
    15ae:	39 1f       	adc	r19, r25
    15b0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <RTC_YY>
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	44 e6       	ldi	r20, 0x64	; 100
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	ba 01       	movw	r22, r20
    15c0:	0e 94 81 0b 	call	0x1702	; 0x1702 <__divmodhi4>
    15c4:	cb 01       	movw	r24, r22
    15c6:	a9 01       	movw	r20, r18
    15c8:	48 1b       	sub	r20, r24
    15ca:	59 0b       	sbc	r21, r25
    15cc:	ca 01       	movw	r24, r20
    15ce:	9c 01       	movw	r18, r24
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	82 0f       	add	r24, r18
    15d6:	93 1f       	adc	r25, r19
    15d8:	98 87       	std	Y+8, r25	; 0x08
    15da:	8f 83       	std	Y+7, r24	; 0x07
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	ac 01       	movw	r20, r24
    15e2:	4b 5f       	subi	r20, 0xFB	; 251
    15e4:	5f 4f       	sbci	r21, 0xFF	; 255
    15e6:	9a 01       	movw	r18, r20
    15e8:	a3 e9       	ldi	r26, 0x93	; 147
    15ea:	b4 e2       	ldi	r27, 0x24	; 36
    15ec:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__umulhisi3>
    15f0:	9a 01       	movw	r18, r20
    15f2:	28 1b       	sub	r18, r24
    15f4:	39 0b       	sbc	r19, r25
    15f6:	36 95       	lsr	r19
    15f8:	27 95       	ror	r18
    15fa:	82 0f       	add	r24, r18
    15fc:	93 1f       	adc	r25, r19
    15fe:	9c 01       	movw	r18, r24
    1600:	36 95       	lsr	r19
    1602:	27 95       	ror	r18
    1604:	36 95       	lsr	r19
    1606:	27 95       	ror	r18
    1608:	c9 01       	movw	r24, r18
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	82 1b       	sub	r24, r18
    1618:	93 0b       	sbc	r25, r19
    161a:	9a 01       	movw	r18, r20
    161c:	28 1b       	sub	r18, r24
    161e:	39 0b       	sbc	r19, r25
    1620:	82 2f       	mov	r24, r18
    1622:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <RTC_DOW>
    1626:	00 00       	nop
    1628:	28 96       	adiw	r28, 0x08	; 8
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	08 95       	ret

0000163a <__vector_5>:
 *  - add one second to internal clock
 *  - increment tick counter
 *
 ******************************************************************************/
ISR(TIMER2_OVF_vect)
{
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1642:	0f 92       	push	r0
    1644:	11 24       	eor	r1, r1
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	ef 93       	push	r30
    165c:	ff 93       	push	r31
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    RTC_Ticks++;          // overflow every 136 Years
    1666:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <RTC_Ticks>
    166a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <RTC_Ticks+0x1>
    166e:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <RTC_Ticks+0x2>
    1672:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <RTC_Ticks+0x3>
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	a1 1d       	adc	r26, r1
    167a:	b1 1d       	adc	r27, r1
    167c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <RTC_Ticks>
    1680:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <RTC_Ticks+0x1>
    1684:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <RTC_Ticks+0x2>
    1688:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <RTC_Ticks+0x3>
    RTC_AddOneSecond();   // increment second and check Dow_Timer
    168c:	0e 94 25 09 	call	0x124a	; 0x124a <RTC_AddOneSecond>
}
    1690:	00 00       	nop
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	0f 90       	pop	r0
    16b0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__mulsi3>:
    16ba:	db 01       	movw	r26, r22
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__muluhisi3>
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	a2 9f       	mul	r26, r18
    16ca:	80 0d       	add	r24, r0
    16cc:	91 1d       	adc	r25, r1
    16ce:	a3 9f       	mul	r26, r19
    16d0:	90 0d       	add	r25, r0
    16d2:	b2 9f       	mul	r27, r18
    16d4:	90 0d       	add	r25, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	08 95       	ret

000016da <__udivmodhi4>:
    16da:	aa 1b       	sub	r26, r26
    16dc:	bb 1b       	sub	r27, r27
    16de:	51 e1       	ldi	r21, 0x11	; 17
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <__udivmodhi4_ep>

000016e2 <__udivmodhi4_loop>:
    16e2:	aa 1f       	adc	r26, r26
    16e4:	bb 1f       	adc	r27, r27
    16e6:	a6 17       	cp	r26, r22
    16e8:	b7 07       	cpc	r27, r23
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <__udivmodhi4_ep>
    16ec:	a6 1b       	sub	r26, r22
    16ee:	b7 0b       	sbc	r27, r23

000016f0 <__udivmodhi4_ep>:
    16f0:	88 1f       	adc	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	5a 95       	dec	r21
    16f6:	a9 f7       	brne	.-22     	; 0x16e2 <__udivmodhi4_loop>
    16f8:	80 95       	com	r24
    16fa:	90 95       	com	r25
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	08 95       	ret

00001702 <__divmodhi4>:
    1702:	97 fb       	bst	r25, 7
    1704:	07 2e       	mov	r0, r23
    1706:	16 f4       	brtc	.+4      	; 0x170c <__divmodhi4+0xa>
    1708:	00 94       	com	r0
    170a:	07 d0       	rcall	.+14     	; 0x171a <__divmodhi4_neg1>
    170c:	77 fd       	sbrc	r23, 7
    170e:	09 d0       	rcall	.+18     	; 0x1722 <__divmodhi4_neg2>
    1710:	0e 94 6d 0b 	call	0x16da	; 0x16da <__udivmodhi4>
    1714:	07 fc       	sbrc	r0, 7
    1716:	05 d0       	rcall	.+10     	; 0x1722 <__divmodhi4_neg2>
    1718:	3e f4       	brtc	.+14     	; 0x1728 <__divmodhi4_exit>

0000171a <__divmodhi4_neg1>:
    171a:	90 95       	com	r25
    171c:	81 95       	neg	r24
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	08 95       	ret

00001722 <__divmodhi4_neg2>:
    1722:	70 95       	com	r23
    1724:	61 95       	neg	r22
    1726:	7f 4f       	sbci	r23, 0xFF	; 255

00001728 <__divmodhi4_exit>:
    1728:	08 95       	ret

0000172a <__udivmodsi4>:
    172a:	a1 e2       	ldi	r26, 0x21	; 33
    172c:	1a 2e       	mov	r1, r26
    172e:	aa 1b       	sub	r26, r26
    1730:	bb 1b       	sub	r27, r27
    1732:	fd 01       	movw	r30, r26
    1734:	0d c0       	rjmp	.+26     	; 0x1750 <__udivmodsi4_ep>

00001736 <__udivmodsi4_loop>:
    1736:	aa 1f       	adc	r26, r26
    1738:	bb 1f       	adc	r27, r27
    173a:	ee 1f       	adc	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	a2 17       	cp	r26, r18
    1740:	b3 07       	cpc	r27, r19
    1742:	e4 07       	cpc	r30, r20
    1744:	f5 07       	cpc	r31, r21
    1746:	20 f0       	brcs	.+8      	; 0x1750 <__udivmodsi4_ep>
    1748:	a2 1b       	sub	r26, r18
    174a:	b3 0b       	sbc	r27, r19
    174c:	e4 0b       	sbc	r30, r20
    174e:	f5 0b       	sbc	r31, r21

00001750 <__udivmodsi4_ep>:
    1750:	66 1f       	adc	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	88 1f       	adc	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	1a 94       	dec	r1
    175a:	69 f7       	brne	.-38     	; 0x1736 <__udivmodsi4_loop>
    175c:	60 95       	com	r22
    175e:	70 95       	com	r23
    1760:	80 95       	com	r24
    1762:	90 95       	com	r25
    1764:	9b 01       	movw	r18, r22
    1766:	ac 01       	movw	r20, r24
    1768:	bd 01       	movw	r22, r26
    176a:	cf 01       	movw	r24, r30
    176c:	08 95       	ret

0000176e <__divmodsi4>:
    176e:	05 2e       	mov	r0, r21
    1770:	97 fb       	bst	r25, 7
    1772:	1e f4       	brtc	.+6      	; 0x177a <__divmodsi4+0xc>
    1774:	00 94       	com	r0
    1776:	0e 94 ce 0b 	call	0x179c	; 0x179c <__negsi2>
    177a:	57 fd       	sbrc	r21, 7
    177c:	07 d0       	rcall	.+14     	; 0x178c <__divmodsi4_neg2>
    177e:	0e 94 95 0b 	call	0x172a	; 0x172a <__udivmodsi4>
    1782:	07 fc       	sbrc	r0, 7
    1784:	03 d0       	rcall	.+6      	; 0x178c <__divmodsi4_neg2>
    1786:	4e f4       	brtc	.+18     	; 0x179a <__divmodsi4_exit>
    1788:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__negsi2>

0000178c <__divmodsi4_neg2>:
    178c:	50 95       	com	r21
    178e:	40 95       	com	r20
    1790:	30 95       	com	r19
    1792:	21 95       	neg	r18
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	4f 4f       	sbci	r20, 0xFF	; 255
    1798:	5f 4f       	sbci	r21, 0xFF	; 255

0000179a <__divmodsi4_exit>:
    179a:	08 95       	ret

0000179c <__negsi2>:
    179c:	90 95       	com	r25
    179e:	80 95       	com	r24
    17a0:	70 95       	com	r23
    17a2:	61 95       	neg	r22
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255
    17a6:	8f 4f       	sbci	r24, 0xFF	; 255
    17a8:	9f 4f       	sbci	r25, 0xFF	; 255
    17aa:	08 95       	ret

000017ac <__umulhisi3>:
    17ac:	a2 9f       	mul	r26, r18
    17ae:	b0 01       	movw	r22, r0
    17b0:	b3 9f       	mul	r27, r19
    17b2:	c0 01       	movw	r24, r0
    17b4:	a3 9f       	mul	r26, r19
    17b6:	70 0d       	add	r23, r0
    17b8:	81 1d       	adc	r24, r1
    17ba:	11 24       	eor	r1, r1
    17bc:	91 1d       	adc	r25, r1
    17be:	b2 9f       	mul	r27, r18
    17c0:	70 0d       	add	r23, r0
    17c2:	81 1d       	adc	r24, r1
    17c4:	11 24       	eor	r1, r1
    17c6:	91 1d       	adc	r25, r1
    17c8:	08 95       	ret

000017ca <__muluhisi3>:
    17ca:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__umulhisi3>
    17ce:	a5 9f       	mul	r26, r21
    17d0:	90 0d       	add	r25, r0
    17d2:	b4 9f       	mul	r27, r20
    17d4:	90 0d       	add	r25, r0
    17d6:	a4 9f       	mul	r26, r20
    17d8:	80 0d       	add	r24, r0
    17da:	91 1d       	adc	r25, r1
    17dc:	11 24       	eor	r1, r1
    17de:	08 95       	ret

000017e0 <_exit>:
    17e0:	f8 94       	cli

000017e2 <__stop_program>:
    17e2:	ff cf       	rjmp	.-2      	; 0x17e2 <__stop_program>
