
openHR20_custom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000032e6  0000339a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032e6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d9  00800124  00800124  000033be  2**0
                  ALLOC
  3 .eeprom       0000012c  00810000  00810000  000033be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000034ea  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000390  00000000  00000000  0000355c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003382  00000000  00000000  000038ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013e9  00000000  00000000  00006c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000027b8  00000000  00000000  00008057  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d68  00000000  00000000  0000a810  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001424  00000000  00000000  0000b578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001bd0  00000000  00000000  0000c99c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000328  00000000  00000000  0000e56c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__vector_2>
       c:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_3>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__vector_5>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      58:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_22>

0000005c <LCD_CharTablePrgMem>:
      5c:	3f 06 5b 4f 66 6d 7d 07 7f 6f 77 7c 39 5e 79 71     ?.[Ofm}..ow|9^yq
      6c:	63 54 73 76 30 08 40 01 48 41 11 49 50 54 10 5c     cTsv0.@.HA.IPT.\
      7c:	00 33 27 38                                         .3'8

00000080 <LCD_FieldOffsetTablePrgMem>:
      80:	28 24 1f 1b                                         ($..

00000084 <LCD_SegOffsetTablePrgMem>:
      84:	02 03 1b 19 18 00 01                                .......

0000008b <LCD_SegHourBarOffsetTablePrgMem>:
      8b:	00 02 03 04 05 06 07 08 09 0a 39 35 42 3e 0c 0d     ..........95B>..
      9b:	0e 0f 10 11 12 13 14 15                             ........

000000a3 <RTC_DayOfMonthTablePrgMem>:
      a3:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000000af <daysInYear>:
      af:	00 00 1f 00 3b 00 5a 00 78 00 97 00 b5 00 d4 00     ....;.Z.x.......
      bf:	f3 00 11 01 30 01 4e 01 00                          ....0.N..

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d4 e0       	ldi	r29, 0x04	; 4
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e6 ee       	ldi	r30, 0xE6	; 230
      dc:	f2 e3       	ldi	r31, 0x32	; 50
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a4 32       	cpi	r26, 0x24	; 36
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	a4 e2       	ldi	r26, 0x24	; 36
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	ad 3f       	cpi	r26, 0xFD	; 253
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <main>
      fe:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <ADC_Measure_Ub>:
 *  - none
 ******************************************************************************/
bool ADC_Get_Bat_isOk(void)
{
	return (ADC_Get_Bat_Voltage() > ADC_LOW_BATT_LEVEL);
}
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
     10e:	8e e1       	ldi	r24, 0x1E	; 30
     110:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_Sample_Channel>
     114:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <ADC_Val_Ub+0x1>
     118:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <ADC_Val_Ub>
     11c:	00 00       	nop
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <ADC_Measure_Temp>:
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	81 e3       	ldi	r24, 0x31	; 49
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	21 e3       	ldi	r18, 0x31	; 49
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	f9 01       	movw	r30, r18
     136:	20 81       	ld	r18, Z
     138:	28 60       	ori	r18, 0x08	; 8
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	0e 94 fe 01 	call	0x3fc	; 0x3fc <ADC_Sample_Channel>
     144:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <ADC_Val_Temp+0x1>
     148:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <ADC_Val_Temp>
     14c:	81 e3       	ldi	r24, 0x31	; 49
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	21 e3       	ldi	r18, 0x31	; 49
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	f9 01       	movw	r30, r18
     156:	20 81       	ld	r18, Z
     158:	27 7f       	andi	r18, 0xF7	; 247
     15a:	fc 01       	movw	r30, r24
     15c:	20 83       	st	Z, r18
     15e:	00 00       	nop
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <ADC_Get_Temp_Degree>:
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	00 d0       	rcall	.+0      	; 0x16c <ADC_Get_Temp_Degree+0x6>
     16c:	00 d0       	rcall	.+0      	; 0x16e <ADC_Get_Temp_Degree+0x8>
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
     172:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ADC_Val_Temp>
     176:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <ADC_Val_Temp+0x1>
     17a:	0e 94 28 01 	call	0x250	; 0x250 <ADC_Convert_To_Degree>
     17e:	dc 01       	movw	r26, r24
     180:	cb 01       	movw	r24, r22
     182:	89 83       	std	Y+1, r24	; 0x01
     184:	9a 83       	std	Y+2, r25	; 0x02
     186:	ab 83       	std	Y+3, r26	; 0x03
     188:	bc 83       	std	Y+4, r27	; 0x04
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	9a 81       	ldd	r25, Y+2	; 0x02
     18e:	ab 81       	ldd	r26, Y+3	; 0x03
     190:	bc 81       	ldd	r27, Y+4	; 0x04
     192:	81 15       	cp	r24, r1
     194:	90 48       	sbci	r25, 0x80	; 128
     196:	af 4f       	sbci	r26, 0xFF	; 255
     198:	bf 4f       	sbci	r27, 0xFF	; 255
     19a:	1c f4       	brge	.+6      	; 0x1a2 <ADC_Get_Temp_Degree+0x3c>
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e8       	ldi	r25, 0x80	; 128
     1a0:	0e c0       	rjmp	.+28     	; 0x1be <ADC_Get_Temp_Degree+0x58>
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	9a 81       	ldd	r25, Y+2	; 0x02
     1a6:	ab 81       	ldd	r26, Y+3	; 0x03
     1a8:	bc 81       	ldd	r27, Y+4	; 0x04
     1aa:	81 15       	cp	r24, r1
     1ac:	90 48       	sbci	r25, 0x80	; 128
     1ae:	a1 05       	cpc	r26, r1
     1b0:	b1 05       	cpc	r27, r1
     1b2:	1c f0       	brlt	.+6      	; 0x1ba <ADC_Get_Temp_Degree+0x54>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	9f e7       	ldi	r25, 0x7F	; 127
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <ADC_Get_Temp_Degree+0x58>
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	9a 81       	ldd	r25, Y+2	; 0x02
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <ADC_Get_Temp_Val>:
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
     1d4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ADC_Val_Temp>
     1d8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <ADC_Val_Temp+0x1>
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <ADC_Get_Bat_Voltage>:
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <ADC_Get_Bat_Voltage+0x6>
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <ADC_Get_Bat_Voltage+0x8>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e3       	ldi	r25, 0x30	; 48
     1f2:	a1 e1       	ldi	r26, 0x11	; 17
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	89 83       	std	Y+1, r24	; 0x01
     1f8:	9a 83       	std	Y+2, r25	; 0x02
     1fa:	ab 83       	std	Y+3, r26	; 0x03
     1fc:	bc 83       	std	Y+4, r27	; 0x04
     1fe:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ADC_Val_Ub>
     202:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <ADC_Val_Ub+0x1>
     206:	9c 01       	movw	r18, r24
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	ab 81       	ldd	r26, Y+3	; 0x03
     212:	bc 81       	ldd	r27, Y+4	; 0x04
     214:	bc 01       	movw	r22, r24
     216:	cd 01       	movw	r24, r26
     218:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodsi4>
     21c:	da 01       	movw	r26, r20
     21e:	c9 01       	movw	r24, r18
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	ab 83       	std	Y+3, r26	; 0x03
     226:	bc 83       	std	Y+4, r27	; 0x04
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <ADC_Get_Bat_Val>:
 *
 *  \note
 *  - measurment has been performed before using \ref ADC_Measure_Ub 
 ******************************************************************************/
uint16_t ADC_Get_Bat_Val(void)             // Get Batteriy Voltage in mV
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
    return (ADC_Val_Ub);
     242:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ADC_Val_Ub>
     246:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <ADC_Val_Ub+0x1>
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <ADC_Convert_To_Degree>:
 *  \param  adc value from ADC
 *
 *  \todo: store values for conversion in EEPROM 
 ******************************************************************************/
int32_t ADC_Convert_To_Degree(uint16_t adc)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	27 97       	sbiw	r28, 0x07	; 7
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	9f 83       	std	Y+7, r25	; 0x07
     26e:	8e 83       	std	Y+6, r24	; 0x06
    int32_t dummy;
    uint8_t i;

    for (i=1; i<kz; i++){
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	12 c0       	rjmp	.+36     	; 0x29a <ADC_Convert_To_Degree+0x4a>
        if (adc<kx[i]){
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	88 2f       	mov	r24, r24
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	88 0f       	add	r24, r24
     27e:	99 1f       	adc	r25, r25
     280:	8f 5f       	subi	r24, 0xFF	; 255
     282:	9e 4f       	sbci	r25, 0xFE	; 254
     284:	fc 01       	movw	r30, r24
     286:	20 81       	ld	r18, Z
     288:	31 81       	ldd	r19, Z+1	; 0x01
     28a:	8e 81       	ldd	r24, Y+6	; 0x06
     28c:	9f 81       	ldd	r25, Y+7	; 0x07
     28e:	82 17       	cp	r24, r18
     290:	93 07       	cpc	r25, r19
     292:	48 f0       	brcs	.+18     	; 0x2a6 <ADC_Convert_To_Degree+0x56>
int32_t ADC_Convert_To_Degree(uint16_t adc)
{
    int32_t dummy;
    uint8_t i;

    for (i=1; i<kz; i++){
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	8f 5f       	subi	r24, 0xFF	; 255
     298:	89 83       	std	Y+1, r24	; 0x01
     29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     29e:	99 81       	ldd	r25, Y+1	; 0x01
     2a0:	98 17       	cp	r25, r24
     2a2:	48 f3       	brcs	.-46     	; 0x276 <ADC_Convert_To_Degree+0x26>
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <ADC_Convert_To_Degree+0x58>
        if (adc<kx[i]){
            break;
     2a6:	00 00       	nop
        }        
    }

    dummy =  ((int32_t) ky[i] - (int32_t) ky[i-1]);
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	88 2f       	mov	r24, r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	81 5f       	subi	r24, 0xF1	; 241
     2b4:	9e 4f       	sbci	r25, 0xFE	; 254
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	91 81       	ldd	r25, Z+1	; 0x01
     2bc:	9c 01       	movw	r18, r24
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	81 5f       	subi	r24, 0xF1	; 241
     2d0:	9e 4f       	sbci	r25, 0xFE	; 254
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	cc 01       	movw	r24, r24
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	79 01       	movw	r14, r18
     2e0:	8a 01       	movw	r16, r20
     2e2:	e8 1a       	sub	r14, r24
     2e4:	f9 0a       	sbc	r15, r25
     2e6:	0a 0b       	sbc	r16, r26
     2e8:	1b 0b       	sbc	r17, r27
     2ea:	d8 01       	movw	r26, r16
     2ec:	c7 01       	movw	r24, r14
     2ee:	8a 83       	std	Y+2, r24	; 0x02
     2f0:	9b 83       	std	Y+3, r25	; 0x03
     2f2:	ac 83       	std	Y+4, r26	; 0x04
     2f4:	bd 83       	std	Y+5, r27	; 0x05
	dummy *= ((int32_t) adc   - (int32_t) kx[i-1]);
     2f6:	8e 81       	ldd	r24, Y+6	; 0x06
     2f8:	9f 81       	ldd	r25, Y+7	; 0x07
     2fa:	9c 01       	movw	r18, r24
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	88 2f       	mov	r24, r24
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	88 0f       	add	r24, r24
     30a:	99 1f       	adc	r25, r25
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	9e 4f       	sbci	r25, 0xFE	; 254
     310:	fc 01       	movw	r30, r24
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	cc 01       	movw	r24, r24
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	79 01       	movw	r14, r18
     31e:	8a 01       	movw	r16, r20
     320:	e8 1a       	sub	r14, r24
     322:	f9 0a       	sbc	r15, r25
     324:	0a 0b       	sbc	r16, r26
     326:	1b 0b       	sbc	r17, r27
     328:	d8 01       	movw	r26, r16
     32a:	c7 01       	movw	r24, r14
     32c:	2a 81       	ldd	r18, Y+2	; 0x02
     32e:	3b 81       	ldd	r19, Y+3	; 0x03
     330:	4c 81       	ldd	r20, Y+4	; 0x04
     332:	5d 81       	ldd	r21, Y+5	; 0x05
     334:	bc 01       	movw	r22, r24
     336:	cd 01       	movw	r24, r26
     338:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	8a 83       	std	Y+2, r24	; 0x02
     342:	9b 83       	std	Y+3, r25	; 0x03
     344:	ac 83       	std	Y+4, r26	; 0x04
     346:	bd 83       	std	Y+5, r27	; 0x05
    dummy /= ((int32_t) kx[i] - (int32_t) kx[i-1]);
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	8f 5f       	subi	r24, 0xFF	; 255
     354:	9e 4f       	sbci	r25, 0xFE	; 254
     356:	fc 01       	movw	r30, r24
     358:	80 81       	ld	r24, Z
     35a:	91 81       	ldd	r25, Z+1	; 0x01
     35c:	9c 01       	movw	r18, r24
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	9e 4f       	sbci	r25, 0xFE	; 254
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	91 81       	ldd	r25, Z+1	; 0x01
     378:	cc 01       	movw	r24, r24
     37a:	a0 e0       	ldi	r26, 0x00	; 0
     37c:	b0 e0       	ldi	r27, 0x00	; 0
     37e:	28 1b       	sub	r18, r24
     380:	39 0b       	sbc	r19, r25
     382:	4a 0b       	sbc	r20, r26
     384:	5b 0b       	sbc	r21, r27
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	9b 81       	ldd	r25, Y+3	; 0x03
     38a:	ac 81       	ldd	r26, Y+4	; 0x04
     38c:	bd 81       	ldd	r27, Y+5	; 0x05
     38e:	bc 01       	movw	r22, r24
     390:	cd 01       	movw	r24, r26
     392:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__divmodsi4>
     396:	da 01       	movw	r26, r20
     398:	c9 01       	movw	r24, r18
     39a:	8a 83       	std	Y+2, r24	; 0x02
     39c:	9b 83       	std	Y+3, r25	; 0x03
     39e:	ac 83       	std	Y+4, r26	; 0x04
     3a0:	bd 83       	std	Y+5, r27	; 0x05
    dummy += (int32_t)  ky[i-1];
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	88 2f       	mov	r24, r24
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	81 5f       	subi	r24, 0xF1	; 241
     3b0:	9e 4f       	sbci	r25, 0xFE	; 254
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	cc 01       	movw	r24, r24
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	4c 81       	ldd	r20, Y+4	; 0x04
     3c4:	5d 81       	ldd	r21, Y+5	; 0x05
     3c6:	82 0f       	add	r24, r18
     3c8:	93 1f       	adc	r25, r19
     3ca:	a4 1f       	adc	r26, r20
     3cc:	b5 1f       	adc	r27, r21
     3ce:	8a 83       	std	Y+2, r24	; 0x02
     3d0:	9b 83       	std	Y+3, r25	; 0x03
     3d2:	ac 83       	std	Y+4, r26	; 0x04
     3d4:	bd 83       	std	Y+5, r27	; 0x05

    return dummy;
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	9b 81       	ldd	r25, Y+3	; 0x03
     3da:	ac 81       	ldd	r26, Y+4	; 0x04
     3dc:	bd 81       	ldd	r27, Y+5	; 0x05
}
     3de:	bc 01       	movw	r22, r24
     3e0:	cd 01       	movw	r24, r26
     3e2:	27 96       	adiw	r28, 0x07	; 7
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <ADC_Sample_Channel>:
 * - set MUX
 * - start dummy conversion
 * - get value from second conversion 
 ******************************************************************************/
uint16_t ADC_Sample_Channel(uint8_t mux)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	00 d0       	rcall	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t i;
    uint16_t value;

    // enable ADC
    ADCSRA |= (1<<ADEN);
     40a:	8a e7       	ldi	r24, 0x7A	; 122
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	2a e7       	ldi	r18, 0x7A	; 122
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	f9 01       	movw	r30, r18
     414:	20 81       	ld	r18, Z
     416:	20 68       	ori	r18, 0x80	; 128
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18

    // set mux
    ADMUX = mux;
     41c:	8c e7       	ldi	r24, 0x7C	; 124
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	2c 81       	ldd	r18, Y+4	; 0x04
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18

    // set reference to AVCC 
    ADMUX |= (1<<REFS0);
     426:	8c e7       	ldi	r24, 0x7C	; 124
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	2c e7       	ldi	r18, 0x7C	; 124
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	f9 01       	movw	r30, r18
     430:	20 81       	ld	r18, Z
     432:	20 64       	ori	r18, 0x40	; 64
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18

    // 2 conversions (first to warmup ADC)
    for (i=0; i<2; i++){
     438:	19 82       	std	Y+1, r1	; 0x01
     43a:	2d c0       	rjmp	.+90     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
        // start conversions
        ADCSRA |= (1<<ADSC);
     43c:	8a e7       	ldi	r24, 0x7A	; 122
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	2a e7       	ldi	r18, 0x7A	; 122
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	f9 01       	movw	r30, r18
     446:	20 81       	ld	r18, Z
     448:	20 64       	ori	r18, 0x40	; 64
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
        // wait for conversion to be finished
        while ( ADCSRA & (1<<ADSC) ) {
     44e:	00 00       	nop
     450:	8a e7       	ldi	r24, 0x7A	; 122
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	80 74       	andi	r24, 0x40	; 64
     45e:	99 27       	eor	r25, r25
     460:	89 2b       	or	r24, r25
     462:	b1 f7       	brne	.-20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
        }
        value = ADCL;
     464:	88 e7       	ldi	r24, 0x78	; 120
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	fc 01       	movw	r30, r24
     46a:	80 81       	ld	r24, Z
     46c:	88 2f       	mov	r24, r24
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	9b 83       	std	Y+3, r25	; 0x03
     472:	8a 83       	std	Y+2, r24	; 0x02
        value += ((uint16_t) ADCH) * 256;
     474:	89 e7       	ldi	r24, 0x79	; 121
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	88 2f       	mov	r24, r24
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	98 2f       	mov	r25, r24
     482:	88 27       	eor	r24, r24
     484:	2a 81       	ldd	r18, Y+2	; 0x02
     486:	3b 81       	ldd	r19, Y+3	; 0x03
     488:	82 0f       	add	r24, r18
     48a:	93 1f       	adc	r25, r19
     48c:	9b 83       	std	Y+3, r25	; 0x03
     48e:	8a 83       	std	Y+2, r24	; 0x02

    // set reference to AVCC 
    ADMUX |= (1<<REFS0);

    // 2 conversions (first to warmup ADC)
    for (i=0; i<2; i++){
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	8f 5f       	subi	r24, 0xFF	; 255
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	80 f2       	brcs	.-96     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
        value = ADCL;
        value += ((uint16_t) ADCH) * 256;
    }

    // disable ADC
    ADCSRA &= ~(1<<ADEN);
     49c:	8a e7       	ldi	r24, 0x7A	; 122
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	2a e7       	ldi	r18, 0x7A	; 122
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	2f 77       	andi	r18, 0x7F	; 127
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18
    
    // return last conversion result
    return (value);
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <update_average_temp>:


int update_average_temp(){
     4c0:	2f 92       	push	r2
     4c2:	3f 92       	push	r3
     4c4:	4f 92       	push	r4
     4c6:	5f 92       	push	r5
     4c8:	6f 92       	push	r6
     4ca:	7f 92       	push	r7
     4cc:	8f 92       	push	r8
     4ce:	9f 92       	push	r9
     4d0:	af 92       	push	r10
     4d2:	bf 92       	push	r11
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	62 97       	sbiw	r28, 0x12	; 18
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
	average_temp_16s[averaging_pos] = ADC_Get_Temp_Degree();
     4f4:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <__data_end>
     4f8:	10 91 25 01 	lds	r17, 0x0125	; 0x800125 <__data_end+0x1>
     4fc:	0e 94 b3 00 	call	0x166	; 0x166 <ADC_Get_Temp_Degree>
     500:	9c 01       	movw	r18, r24
     502:	c8 01       	movw	r24, r16
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	8e 5b       	subi	r24, 0xBE	; 190
     50a:	9e 4f       	sbci	r25, 0xFE	; 254
     50c:	fc 01       	movw	r30, r24
     50e:	31 83       	std	Z+1, r19	; 0x01
     510:	20 83       	st	Z, r18
	averaging_pos++;
     512:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     516:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
     520:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	averaging_pos = averaging_pos % 16;
     524:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     528:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     52c:	8f 70       	andi	r24, 0x0F	; 15
     52e:	90 78       	andi	r25, 0x80	; 128
     530:	99 23       	and	r25, r25
     532:	24 f4       	brge	.+8      	; 0x53c <__stack+0x3d>
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	80 6f       	ori	r24, 0xF0	; 240
     538:	9f 6f       	ori	r25, 0xFF	; 255
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
     540:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	
	if (average_temp_positions <= 15)
     544:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <average_temp_positions>
     548:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <average_temp_positions+0x1>
     54c:	40 97       	sbiw	r24, 0x10	; 16
     54e:	4c f4       	brge	.+18     	; 0x562 <__stack+0x63>
	{
		average_temp_positions++;
     550:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <average_temp_positions>
     554:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <average_temp_positions+0x1>
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <average_temp_positions+0x1>
     55e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <average_temp_positions>
	}
	unsigned long long int sum = 0;
     562:	19 82       	std	Y+1, r1	; 0x01
     564:	1a 82       	std	Y+2, r1	; 0x02
     566:	1b 82       	std	Y+3, r1	; 0x03
     568:	1c 82       	std	Y+4, r1	; 0x04
     56a:	1d 82       	std	Y+5, r1	; 0x05
     56c:	1e 82       	std	Y+6, r1	; 0x06
     56e:	1f 82       	std	Y+7, r1	; 0x07
     570:	18 86       	std	Y+8, r1	; 0x08
	for (int i = 0;i<average_temp_positions;i++)
     572:	1a 86       	std	Y+10, r1	; 0x0a
     574:	19 86       	std	Y+9, r1	; 0x09
     576:	3b c0       	rjmp	.+118    	; 0x5ee <__stack+0xef>
	{
		sum += average_temp_16s[i];
     578:	89 85       	ldd	r24, Y+9	; 0x09
     57a:	9a 85       	ldd	r25, Y+10	; 0x0a
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	8e 5b       	subi	r24, 0xBE	; 190
     582:	9e 4f       	sbci	r25, 0xFE	; 254
     584:	fc 01       	movw	r30, r24
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	9c 87       	std	Y+12, r25	; 0x0c
     58c:	8b 87       	std	Y+11, r24	; 0x0b
     58e:	89 2f       	mov	r24, r25
     590:	88 0f       	add	r24, r24
     592:	88 0b       	sbc	r24, r24
     594:	8d 87       	std	Y+13, r24	; 0x0d
     596:	8e 87       	std	Y+14, r24	; 0x0e
     598:	8f 87       	std	Y+15, r24	; 0x0f
     59a:	88 8b       	std	Y+16, r24	; 0x10
     59c:	89 8b       	std	Y+17, r24	; 0x11
     59e:	8a 8b       	std	Y+18, r24	; 0x12
     5a0:	2b 85       	ldd	r18, Y+11	; 0x0b
     5a2:	3c 85       	ldd	r19, Y+12	; 0x0c
     5a4:	4d 85       	ldd	r20, Y+13	; 0x0d
     5a6:	5e 85       	ldd	r21, Y+14	; 0x0e
     5a8:	6f 85       	ldd	r22, Y+15	; 0x0f
     5aa:	78 89       	ldd	r23, Y+16	; 0x10
     5ac:	89 89       	ldd	r24, Y+17	; 0x11
     5ae:	9a 89       	ldd	r25, Y+18	; 0x12
     5b0:	a9 80       	ldd	r10, Y+1	; 0x01
     5b2:	ba 80       	ldd	r11, Y+2	; 0x02
     5b4:	cb 80       	ldd	r12, Y+3	; 0x03
     5b6:	dc 80       	ldd	r13, Y+4	; 0x04
     5b8:	ed 80       	ldd	r14, Y+5	; 0x05
     5ba:	fe 80       	ldd	r15, Y+6	; 0x06
     5bc:	0f 81       	ldd	r16, Y+7	; 0x07
     5be:	18 85       	ldd	r17, Y+8	; 0x08
     5c0:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__adddi3>
     5c4:	a2 2e       	mov	r10, r18
     5c6:	b3 2e       	mov	r11, r19
     5c8:	c4 2e       	mov	r12, r20
     5ca:	d5 2e       	mov	r13, r21
     5cc:	e6 2e       	mov	r14, r22
     5ce:	f7 2e       	mov	r15, r23
     5d0:	08 2f       	mov	r16, r24
     5d2:	19 2f       	mov	r17, r25
     5d4:	a9 82       	std	Y+1, r10	; 0x01
     5d6:	ba 82       	std	Y+2, r11	; 0x02
     5d8:	cb 82       	std	Y+3, r12	; 0x03
     5da:	dc 82       	std	Y+4, r13	; 0x04
     5dc:	ed 82       	std	Y+5, r14	; 0x05
     5de:	fe 82       	std	Y+6, r15	; 0x06
     5e0:	0f 83       	std	Y+7, r16	; 0x07
     5e2:	18 87       	std	Y+8, r17	; 0x08
	if (average_temp_positions <= 15)
	{
		average_temp_positions++;
	}
	unsigned long long int sum = 0;
	for (int i = 0;i<average_temp_positions;i++)
     5e4:	89 85       	ldd	r24, Y+9	; 0x09
     5e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	9a 87       	std	Y+10, r25	; 0x0a
     5ec:	89 87       	std	Y+9, r24	; 0x09
     5ee:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <average_temp_positions>
     5f2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <average_temp_positions+0x1>
     5f6:	29 85       	ldd	r18, Y+9	; 0x09
     5f8:	3a 85       	ldd	r19, Y+10	; 0x0a
     5fa:	28 17       	cp	r18, r24
     5fc:	39 07       	cpc	r19, r25
     5fe:	0c f4       	brge	.+2      	; 0x602 <__stack+0x103>
     600:	bb cf       	rjmp	.-138    	; 0x578 <__stack+0x79>
	{
		sum += average_temp_16s[i];
	}
	return sum/average_temp_positions;
     602:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <average_temp_positions>
     606:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <average_temp_positions+0x1>
     60a:	1c 01       	movw	r2, r24
     60c:	89 2f       	mov	r24, r25
     60e:	88 0f       	add	r24, r24
     610:	88 0b       	sbc	r24, r24
     612:	48 2e       	mov	r4, r24
     614:	58 2e       	mov	r5, r24
     616:	68 2e       	mov	r6, r24
     618:	78 2e       	mov	r7, r24
     61a:	88 2e       	mov	r8, r24
     61c:	98 2e       	mov	r9, r24
     61e:	a2 2c       	mov	r10, r2
     620:	b3 2c       	mov	r11, r3
     622:	c4 2c       	mov	r12, r4
     624:	d5 2c       	mov	r13, r5
     626:	e6 2c       	mov	r14, r6
     628:	f7 2c       	mov	r15, r7
     62a:	08 2d       	mov	r16, r8
     62c:	19 2d       	mov	r17, r9
     62e:	29 81       	ldd	r18, Y+1	; 0x01
     630:	3a 81       	ldd	r19, Y+2	; 0x02
     632:	4b 81       	ldd	r20, Y+3	; 0x03
     634:	5c 81       	ldd	r21, Y+4	; 0x04
     636:	6d 81       	ldd	r22, Y+5	; 0x05
     638:	7e 81       	ldd	r23, Y+6	; 0x06
     63a:	8f 81       	ldd	r24, Y+7	; 0x07
     63c:	98 85       	ldd	r25, Y+8	; 0x08
     63e:	0e 94 0b 19 	call	0x3216	; 0x3216 <__udivdi3>
     642:	a2 2e       	mov	r10, r18
     644:	b3 2e       	mov	r11, r19
     646:	c4 2e       	mov	r12, r20
     648:	d5 2e       	mov	r13, r21
     64a:	e6 2e       	mov	r14, r22
     64c:	f7 2e       	mov	r15, r23
     64e:	08 2f       	mov	r16, r24
     650:	19 2f       	mov	r17, r25
     652:	2a 2d       	mov	r18, r10
     654:	3b 2d       	mov	r19, r11
     656:	4c 2d       	mov	r20, r12
     658:	5d 2d       	mov	r21, r13
     65a:	6e 2d       	mov	r22, r14
     65c:	7f 2d       	mov	r23, r15
     65e:	80 2f       	mov	r24, r16
     660:	91 2f       	mov	r25, r17
     662:	c9 01       	movw	r24, r18
	
}
     664:	62 96       	adiw	r28, 0x12	; 18
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	bf 90       	pop	r11
     682:	af 90       	pop	r10
     684:	9f 90       	pop	r9
     686:	8f 90       	pop	r8
     688:	7f 90       	pop	r7
     68a:	6f 90       	pop	r6
     68c:	5f 90       	pop	r5
     68e:	4f 90       	pop	r4
     690:	3f 90       	pop	r3
     692:	2f 90       	pop	r2
     694:	08 95       	ret

00000696 <CTL_update>:
    if (CTL_mode_auto && (m != CTL_CHANGE_MODE_REWOKE)) {
    	CTL_temp_wanted=(CTL_temp_auto=RTC_ActualTimerTemperature(false));
    	// CTL_temp_auto=0;  //refresh wanted temperature in next step
    }
    CTL_mode_window = 0;
}
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	00 d0       	rcall	.+0      	; 0x69e <CTL_update+0x8>
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <CTL_update+0xa>
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <CTL_update+0xc>
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	8e 83       	std	Y+6, r24	; 0x06
     6a8:	8e 81       	ldd	r24, Y+6	; 0x06
     6aa:	88 23       	and	r24, r24
     6ac:	21 f4       	brne	.+8      	; 0x6b6 <CTL_update+0x20>
     6ae:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <CTL_temp_auto>
     6b2:	88 23       	and	r24, r24
     6b4:	19 f5       	brne	.+70     	; 0x6fc <CTL_update+0x66>
     6b6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <CTL_temp_auto>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	99 23       	and	r25, r25
     6be:	09 f4       	brne	.+2      	; 0x6c2 <CTL_update+0x2c>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 0f 18 	call	0x301e	; 0x301e <RTC_ActualTimerTemperature>
     6c6:	8c 83       	std	Y+4, r24	; 0x04
     6c8:	8c 81       	ldd	r24, Y+4	; 0x04
     6ca:	88 23       	and	r24, r24
     6cc:	b9 f0       	breq	.+46     	; 0x6fc <CTL_update+0x66>
     6ce:	8c 81       	ldd	r24, Y+4	; 0x04
     6d0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <CTL_temp_auto>
     6d4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <CTL_mode_auto>
     6d8:	88 23       	and	r24, r24
     6da:	81 f0       	breq	.+32     	; 0x6fc <CTL_update+0x66>
     6dc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <CTL_temp_auto>
     6e0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <CTL_temp_wanted>
     6e4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <PID_force_update>
     6e8:	88 23       	and	r24, r24
     6ea:	44 f4       	brge	.+16     	; 0x6fc <CTL_update+0x66>
     6ec:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <CTL_temp_wanted>
     6f0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <CTL_temp_wanted_last>
     6f4:	98 17       	cp	r25, r24
     6f6:	11 f0       	breq	.+4      	; 0x6fc <CTL_update+0x66>
     6f8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <PID_force_update>
     6fc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <PID_update_timeout>
     700:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <PID_update_timeout+0x1>
     704:	89 2b       	or	r24, r25
     706:	49 f0       	breq	.+18     	; 0x71a <CTL_update+0x84>
     708:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <PID_update_timeout>
     70c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <PID_update_timeout+0x1>
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <PID_update_timeout+0x1>
     716:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <PID_update_timeout>
     71a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <PID_force_update>
     71e:	18 16       	cp	r1, r24
     720:	34 f4       	brge	.+12     	; 0x72e <CTL_update+0x98>
     722:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <PID_force_update>
     726:	81 50       	subi	r24, 0x01	; 1
     728:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <PID_force_update>
     72c:	86 c0       	rjmp	.+268    	; 0x83a <CTL_update+0x1a4>
     72e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <PID_update_timeout>
     732:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <PID_update_timeout+0x1>
     736:	89 2b       	or	r24, r25
     738:	29 f0       	breq	.+10     	; 0x744 <CTL_update+0xae>
     73a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <PID_force_update>
     73e:	88 23       	and	r24, r24
     740:	09 f0       	breq	.+2      	; 0x744 <CTL_update+0xae>
     742:	7b c0       	rjmp	.+246    	; 0x83a <CTL_update+0x1a4>
     744:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <CTL_temp_wanted>
     748:	8a 30       	cpi	r24, 0x0A	; 10
     74a:	20 f0       	brcs	.+8      	; 0x754 <CTL_update+0xbe>
     74c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <CTL_mode_window>
     750:	88 23       	and	r24, r24
     752:	19 f0       	breq	.+6      	; 0x75a <CTL_update+0xc4>
     754:	8a e0       	ldi	r24, 0x0A	; 10
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	03 c0       	rjmp	.+6      	; 0x760 <CTL_update+0xca>
     75a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <CTL_temp_wanted>
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <CTL_temp_wanted_last>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	29 81       	ldd	r18, Y+1	; 0x01
     768:	29 17       	cp	r18, r25
     76a:	09 f4       	brne	.+2      	; 0x76e <CTL_update+0xd8>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	8d 83       	std	Y+5, r24	; 0x05
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	88 23       	and	r24, r24
     774:	39 f4       	brne	.+14     	; 0x784 <CTL_update+0xee>
     776:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <PID_update_timeout>
     77a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <PID_update_timeout+0x1>
     77e:	89 2b       	or	r24, r25
     780:	09 f0       	breq	.+2      	; 0x784 <CTL_update+0xee>
     782:	58 c0       	rjmp	.+176    	; 0x834 <CTL_update+0x19e>
     784:	80 ef       	ldi	r24, 0xF0	; 240
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <PID_update_timeout+0x1>
     78c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <PID_update_timeout>
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	8d 33       	cpi	r24, 0x3D	; 61
     794:	18 f0       	brcs	.+6      	; 0x79c <CTL_update+0x106>
     796:	80 e5       	ldi	r24, 0x50	; 80
     798:	8a 83       	std	Y+2, r24	; 0x02
     79a:	19 c0       	rjmp	.+50     	; 0x7ce <CTL_update+0x138>
     79c:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <valveHistory>
     7a0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <update_average_temp>
     7a4:	99 23       	and	r25, r25
     7a6:	0c f4       	brge	.+2      	; 0x7aa <CTL_update+0x114>
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	95 95       	asr	r25
     7ac:	87 95       	ror	r24
     7ae:	bc 01       	movw	r22, r24
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	42 e3       	ldi	r20, 0x32	; 50
     7b8:	48 9f       	mul	r20, r24
     7ba:	90 01       	movw	r18, r0
     7bc:	49 9f       	mul	r20, r25
     7be:	30 0d       	add	r19, r0
     7c0:	11 24       	eor	r1, r1
     7c2:	c9 01       	movw	r24, r18
     7c4:	2d 81       	ldd	r18, Y+5	; 0x05
     7c6:	41 2f       	mov	r20, r17
     7c8:	0e 94 87 04 	call	0x90e	; 0x90e <pid_Controller>
     7cc:	8a 83       	std	Y+2, r24	; 0x02
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <CTL_temp_wanted_last>
     7d4:	1b 82       	std	Y+3, r1	; 0x03
     7d6:	28 c0       	rjmp	.+80     	; 0x828 <CTL_update+0x192>
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	88 23       	and	r24, r24
     7dc:	31 f4       	brne	.+12     	; 0x7ea <CTL_update+0x154>
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	81 35       	cpi	r24, 0x51	; 81
     7e2:	18 f0       	brcs	.+6      	; 0x7ea <CTL_update+0x154>
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	8e 31       	cpi	r24, 0x1E	; 30
     7e8:	50 f0       	brcs	.+20     	; 0x7fe <CTL_update+0x168>
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	08 2e       	mov	r0, r24
     7ee:	00 0c       	add	r0, r0
     7f0:	99 0b       	sbc	r25, r25
     7f2:	81 59       	subi	r24, 0x91	; 145
     7f4:	9e 4f       	sbci	r25, 0xFE	; 254
     7f6:	2a 81       	ldd	r18, Y+2	; 0x02
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
     7fc:	12 c0       	rjmp	.+36     	; 0x822 <CTL_update+0x18c>
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	08 2e       	mov	r0, r24
     802:	00 0c       	add	r0, r0
     804:	99 0b       	sbc	r25, r25
     806:	2b 81       	ldd	r18, Y+3	; 0x03
     808:	02 2e       	mov	r0, r18
     80a:	00 0c       	add	r0, r0
     80c:	33 0b       	sbc	r19, r19
     80e:	21 50       	subi	r18, 0x01	; 1
     810:	31 09       	sbc	r19, r1
     812:	21 59       	subi	r18, 0x91	; 145
     814:	3e 4f       	sbci	r19, 0xFE	; 254
     816:	f9 01       	movw	r30, r18
     818:	20 81       	ld	r18, Z
     81a:	81 59       	subi	r24, 0x91	; 145
     81c:	9e 4f       	sbci	r25, 0xFE	; 254
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	81 50       	subi	r24, 0x01	; 1
     826:	8b 83       	std	Y+3, r24	; 0x03
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	18 16       	cp	r1, r24
     82c:	ac f2       	brlt	.-86     	; 0x7d8 <CTL_update+0x142>
     82e:	8a 81       	ldd	r24, Y+2	; 0x02
     830:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <valveHistory>
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <PID_force_update>
     83a:	00 00       	nop
     83c:	26 96       	adiw	r28, 0x06	; 6
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	08 95       	ret

00000850 <CTL_temp_change_inc>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	1f 92       	push	r1
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	89 83       	std	Y+1, r24	; 0x01
     85c:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <CTL_temp_wanted>
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	89 0f       	add	r24, r25
     864:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <CTL_temp_wanted>
     868:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <CTL_temp_wanted>
     86c:	89 30       	cpi	r24, 0x09	; 9
     86e:	20 f4       	brcc	.+8      	; 0x878 <CTL_temp_change_inc+0x28>
     870:	89 e0       	ldi	r24, 0x09	; 9
     872:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <CTL_temp_wanted>
     876:	07 c0       	rjmp	.+14     	; 0x886 <CTL_temp_change_inc+0x36>
     878:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <CTL_temp_wanted>
     87c:	8e 33       	cpi	r24, 0x3E	; 62
     87e:	18 f0       	brcs	.+6      	; 0x886 <CTL_temp_change_inc+0x36>
     880:	8d e3       	ldi	r24, 0x3D	; 61
     882:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <CTL_temp_wanted>
     886:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <CTL_mode_window>
     88a:	89 e0       	ldi	r24, 0x09	; 9
     88c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <PID_force_update>
     890:	00 00       	nop
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <testIntegratorRevert>:
 */

static uint16_t lastTempChangeErrorAbs;
static int32_t lastTempChangeSumError;

static void testIntegratorRevert(uint16_t absErr) {
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <testIntegratorRevert+0x6>
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
	 if ((absErr>=((lastTempChangeErrorAbs*3)>>2)) 
     8a8:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <lastTempChangeErrorAbs>
     8ac:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <lastTempChangeErrorAbs+0x1>
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
     8ba:	9c 01       	movw	r18, r24
     8bc:	36 95       	lsr	r19
     8be:	27 95       	ror	r18
     8c0:	36 95       	lsr	r19
     8c2:	27 95       	ror	r18
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	9a 81       	ldd	r25, Y+2	; 0x02
     8c8:	82 17       	cp	r24, r18
     8ca:	93 07       	cpc	r25, r19
     8cc:	a0 f0       	brcs	.+40     	; 0x8f6 <testIntegratorRevert+0x5c>
		&& (absErr > (I_ERR_TOLLERANCE_AROUND_0*2))) {
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	4f 97       	sbiw	r24, 0x1f	; 31
     8d4:	80 f0       	brcs	.+32     	; 0x8f6 <testIntegratorRevert+0x5c>
		// if error could not be reduced to 3/4 and Error is larger than I_ERR_TOLLERANCE_AROUND_0°C
		sumError=lastTempChangeSumError;
     8d6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <lastTempChangeSumError>
     8da:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <lastTempChangeSumError+0x1>
     8de:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <lastTempChangeSumError+0x2>
     8e2:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <lastTempChangeSumError+0x3>
     8e6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <sumError>
     8ea:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <sumError+0x1>
     8ee:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <sumError+0x2>
     8f2:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <sumError+0x3>
	}
	lastTempChangeErrorAbs = 0xffff; // function can be called more time but only first is valid
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	9f ef       	ldi	r25, 0xFF	; 255
     8fa:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <lastTempChangeErrorAbs+0x1>
     8fe:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <lastTempChangeErrorAbs>
}
     902:	00 00       	nop
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <pid_Controller>:


static uint8_t pid_Controller(int16_t setPoint, int16_t processValue, uint8_t old_result, bool updateNow)
{
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	65 97       	sbiw	r28, 0x15	; 21
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
     92a:	99 8b       	std	Y+17, r25	; 0x11
     92c:	88 8b       	std	Y+16, r24	; 0x10
     92e:	7b 8b       	std	Y+19, r23	; 0x13
     930:	6a 8b       	std	Y+18, r22	; 0x12
     932:	4c 8b       	std	Y+20, r20	; 0x14
     934:	2d 8b       	std	Y+21, r18	; 0x15
  int32_t /*error2,*/ pi_term;
  int16_t error16;
  error16 = setPoint - processValue;
     936:	28 89       	ldd	r18, Y+16	; 0x10
     938:	39 89       	ldd	r19, Y+17	; 0x11
     93a:	8a 89       	ldd	r24, Y+18	; 0x12
     93c:	9b 89       	ldd	r25, Y+19	; 0x13
     93e:	a9 01       	movw	r20, r18
     940:	48 1b       	sub	r20, r24
     942:	59 0b       	sbc	r21, r25
     944:	ca 01       	movw	r24, r20
     946:	9a 83       	std	Y+2, r25	; 0x02
     948:	89 83       	std	Y+1, r24	; 0x01

  // maximum error is 12 degree C
  if (error16 > 1200) {
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	9a 81       	ldd	r25, Y+2	; 0x02
     94e:	81 3b       	cpi	r24, 0xB1	; 177
     950:	94 40       	sbci	r25, 0x04	; 4
     952:	2c f0       	brlt	.+10     	; 0x95e <pid_Controller+0x50>
    error16=1200;
     954:	80 eb       	ldi	r24, 0xB0	; 176
     956:	94 e0       	ldi	r25, 0x04	; 4
     958:	9a 83       	std	Y+2, r25	; 0x02
     95a:	89 83       	std	Y+1, r24	; 0x01
     95c:	09 c0       	rjmp	.+18     	; 0x970 <pid_Controller+0x62>
  } else if (error16 < -1200) {
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	9a 81       	ldd	r25, Y+2	; 0x02
     962:	80 35       	cpi	r24, 0x50	; 80
     964:	9b 4f       	sbci	r25, 0xFB	; 251
     966:	24 f4       	brge	.+8      	; 0x970 <pid_Controller+0x62>
    error16=-1200;
     968:	80 e5       	ldi	r24, 0x50	; 80
     96a:	9b ef       	ldi	r25, 0xFB	; 251
     96c:	9a 83       	std	Y+2, r25	; 0x02
     96e:	89 83       	std	Y+1, r24	; 0x01
  }

  {
	  int16_t absErr = abs(error16);
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	99 23       	and	r25, r25
     976:	1c f4       	brge	.+6      	; 0x97e <pid_Controller+0x70>
     978:	91 95       	neg	r25
     97a:	81 95       	neg	r24
     97c:	91 09       	sbc	r25, r1
     97e:	9e 83       	std	Y+6, r25	; 0x06
     980:	8d 83       	std	Y+5, r24	; 0x05
	  if (updateNow) {
     982:	8d 89       	ldd	r24, Y+21	; 0x15
     984:	88 23       	and	r24, r24
     986:	31 f1       	breq	.+76     	; 0x9d4 <pid_Controller+0xc6>
		  CTL_interatorCredit=I_max_credit;
     988:	88 e2       	ldi	r24, 0x28	; 40
     98a:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <CTL_interatorCredit>
		  CTL_creditExpiration=I_credit_expiration;
     98e:	8e e1       	ldi	r24, 0x1E	; 30
     990:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <CTL_creditExpiration>
		  CTL_integratorBlock=DEFINE_INTEGRATOR_BLOCK; // do not allow update integrator immediately after temp change
     994:	86 e0       	ldi	r24, 0x06	; 6
     996:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <CTL_integratorBlock>
		  testIntegratorRevert(lastAbsError);
     99a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lastAbsError>
     99e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <lastAbsError+0x1>
     9a2:	0e 94 4d 04 	call	0x89a	; 0x89a <testIntegratorRevert>
		  lastTempChangeErrorAbs = absErr;
     9a6:	8d 81       	ldd	r24, Y+5	; 0x05
     9a8:	9e 81       	ldd	r25, Y+6	; 0x06
     9aa:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <lastTempChangeErrorAbs+0x1>
     9ae:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <lastTempChangeErrorAbs>
		  lastTempChangeSumError = sumError;
     9b2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <sumError>
     9b6:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <sumError+0x1>
     9ba:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <sumError+0x2>
     9be:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <sumError+0x3>
     9c2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <lastTempChangeSumError>
     9c6:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <lastTempChangeSumError+0x1>
     9ca:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <lastTempChangeSumError+0x2>
     9ce:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <lastTempChangeSumError+0x3>
     9d2:	a5 c0       	rjmp	.+330    	; 0xb1e <pid_Controller+0x210>
				PID_boost_timeout = (error16 >= 0) ? temp_boost_time_heat : temp_boost_time_cool ;
				PID_boost_timeout = (uint8_t)(MIN(255,abs(error16)/10*(int16_t)PID_boost_timeout/(int16_t)temp_boost_tempchange)); //boosttime=error/10(0,1°C)*time/tempchange
			  }
		  #endif
	  } else {
		if (CTL_integratorBlock == 0) {
     9d4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <CTL_integratorBlock>
     9d8:	88 23       	and	r24, r24
     9da:	09 f0       	breq	.+2      	; 0x9de <pid_Controller+0xd0>
     9dc:	86 c0       	rjmp	.+268    	; 0xaea <pid_Controller+0x1dc>
			if (CTL_creditExpiration>0) {
     9de:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <CTL_creditExpiration>
     9e2:	88 23       	and	r24, r24
     9e4:	31 f0       	breq	.+12     	; 0x9f2 <pid_Controller+0xe4>
				CTL_creditExpiration--;
     9e6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <CTL_creditExpiration>
     9ea:	81 50       	subi	r24, 0x01	; 1
     9ec:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <CTL_creditExpiration>
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <pid_Controller+0xe8>
			} else {
				CTL_interatorCredit=0;
     9f2:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <CTL_interatorCredit>
			}
			if ((error16 >= 0) ? (old_result < valve_max) : (old_result > valve_min)) {
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	99 23       	and	r25, r25
     9fc:	34 f0       	brlt	.+12     	; 0xa0a <pid_Controller+0xfc>
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	9c 89       	ldd	r25, Y+20	; 0x14
     a02:	90 35       	cpi	r25, 0x50	; 80
     a04:	38 f0       	brcs	.+14     	; 0xa14 <pid_Controller+0x106>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <pid_Controller+0x106>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	9c 89       	ldd	r25, Y+20	; 0x14
     a0e:	9f 31       	cpi	r25, 0x1F	; 31
     a10:	08 f4       	brcc	.+2      	; 0xa14 <pid_Controller+0x106>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	88 23       	and	r24, r24
     a16:	09 f4       	brne	.+2      	; 0xa1a <pid_Controller+0x10c>
     a18:	5f c0       	rjmp	.+190    	; 0xad8 <pid_Controller+0x1ca>
			  if (((lastErrorSign != ((uint8_t)(error16>>8)&0x80))) || 
     a1a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <lastErrorSign>
     a1e:	28 2f       	mov	r18, r24
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	89 2f       	mov	r24, r25
     a28:	99 27       	eor	r25, r25
     a2a:	80 78       	andi	r24, 0x80	; 128
     a2c:	99 27       	eor	r25, r25
     a2e:	28 17       	cp	r18, r24
     a30:	39 07       	cpc	r19, r25
     a32:	69 f4       	brne	.+26     	; 0xa4e <pid_Controller+0x140>
				((absErr==last2AbsError) && (absErr<=I_ERR_TOLLERANCE_AROUND_0))) { //sign of last error16 != sign of current OR abserror around 0
     a34:	2d 81       	ldd	r18, Y+5	; 0x05
     a36:	3e 81       	ldd	r19, Y+6	; 0x06
     a38:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <last2AbsError>
     a3c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <last2AbsError+0x1>
				CTL_creditExpiration--;
			} else {
				CTL_interatorCredit=0;
			}
			if ((error16 >= 0) ? (old_result < valve_max) : (old_result > valve_min)) {
			  if (((lastErrorSign != ((uint8_t)(error16>>8)&0x80))) || 
     a40:	28 17       	cp	r18, r24
     a42:	39 07       	cpc	r19, r25
     a44:	59 f4       	brne	.+22     	; 0xa5c <pid_Controller+0x14e>
				((absErr==last2AbsError) && (absErr<=I_ERR_TOLLERANCE_AROUND_0))) { //sign of last error16 != sign of current OR abserror around 0
     a46:	8d 81       	ldd	r24, Y+5	; 0x05
     a48:	9e 81       	ldd	r25, Y+6	; 0x06
     a4a:	40 97       	sbiw	r24, 0x10	; 16
     a4c:	3c f4       	brge	.+14     	; 0xa5c <pid_Controller+0x14e>

				  CTL_interatorCredit=I_max_credit; // ? optional
     a4e:	88 e2       	ldi	r24, 0x28	; 40
     a50:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <CTL_interatorCredit>
				  CTL_creditExpiration=I_credit_expiration;
     a54:	8e e1       	ldi	r24, 0x1E	; 30
     a56:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <CTL_creditExpiration>
				  goto INTEGRATOR; // next integration, do not change CTL_interatorCredit
     a5a:	1e c0       	rjmp	.+60     	; 0xa98 <pid_Controller+0x18a>
			  }
			  if (CTL_interatorCredit>0) {
     a5c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <CTL_interatorCredit>
     a60:	18 16       	cp	r1, r24
     a62:	d4 f5       	brge	.+116    	; 0xad8 <pid_Controller+0x1ca>
				  if (absErr >= last2AbsError) { // error can grow only limited time 
     a64:	2d 81       	ldd	r18, Y+5	; 0x05
     a66:	3e 81       	ldd	r19, Y+6	; 0x06
     a68:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <last2AbsError>
     a6c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <last2AbsError+0x1>
     a70:	28 17       	cp	r18, r24
     a72:	39 07       	cpc	r19, r25
     a74:	88 f1       	brcs	.+98     	; 0xad8 <pid_Controller+0x1ca>
					  CTL_interatorCredit-=(absErr/I_ERR_WEIGHT)+1; // max is 1200/20+1 = 61
     a76:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <CTL_interatorCredit>
     a7a:	48 2f       	mov	r20, r24
     a7c:	8d 81       	ldd	r24, Y+5	; 0x05
     a7e:	9e 81       	ldd	r25, Y+6	; 0x06
     a80:	29 e1       	ldi	r18, 0x19	; 25
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	b9 01       	movw	r22, r18
     a86:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
     a8a:	cb 01       	movw	r24, r22
     a8c:	54 2f       	mov	r21, r20
     a8e:	58 1b       	sub	r21, r24
     a90:	85 2f       	mov	r24, r21
     a92:	81 50       	subi	r24, 0x01	; 1
     a94:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <CTL_interatorCredit>
					  INTEGRATOR:
					  sumError += error16*8;
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	9c 01       	movw	r18, r24
     aaa:	99 0f       	add	r25, r25
     aac:	44 0b       	sbc	r20, r20
     aae:	55 0b       	sbc	r21, r21
     ab0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <sumError>
     ab4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <sumError+0x1>
     ab8:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <sumError+0x2>
     abc:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <sumError+0x3>
     ac0:	82 0f       	add	r24, r18
     ac2:	93 1f       	adc	r25, r19
     ac4:	a4 1f       	adc	r26, r20
     ac6:	b5 1f       	adc	r27, r21
     ac8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <sumError>
     acc:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <sumError+0x1>
     ad0:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <sumError+0x2>
     ad4:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <sumError+0x3>
				  }
			  }
			} 
			if (CTL_interatorCredit<=0) {
     ad8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <CTL_interatorCredit>
     adc:	18 16       	cp	r1, r24
     ade:	54 f0       	brlt	.+20     	; 0xaf4 <pid_Controller+0x1e6>
				// credit is empty, test result
				testIntegratorRevert(absErr);
     ae0:	8d 81       	ldd	r24, Y+5	; 0x05
     ae2:	9e 81       	ldd	r25, Y+6	; 0x06
     ae4:	0e 94 4d 04 	call	0x89a	; 0x89a <testIntegratorRevert>
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <pid_Controller+0x1e6>
			} 
		} else {
			CTL_integratorBlock--;
     aea:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <CTL_integratorBlock>
     aee:	81 50       	subi	r24, 0x01	; 1
     af0:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <CTL_integratorBlock>
		}
		last2AbsError = lastAbsError;
     af4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <lastAbsError>
     af8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <lastAbsError+0x1>
     afc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <last2AbsError+0x1>
     b00:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <last2AbsError>
		lastAbsError = absErr;
     b04:	8d 81       	ldd	r24, Y+5	; 0x05
     b06:	9e 81       	ldd	r25, Y+6	; 0x06
     b08:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <lastAbsError+0x1>
     b0c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <lastAbsError>
	    lastErrorSign = (uint8_t)(error16>>8)&0x80;
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	9a 81       	ldd	r25, Y+2	; 0x02
     b14:	89 2f       	mov	r24, r25
     b16:	99 27       	eor	r25, r25
     b18:	80 78       	andi	r24, 0x80	; 128
     b1a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <lastErrorSign>
      }
  }
  lastProcessValue = processValue;
     b1e:	8a 89       	ldd	r24, Y+18	; 0x12
     b20:	9b 89       	ldd	r25, Y+19	; 0x13
     b22:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <lastProcessValue+0x1>
     b26:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <lastProcessValue>
  #endif
  
  if (I_Factor > 0) {
	  int32_t maxSumError;
      // for overload protection: maximum is scalling_factor*scalling_factor*50/1 = 3276800
      maxSumError = ((int32_t)scalling_factor*(int32_t)scalling_factor*50)/I_Factor;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e9       	ldi	r25, 0x90	; 144
     b2e:	a1 e0       	ldi	r26, 0x01	; 1
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	8f 83       	std	Y+7, r24	; 0x07
     b34:	98 87       	std	Y+8, r25	; 0x08
     b36:	a9 87       	std	Y+9, r26	; 0x09
     b38:	ba 87       	std	Y+10, r27	; 0x0a
	  if(sumError > maxSumError){
     b3a:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <sumError>
     b3e:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <sumError+0x1>
     b42:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <sumError+0x2>
     b46:	50 91 2e 01 	lds	r21, 0x012E	; 0x80012e <sumError+0x3>
     b4a:	8f 81       	ldd	r24, Y+7	; 0x07
     b4c:	98 85       	ldd	r25, Y+8	; 0x08
     b4e:	a9 85       	ldd	r26, Y+9	; 0x09
     b50:	ba 85       	ldd	r27, Y+10	; 0x0a
     b52:	82 17       	cp	r24, r18
     b54:	93 07       	cpc	r25, r19
     b56:	a4 07       	cpc	r26, r20
     b58:	b5 07       	cpc	r27, r21
     b5a:	6c f4       	brge	.+26     	; 0xb76 <pid_Controller+0x268>
		sumError = maxSumError;
     b5c:	8f 81       	ldd	r24, Y+7	; 0x07
     b5e:	98 85       	ldd	r25, Y+8	; 0x08
     b60:	a9 85       	ldd	r26, Y+9	; 0x09
     b62:	ba 85       	ldd	r27, Y+10	; 0x0a
     b64:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <sumError>
     b68:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <sumError+0x1>
     b6c:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <sumError+0x2>
     b70:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <sumError+0x3>
     b74:	2b c0       	rjmp	.+86     	; 0xbcc <pid_Controller+0x2be>
	  } else if(sumError < -maxSumError){
     b76:	8f 81       	ldd	r24, Y+7	; 0x07
     b78:	98 85       	ldd	r25, Y+8	; 0x08
     b7a:	a9 85       	ldd	r26, Y+9	; 0x09
     b7c:	ba 85       	ldd	r27, Y+10	; 0x0a
     b7e:	22 27       	eor	r18, r18
     b80:	33 27       	eor	r19, r19
     b82:	a9 01       	movw	r20, r18
     b84:	28 1b       	sub	r18, r24
     b86:	39 0b       	sbc	r19, r25
     b88:	4a 0b       	sbc	r20, r26
     b8a:	5b 0b       	sbc	r21, r27
     b8c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <sumError>
     b90:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <sumError+0x1>
     b94:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <sumError+0x2>
     b98:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <sumError+0x3>
     b9c:	82 17       	cp	r24, r18
     b9e:	93 07       	cpc	r25, r19
     ba0:	a4 07       	cpc	r26, r20
     ba2:	b5 07       	cpc	r27, r21
     ba4:	9c f4       	brge	.+38     	; 0xbcc <pid_Controller+0x2be>
		sumError = -maxSumError;
     ba6:	8f 81       	ldd	r24, Y+7	; 0x07
     ba8:	98 85       	ldd	r25, Y+8	; 0x08
     baa:	a9 85       	ldd	r26, Y+9	; 0x09
     bac:	ba 85       	ldd	r27, Y+10	; 0x0a
     bae:	b0 95       	com	r27
     bb0:	a0 95       	com	r26
     bb2:	90 95       	com	r25
     bb4:	81 95       	neg	r24
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	af 4f       	sbci	r26, 0xFF	; 255
     bba:	bf 4f       	sbci	r27, 0xFF	; 255
     bbc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <sumError>
     bc0:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <sumError+0x1>
     bc4:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <sumError+0x2>
     bc8:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <sumError+0x3>
	  }
  }

  pi_term = (int32_t)(error16);
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	09 2e       	mov	r0, r25
     bd2:	00 0c       	add	r0, r0
     bd4:	aa 0b       	sbc	r26, r26
     bd6:	bb 0b       	sbc	r27, r27
     bd8:	8b 87       	std	Y+11, r24	; 0x0b
     bda:	9c 87       	std	Y+12, r25	; 0x0c
     bdc:	ad 87       	std	Y+13, r26	; 0x0d
     bde:	be 87       	std	Y+14, r27	; 0x0e
  pi_term *=  pi_term * (int32_t)P3_Factor;
     be0:	2b 85       	ldd	r18, Y+11	; 0x0b
     be2:	3c 85       	ldd	r19, Y+12	; 0x0c
     be4:	4d 85       	ldd	r20, Y+13	; 0x0d
     be6:	5e 85       	ldd	r21, Y+14	; 0x0e
     be8:	da 01       	movw	r26, r20
     bea:	c9 01       	movw	r24, r18
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	aa 1f       	adc	r26, r26
     bf2:	bb 1f       	adc	r27, r27
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	a4 1f       	adc	r26, r20
     bfa:	b5 1f       	adc	r27, r21
     bfc:	9c 01       	movw	r18, r24
     bfe:	ad 01       	movw	r20, r26
     c00:	22 0f       	add	r18, r18
     c02:	33 1f       	adc	r19, r19
     c04:	44 1f       	adc	r20, r20
     c06:	55 1f       	adc	r21, r21
     c08:	22 0f       	add	r18, r18
     c0a:	33 1f       	adc	r19, r19
     c0c:	44 1f       	adc	r20, r20
     c0e:	55 1f       	adc	r21, r21
     c10:	82 0f       	add	r24, r18
     c12:	93 1f       	adc	r25, r19
     c14:	a4 1f       	adc	r26, r20
     c16:	b5 1f       	adc	r27, r21
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	aa 1f       	adc	r26, r26
     c1e:	bb 1f       	adc	r27, r27
     c20:	7c 01       	movw	r14, r24
     c22:	8d 01       	movw	r16, r26
     c24:	8b 85       	ldd	r24, Y+11	; 0x0b
     c26:	9c 85       	ldd	r25, Y+12	; 0x0c
     c28:	ad 85       	ldd	r26, Y+13	; 0x0d
     c2a:	be 85       	ldd	r27, Y+14	; 0x0e
     c2c:	9c 01       	movw	r18, r24
     c2e:	ad 01       	movw	r20, r26
     c30:	c8 01       	movw	r24, r16
     c32:	b7 01       	movw	r22, r14
     c34:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	8b 87       	std	Y+11, r24	; 0x0b
     c3e:	9c 87       	std	Y+12, r25	; 0x0c
     c40:	ad 87       	std	Y+13, r26	; 0x0d
     c42:	be 87       	std	Y+14, r27	; 0x0e
  pi_term >>= 8;
     c44:	8b 85       	ldd	r24, Y+11	; 0x0b
     c46:	9c 85       	ldd	r25, Y+12	; 0x0c
     c48:	ad 85       	ldd	r26, Y+13	; 0x0d
     c4a:	be 85       	ldd	r27, Y+14	; 0x0e
     c4c:	89 2f       	mov	r24, r25
     c4e:	9a 2f       	mov	r25, r26
     c50:	ab 2f       	mov	r26, r27
     c52:	bb 27       	eor	r27, r27
     c54:	a7 fd       	sbrc	r26, 7
     c56:	ba 95       	dec	r27
     c58:	8b 87       	std	Y+11, r24	; 0x0b
     c5a:	9c 87       	std	Y+12, r25	; 0x0c
     c5c:	ad 87       	std	Y+13, r26	; 0x0d
     c5e:	be 87       	std	Y+14, r27	; 0x0e
  pi_term += ((uint16_t)P_Factor <<8);
     c60:	8b 85       	ldd	r24, Y+11	; 0x0b
     c62:	9c 85       	ldd	r25, Y+12	; 0x0c
     c64:	ad 85       	ldd	r26, Y+13	; 0x0d
     c66:	be 85       	ldd	r27, Y+14	; 0x0e
     c68:	98 5f       	subi	r25, 0xF8	; 248
     c6a:	af 4f       	sbci	r26, 0xFF	; 255
     c6c:	bf 4f       	sbci	r27, 0xFF	; 255
     c6e:	8b 87       	std	Y+11, r24	; 0x0b
     c70:	9c 87       	std	Y+12, r25	; 0x0c
     c72:	ad 87       	std	Y+13, r26	; 0x0d
     c74:	be 87       	std	Y+14, r27	; 0x0e
  pi_term *= (int32_t)error16;
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	09 2e       	mov	r0, r25
     c7c:	00 0c       	add	r0, r0
     c7e:	aa 0b       	sbc	r26, r26
     c80:	bb 0b       	sbc	r27, r27
     c82:	2b 85       	ldd	r18, Y+11	; 0x0b
     c84:	3c 85       	ldd	r19, Y+12	; 0x0c
     c86:	4d 85       	ldd	r20, Y+13	; 0x0d
     c88:	5e 85       	ldd	r21, Y+14	; 0x0e
     c8a:	bc 01       	movw	r22, r24
     c8c:	cd 01       	movw	r24, r26
     c8e:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	8b 87       	std	Y+11, r24	; 0x0b
     c98:	9c 87       	std	Y+12, r25	; 0x0c
     c9a:	ad 87       	std	Y+13, r26	; 0x0d
     c9c:	be 87       	std	Y+14, r27	; 0x0e
  pi_term += (int32_t)(I_Factor) * sumError; // maximum is 65536*50=(scalling_factor*scalling_factor*50/I_Factor)*I_Factor
     c9e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <sumError>
     ca2:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <sumError+0x1>
     ca6:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <sumError+0x2>
     caa:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <sumError+0x3>
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	aa 1f       	adc	r26, r26
     cb4:	bb 1f       	adc	r27, r27
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	aa 1f       	adc	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	aa 1f       	adc	r26, r26
     cc4:	bb 1f       	adc	r27, r27
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	aa 1f       	adc	r26, r26
     ccc:	bb 1f       	adc	r27, r27
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	aa 1f       	adc	r26, r26
     cd4:	bb 1f       	adc	r27, r27
     cd6:	9c 01       	movw	r18, r24
     cd8:	ad 01       	movw	r20, r26
     cda:	8b 85       	ldd	r24, Y+11	; 0x0b
     cdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cde:	ad 85       	ldd	r26, Y+13	; 0x0d
     ce0:	be 85       	ldd	r27, Y+14	; 0x0e
     ce2:	82 0f       	add	r24, r18
     ce4:	93 1f       	adc	r25, r19
     ce6:	a4 1f       	adc	r26, r20
     ce8:	b5 1f       	adc	r27, r21
     cea:	8b 87       	std	Y+11, r24	; 0x0b
     cec:	9c 87       	std	Y+12, r25	; 0x0c
     cee:	ad 87       	std	Y+13, r26	; 0x0d
     cf0:	be 87       	std	Y+14, r27	; 0x0e
  /* 
   * pi_term - > for overload limit: 
   * maximum is +-(((255*1200*1200/256)+255)*1200+65536*50)
   * = +-1724832800 fit into signed 32bit
  */
  pi_term += (int32_t)(valve_center)*scalling_factor*scalling_factor;
     cf2:	8b 85       	ldd	r24, Y+11	; 0x0b
     cf4:	9c 85       	ldd	r25, Y+12	; 0x0c
     cf6:	ad 85       	ldd	r26, Y+13	; 0x0d
     cf8:	be 85       	ldd	r27, Y+14	; 0x0e
     cfa:	9d 96       	adiw	r26, 0x2d	; 45
     cfc:	8b 87       	std	Y+11, r24	; 0x0b
     cfe:	9c 87       	std	Y+12, r25	; 0x0c
     d00:	ad 87       	std	Y+13, r26	; 0x0d
     d02:	be 87       	std	Y+14, r27	; 0x0e
  pi_term >>= 8; // /=scalling_factor
     d04:	8b 85       	ldd	r24, Y+11	; 0x0b
     d06:	9c 85       	ldd	r25, Y+12	; 0x0c
     d08:	ad 85       	ldd	r26, Y+13	; 0x0d
     d0a:	be 85       	ldd	r27, Y+14	; 0x0e
     d0c:	89 2f       	mov	r24, r25
     d0e:	9a 2f       	mov	r25, r26
     d10:	ab 2f       	mov	r26, r27
     d12:	bb 27       	eor	r27, r27
     d14:	a7 fd       	sbrc	r26, 7
     d16:	ba 95       	dec	r27
     d18:	8b 87       	std	Y+11, r24	; 0x0b
     d1a:	9c 87       	std	Y+12, r25	; 0x0c
     d1c:	ad 87       	std	Y+13, r26	; 0x0d
     d1e:	be 87       	std	Y+14, r27	; 0x0e

  if(pi_term > (int32_t)((uint16_t)valve_max*scalling_factor)){
     d20:	8b 85       	ldd	r24, Y+11	; 0x0b
     d22:	9c 85       	ldd	r25, Y+12	; 0x0c
     d24:	ad 85       	ldd	r26, Y+13	; 0x0d
     d26:	be 85       	ldd	r27, Y+14	; 0x0e
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	90 45       	sbci	r25, 0x50	; 80
     d2c:	a1 05       	cpc	r26, r1
     d2e:	b1 05       	cpc	r27, r1
     d30:	14 f0       	brlt	.+4      	; 0xd36 <pid_Controller+0x428>
    return valve_max;
     d32:	80 e5       	ldi	r24, 0x50	; 80
     d34:	3d c0       	rjmp	.+122    	; 0xdb0 <pid_Controller+0x4a2>
  } else if(pi_term < 0){
     d36:	8b 85       	ldd	r24, Y+11	; 0x0b
     d38:	9c 85       	ldd	r25, Y+12	; 0x0c
     d3a:	ad 85       	ldd	r26, Y+13	; 0x0d
     d3c:	be 85       	ldd	r27, Y+14	; 0x0e
     d3e:	bb 23       	and	r27, r27
     d40:	14 f4       	brge	.+4      	; 0xd46 <pid_Controller+0x438>
    return valve_min;
     d42:	8e e1       	ldi	r24, 0x1E	; 30
     d44:	35 c0       	rjmp	.+106    	; 0xdb0 <pid_Controller+0x4a2>
  }
  // now we can use 16bit value ( 0 < pi_term < 25600 )
  {
    uint16_t pi_term16 = pi_term;
     d46:	8b 85       	ldd	r24, Y+11	; 0x0b
     d48:	9c 85       	ldd	r25, Y+12	; 0x0c
     d4a:	9c 83       	std	Y+4, r25	; 0x04
     d4c:	8b 83       	std	Y+3, r24	; 0x03

	{
		bool gt = (uint8_t)(pi_term16>>8 /*/scalling_factor*/) >= old_result;
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	89 2f       	mov	r24, r25
     d54:	99 27       	eor	r25, r25
     d56:	9c 01       	movw	r18, r24
     d58:	8c 89       	ldd	r24, Y+20	; 0x14
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	28 17       	cp	r18, r24
     d62:	39 07       	cpc	r19, r25
     d64:	0c f4       	brge	.+2      	; 0xd68 <pid_Controller+0x45a>
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	4f 87       	std	Y+15, r20	; 0x0f
		// asymetric round, ignore changes < 3/4%
		pi_term16 += scalling_factor/2; // prepare for round
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	80 58       	subi	r24, 0x80	; 128
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
		if (gt) {
     d76:	8f 85       	ldd	r24, Y+15	; 0x0f
     d78:	88 23       	and	r24, r24
     d7a:	39 f0       	breq	.+14     	; 0xd8a <pid_Controller+0x47c>
			pi_term16 -= valve_hysteresis; // prepare for round
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	80 54       	subi	r24, 0x40	; 64
     d82:	91 09       	sbc	r25, r1
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <pid_Controller+0x488>
		} else {
			pi_term16 += valve_hysteresis; // prepare for round
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	80 5c       	subi	r24, 0xC0	; 192
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	9c 83       	std	Y+4, r25	; 0x04
     d94:	8b 83       	std	Y+3, r24	; 0x03
		}
		pi_term16 >>= 8; // /= scalling_factor;
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	89 2f       	mov	r24, r25
     d9c:	99 27       	eor	r25, r25
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 83       	std	Y+3, r24	; 0x03
	}
	if(pi_term16 < valve_min) {
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	4e 97       	sbiw	r24, 0x1e	; 30
     da8:	10 f4       	brcc	.+4      	; 0xdae <pid_Controller+0x4a0>
      return valve_min;
     daa:	8e e1       	ldi	r24, 0x1E	; 30
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <pid_Controller+0x4a2>
    }
    
	return (uint8_t)pi_term16;
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
  }
}
     db0:	65 96       	adiw	r28, 0x15	; 21
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	08 95       	ret

00000dca <EEPROM_read>:
				config_raw[idx] = config_default(idx); // default value
			}
			config_write(idx, config_raw[idx]);
		}
	}
}
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <EEPROM_read+0x6>
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	00 00       	nop
     dda:	8f e3       	ldi	r24, 0x3F	; 63
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	82 70       	andi	r24, 0x02	; 2
     de8:	99 27       	eor	r25, r25
     dea:	89 2b       	or	r24, r25
     dec:	b1 f7       	brne	.-20     	; 0xdda <EEPROM_read+0x10>
     dee:	81 e4       	ldi	r24, 0x41	; 65
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	29 81       	ldd	r18, Y+1	; 0x01
     df4:	3a 81       	ldd	r19, Y+2	; 0x02
     df6:	fc 01       	movw	r30, r24
     df8:	31 83       	std	Z+1, r19	; 0x01
     dfa:	20 83       	st	Z, r18
     dfc:	8f e3       	ldi	r24, 0x3F	; 63
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	2f e3       	ldi	r18, 0x3F	; 63
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	f9 01       	movw	r30, r18
     e06:	20 81       	ld	r18, Z
     e08:	21 60       	ori	r18, 0x01	; 1
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
     e0e:	80 e4       	ldi	r24, 0x40	; 64
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	fc 01       	movw	r30, r24
     e14:	80 81       	ld	r24, Z
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <eeprom_timers_read_raw>:
 *  read timer from storage
 *
 *  \note
 ******************************************************************************/

uint16_t eeprom_timers_read_raw(uint8_t offset) {
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	00 d0       	rcall	.+0      	; 0xe2a <eeprom_timers_read_raw+0xa>
     e2a:	1f 92       	push	r1
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	8b 83       	std	Y+3, r24	; 0x03
    if (offset != timmers_patch_offset) {
     e32:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <timmers_patch_offset>
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	98 17       	cp	r25, r24
     e3a:	f1 f0       	breq	.+60     	; 0xe78 <eeprom_timers_read_raw+0x58>
        uint16_t eeaddr = (uint16_t)offset * (uint16_t)sizeof(ee_timers[0][0]) + (uint16_t)ee_timers;
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9c 01       	movw	r18, r24
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
    	return (EEPROM_read(eeaddr+1)<<8) + EEPROM_read(eeaddr); //litle endian
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	0e 94 e5 06 	call	0xdca	; 0xdca <EEPROM_read>
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	18 2f       	mov	r17, r24
     e64:	00 27       	eor	r16, r16
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	0e 94 e5 06 	call	0xdca	; 0xdca <EEPROM_read>
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	80 0f       	add	r24, r16
     e74:	91 1f       	adc	r25, r17
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <eeprom_timers_read_raw+0x60>
    } else {
        return timmers_patch_data;
     e78:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <timmers_patch_data>
     e7c:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <timmers_patch_data+0x1>
    }
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <e_meassure>:
/*
Meassure all values and store them in internal structures with min and max values
Also basic control should be placed here, like valve positioning
*/
void e_meassure(void)
{
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	00 d0       	rcall	.+0      	; 0xe9a <e_meassure+0xa>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t lastsec;
	static uint8_t state;
	register uint8_t time = RTC_GetSecond();
     e9e:	10 91 fa 01 	lds	r17, 0x01FA	; 0x8001fa <RTC_ss>
	register uint16_t temp;
	
	time = time >> 1;	// We are not interested in every second :-)
     ea2:	16 95       	lsr	r17
	if (lastsec != time)
     ea4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <lastsec.2158>
     ea8:	81 17       	cp	r24, r17
     eaa:	09 f4       	brne	.+2      	; 0xeae <e_meassure+0x1e>
     eac:	54 c0       	rjmp	.+168    	; 0xf56 <e_meassure+0xc6>
	{
		lastsec = time;
     eae:	10 93 3c 01 	sts	0x013C, r17	; 0x80013c <lastsec.2158>
		state++;
     eb2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <state.2159>
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <state.2159>
		switch(state)
     ebc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <state.2159>
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	91 05       	cpc	r25, r1
     ec8:	19 f0       	breq	.+6      	; 0xed0 <e_meassure+0x40>
     eca:	02 97       	sbiw	r24, 0x02	; 2
     ecc:	41 f1       	breq	.+80     	; 0xf1e <e_meassure+0x8e>
     ece:	3d c0       	rjmp	.+122    	; 0xf4a <e_meassure+0xba>
		{
			case 1:
			{
				ADC_Measure_Ub();
     ed0:	0e 94 83 00 	call	0x106	; 0x106 <ADC_Measure_Ub>
				temp = ADC_Get_Temp_Degree();	// Get temp to make shure it is converted already
     ed4:	0e 94 b3 00 	call	0x166	; 0x166 <ADC_Get_Temp_Degree>
     ed8:	8c 01       	movw	r16, r24
				if (temp != st.tempCur)
     eda:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <st+0x4>
     ede:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <st+0x5>
     ee2:	80 17       	cp	r24, r16
     ee4:	91 07       	cpc	r25, r17
     ee6:	21 f0       	breq	.+8      	; 0xef0 <e_meassure+0x60>
				{
					st.tempCur = temp;
     ee8:	10 93 a3 01 	sts	0x01A3, r17	; 0x8001a3 <st+0x5>
     eec:	00 93 a2 01 	sts	0x01A2, r16	; 0x8001a2 <st+0x4>
					//COM_setNotify(NOTIFY_TEMP);
				}
				if (temp > st.tempMax)
     ef0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <st+0x6>
     ef4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <st+0x7>
     ef8:	80 17       	cp	r24, r16
     efa:	91 07       	cpc	r25, r17
     efc:	20 f4       	brcc	.+8      	; 0xf06 <e_meassure+0x76>
				{
					st.tempMax = temp;
     efe:	10 93 a5 01 	sts	0x01A5, r17	; 0x8001a5 <st+0x7>
     f02:	00 93 a4 01 	sts	0x01A4, r16	; 0x8001a4 <st+0x6>
					//COM_setNotify(NOTIFY_TEMP);
				}
				if (temp < st.tempMin)
     f06:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <st+0x2>
     f0a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <st+0x3>
     f0e:	08 17       	cp	r16, r24
     f10:	19 07       	cpc	r17, r25
     f12:	f0 f4       	brcc	.+60     	; 0xf50 <e_meassure+0xc0>
				{
					st.tempMin = temp;
     f14:	10 93 a1 01 	sts	0x01A1, r17	; 0x8001a1 <st+0x3>
     f18:	00 93 a0 01 	sts	0x01A0, r16	; 0x8001a0 <st+0x2>
					//COM_setNotify(NOTIFY_TEMP);
				}
				break;
     f1c:	19 c0       	rjmp	.+50     	; 0xf50 <e_meassure+0xc0>
			}
			case 2:
			{
				ADC_Measure_Temp();
     f1e:	0e 94 92 00 	call	0x124	; 0x124 <ADC_Measure_Temp>
				uint16_t volt = ADC_Get_Bat_Voltage();	// Get voltage to make shure it is converted already
     f22:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <ADC_Get_Bat_Voltage>
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
				if (st.volt != volt)
     f2a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <st>
     f2e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <st+0x1>
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	28 17       	cp	r18, r24
     f38:	39 07       	cpc	r19, r25
     f3a:	61 f0       	breq	.+24     	; 0xf54 <e_meassure+0xc4>
				{
					st.volt = volt;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <st+0x1>
     f44:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <st>
					//COM_setNotify(NOTIFY_BATT);

				}
				break;
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <e_meassure+0xc4>
			}
			default:
			{
				state = 0;
     f4a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <state.2159>
				break;
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <e_meassure+0xc6>
				if (temp < st.tempMin)
				{
					st.tempMin = temp;
					//COM_setNotify(NOTIFY_TEMP);
				}
				break;
     f50:	00 00       	nop
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <e_meassure+0xc6>
				{
					st.volt = volt;
					//COM_setNotify(NOTIFY_BATT);

				}
				break;
     f54:	00 00       	nop
				state = 0;
				break;
			}
		};
	}
}
     f56:	00 00       	nop
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <e_Init>:

void e_Init(void)
{
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	e_resetTemp();
     f6e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <e_resetTemp>
}
     f72:	00 00       	nop
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <e_resetTemp>:

void e_resetTemp(void)
{
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	register uint16_t temp = ADC_Get_Temp_Degree();
     f86:	0e 94 b3 00 	call	0x166	; 0x166 <ADC_Get_Temp_Degree>
     f8a:	8c 01       	movw	r16, r24
	st.tempCur = temp;
     f8c:	10 93 a3 01 	sts	0x01A3, r17	; 0x8001a3 <st+0x5>
     f90:	00 93 a2 01 	sts	0x01A2, r16	; 0x8001a2 <st+0x4>
	st.tempMax = temp;
     f94:	10 93 a5 01 	sts	0x01A5, r17	; 0x8001a5 <st+0x7>
     f98:	00 93 a4 01 	sts	0x01A4, r16	; 0x8001a4 <st+0x6>
	st.tempMin = temp;
     f9c:	10 93 a1 01 	sts	0x01A1, r17	; 0x8001a1 <st+0x3>
     fa0:	00 93 a0 01 	sts	0x01A0, r16	; 0x8001a0 <st+0x2>
}
     fa4:	00 00       	nop
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	08 95       	ret

00000fb0 <LCD_Init>:
    LCD_SetSeg(LCD_SEG_PROG, LCD_MODE_OFF);
    LCD_SetSeg(LCD_SEG_SUN, LCD_MODE_OFF);
    LCD_SetSeg(LCD_SEG_MOON, LCD_MODE_OFF);
    LCD_SetSeg(LCD_SEG_SNOW, LCD_MODE_OFF);
    LCD_UpdateRequired = true;
}
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 32 08 	call	0x1064	; 0x1064 <LCD_AllSegments>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_ContrastAdjust>
     fc4:	85 ee       	ldi	r24, 0xE5	; 229
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	25 ea       	ldi	r18, 0xA5	; 165
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
     fce:	86 ee       	ldi	r24, 0xE6	; 230
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	26 e0       	ldi	r18, 0x06	; 6
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
     fd8:	84 ee       	ldi	r24, 0xE4	; 228
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	20 ec       	ldi	r18, 0xC0	; 192
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18
     fe2:	84 ee       	ldi	r24, 0xE4	; 228
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	24 ee       	ldi	r18, 0xE4	; 228
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	f9 01       	movw	r30, r18
     fec:	20 81       	ld	r18, Z
     fee:	28 60       	ori	r18, 0x08	; 8
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
     ff4:	00 00       	nop
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <LCD_ContrastAdjust>:
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	00 d0       	rcall	.+0      	; 0x1002 <LCD_ContrastAdjust+0x6>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	8a 83       	std	Y+2, r24	; 0x02
    1008:	87 ee       	ldi	r24, 0xE7	; 231
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	fc 01       	movw	r30, r24
    100e:	80 81       	ld	r24, Z
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	88 23       	and	r24, r24
    1018:	11 f4       	brne	.+4      	; 0x101e <LCD_ContrastAdjust+0x22>
    101a:	8e e0       	ldi	r24, 0x0E	; 14
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	49 f4       	brne	.+18     	; 0x1036 <LCD_ContrastAdjust+0x3a>
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	8f 30       	cpi	r24, 0x0F	; 15
    1028:	20 f4       	brcc	.+8      	; 0x1032 <LCD_ContrastAdjust+0x36>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <LCD_ContrastAdjust+0x3a>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	12 c0       	rjmp	.+36     	; 0x105a <LCD_ContrastAdjust+0x5e>
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	8f 3f       	cpi	r24, 0xFF	; 255
    103a:	49 f4       	brne	.+18     	; 0x104e <LCD_ContrastAdjust+0x52>
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 23       	and	r24, r24
    1040:	21 f0       	breq	.+8      	; 0x104a <LCD_ContrastAdjust+0x4e>
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	81 50       	subi	r24, 0x01	; 1
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	02 c0       	rjmp	.+4      	; 0x104e <LCD_ContrastAdjust+0x52>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	06 c0       	rjmp	.+12     	; 0x105a <LCD_ContrastAdjust+0x5e>
    104e:	87 ee       	ldi	r24, 0xE7	; 231
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	29 81       	ldd	r18, Y+1	; 0x01
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <LCD_AllSegments>:
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	00 d0       	rcall	.+0      	; 0x106a <LCD_AllSegments+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <LCD_AllSegments+0x8>
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	8c 83       	std	Y+4, r24	; 0x04
    1072:	19 82       	std	Y+1, r1	; 0x01
    1074:	34 c0       	rjmp	.+104    	; 0x10de <LCD_AllSegments+0x7a>
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	29 81       	ldd	r18, Y+1	; 0x01
    107e:	22 2f       	mov	r18, r18
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <LCD_AllSegments+0x24>
    1084:	95 95       	asr	r25
    1086:	87 95       	ror	r24
    1088:	2a 95       	dec	r18
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <LCD_AllSegments+0x20>
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	99 27       	eor	r25, r25
    1090:	89 2b       	or	r24, r25
    1092:	19 f0       	breq	.+6      	; 0x109a <LCD_AllSegments+0x36>
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	8b 83       	std	Y+3, r24	; 0x03
    1098:	01 c0       	rjmp	.+2      	; 0x109c <LCD_AllSegments+0x38>
    109a:	1b 82       	std	Y+3, r1	; 0x03
    109c:	1a 82       	std	Y+2, r1	; 0x02
    109e:	19 c0       	rjmp	.+50     	; 0x10d2 <LCD_AllSegments+0x6e>
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	48 2f       	mov	r20, r24
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	c9 01       	movw	r24, r18
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	82 0f       	add	r24, r18
    10bc:	93 1f       	adc	r25, r19
    10be:	84 0f       	add	r24, r20
    10c0:	95 1f       	adc	r25, r21
    10c2:	87 55       	subi	r24, 0x57	; 87
    10c4:	9e 4f       	sbci	r25, 0xFE	; 254
    10c6:	2b 81       	ldd	r18, Y+3	; 0x03
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	8f 5f       	subi	r24, 0xFF	; 255
    10d0:	8a 83       	std	Y+2, r24	; 0x02
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	89 30       	cpi	r24, 0x09	; 9
    10d6:	20 f3       	brcs	.-56     	; 0x10a0 <LCD_AllSegments+0x3c>
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	48 f2       	brcs	.-110    	; 0x1076 <LCD_AllSegments+0x12>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <LCD_UpdateRequired>
    10ea:	00 00       	nop
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <LCD_PrintChar>:
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	61 97       	sbiw	r28, 0x11	; 17
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	8f 87       	std	Y+15, r24	; 0x0f
    1110:	68 8b       	std	Y+16, r22	; 0x10
    1112:	49 8b       	std	Y+17, r20	; 0x11
    1114:	88 89       	ldd	r24, Y+16	; 0x10
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	08 f0       	brcs	.+2      	; 0x111c <LCD_PrintChar+0x22>
    111a:	4b c0       	rjmp	.+150    	; 0x11b2 <LCD_PrintChar+0xb8>
    111c:	8f 85       	ldd	r24, Y+15	; 0x0f
    111e:	85 32       	cpi	r24, 0x25	; 37
    1120:	08 f0       	brcs	.+2      	; 0x1124 <LCD_PrintChar+0x2a>
    1122:	47 c0       	rjmp	.+142    	; 0x11b2 <LCD_PrintChar+0xb8>
    1124:	88 89       	ldd	r24, Y+16	; 0x10
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	80 58       	subi	r24, 0x80	; 128
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	fc 01       	movw	r30, r24
    1138:	84 91       	lpm	r24, Z
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	8e 83       	std	Y+6, r24	; 0x06
    1140:	8f 85       	ldd	r24, Y+15	; 0x0f
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	84 5a       	subi	r24, 0xA4	; 164
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	98 87       	std	Y+8, r25	; 0x08
    114c:	8f 83       	std	Y+7, r24	; 0x07
    114e:	8f 81       	ldd	r24, Y+7	; 0x07
    1150:	98 85       	ldd	r25, Y+8	; 0x08
    1152:	fc 01       	movw	r30, r24
    1154:	84 91       	lpm	r24, Z
    1156:	89 87       	std	Y+9, r24	; 0x09
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	8a 87       	std	Y+10, r24	; 0x0a
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	24 c0       	rjmp	.+72     	; 0x11ac <LCD_PrintChar+0xb2>
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	8c 57       	subi	r24, 0x7C	; 124
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	9c 87       	std	Y+12, r25	; 0x0c
    1170:	8b 87       	std	Y+11, r24	; 0x0b
    1172:	8b 85       	ldd	r24, Y+11	; 0x0b
    1174:	9c 85       	ldd	r25, Y+12	; 0x0c
    1176:	fc 01       	movw	r30, r24
    1178:	84 91       	lpm	r24, Z
    117a:	8d 87       	std	Y+13, r24	; 0x0d
    117c:	9d 85       	ldd	r25, Y+13	; 0x0d
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	89 0f       	add	r24, r25
    1182:	8e 87       	std	Y+14, r24	; 0x0e
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	89 23       	and	r24, r25
    118a:	88 23       	and	r24, r24
    118c:	29 f0       	breq	.+10     	; 0x1198 <LCD_PrintChar+0x9e>
    118e:	69 89       	ldd	r22, Y+17	; 0x11
    1190:	8e 85       	ldd	r24, Y+14	; 0x0e
    1192:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <LCD_PrintChar+0xa6>
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	8e 85       	ldd	r24, Y+14	; 0x0e
    119c:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	88 0f       	add	r24, r24
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	87 30       	cpi	r24, 0x07	; 7
    11b0:	c8 f2       	brcs	.-78     	; 0x1164 <LCD_PrintChar+0x6a>
    11b2:	00 00       	nop
    11b4:	61 96       	adiw	r28, 0x11	; 17
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <LCD_PrintHex>:
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <LCD_PrintHex+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <LCD_PrintHex+0x8>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	6b 83       	std	Y+3, r22	; 0x03
    11d6:	4c 83       	std	Y+4, r20	; 0x04
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	b8 f4       	brcc	.+46     	; 0x120c <LCD_PrintHex+0x46>
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 0f       	add	r24, r24
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	8f 70       	andi	r24, 0x0F	; 15
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	4c 81       	ldd	r20, Y+4	; 0x04
    11ec:	6b 81       	ldd	r22, Y+3	; 0x03
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	82 95       	swap	r24
    11fe:	8f 70       	andi	r24, 0x0F	; 15
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	4c 81       	ldd	r20, Y+4	; 0x04
    1204:	6b 81       	ldd	r22, Y+3	; 0x03
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    120c:	00 00       	nop
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <LCD_PrintDec>:
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	00 d0       	rcall	.+0      	; 0x1222 <LCD_PrintDec+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <LCD_PrintDec+0x8>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	6b 83       	std	Y+3, r22	; 0x03
    122c:	4c 83       	std	Y+4, r20	; 0x04
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	68 f5       	brcc	.+90     	; 0x128e <LCD_PrintDec+0x72>
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	84 36       	cpi	r24, 0x64	; 100
    1238:	50 f5       	brcc	.+84     	; 0x128e <LCD_PrintDec+0x72>
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 0f       	add	r24, r24
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	8d ec       	ldi	r24, 0xCD	; 205
    1244:	98 9f       	mul	r25, r24
    1246:	81 2d       	mov	r24, r1
    1248:	11 24       	eor	r1, r1
    124a:	86 95       	lsr	r24
    124c:	86 95       	lsr	r24
    124e:	86 95       	lsr	r24
    1250:	88 0f       	add	r24, r24
    1252:	28 2f       	mov	r18, r24
    1254:	22 0f       	add	r18, r18
    1256:	22 0f       	add	r18, r18
    1258:	82 0f       	add	r24, r18
    125a:	29 2f       	mov	r18, r25
    125c:	28 1b       	sub	r18, r24
    125e:	82 2f       	mov	r24, r18
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	4c 81       	ldd	r20, Y+4	; 0x04
    1264:	6b 81       	ldd	r22, Y+3	; 0x03
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	8d ec       	ldi	r24, 0xCD	; 205
    1276:	98 9f       	mul	r25, r24
    1278:	81 2d       	mov	r24, r1
    127a:	11 24       	eor	r1, r1
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	86 95       	lsr	r24
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	4c 81       	ldd	r20, Y+4	; 0x04
    1286:	6b 81       	ldd	r22, Y+3	; 0x03
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    128e:	00 00       	nop
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <LCD_PrintDecW>:
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <LCD_PrintDecW+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <LCD_PrintDecW+0x8>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9b 83       	std	Y+3, r25	; 0x03
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	6c 83       	std	Y+4, r22	; 0x04
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	80 31       	cpi	r24, 0x10	; 16
    12b6:	97 42       	sbci	r25, 0x27	; 39
    12b8:	20 f0       	brcs	.+8      	; 0x12c2 <LCD_PrintDecW+0x24>
    12ba:	8f e0       	ldi	r24, 0x0F	; 15
    12bc:	97 e2       	ldi	r25, 0x27	; 39
    12be:	9b 83       	std	Y+3, r25	; 0x03
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	96 95       	lsr	r25
    12c8:	87 95       	ror	r24
    12ca:	96 95       	lsr	r25
    12cc:	87 95       	ror	r24
    12ce:	9c 01       	movw	r18, r24
    12d0:	ab e7       	ldi	r26, 0x7B	; 123
    12d2:	b4 e1       	ldi	r27, 0x14	; 20
    12d4:	0e 94 ef 18 	call	0x31de	; 0x31de <__umulhisi3>
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	43 e0       	ldi	r20, 0x03	; 3
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_PrintDec>
    12e8:	4a 81       	ldd	r20, Y+2	; 0x02
    12ea:	5b 81       	ldd	r21, Y+3	; 0x03
    12ec:	ca 01       	movw	r24, r20
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	9c 01       	movw	r18, r24
    12f8:	ab e7       	ldi	r26, 0x7B	; 123
    12fa:	b4 e1       	ldi	r27, 0x14	; 20
    12fc:	0e 94 ef 18 	call	0x31de	; 0x31de <__umulhisi3>
    1300:	96 95       	lsr	r25
    1302:	87 95       	ror	r24
    1304:	64 e6       	ldi	r22, 0x64	; 100
    1306:	68 9f       	mul	r22, r24
    1308:	90 01       	movw	r18, r0
    130a:	69 9f       	mul	r22, r25
    130c:	30 0d       	add	r19, r0
    130e:	11 24       	eor	r1, r1
    1310:	ca 01       	movw	r24, r20
    1312:	82 1b       	sub	r24, r18
    1314:	93 0b       	sbc	r25, r19
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	43 e0       	ldi	r20, 0x03	; 3
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_PrintDec>
    1322:	00 00       	nop
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <LCD_PrintHexW>:
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	00 d0       	rcall	.+0      	; 0x1338 <LCD_PrintHexW+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <LCD_PrintHexW+0x8>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	9b 83       	std	Y+3, r25	; 0x03
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	6c 83       	std	Y+4, r22	; 0x04
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	9b 81       	ldd	r25, Y+3	; 0x03
    1348:	89 2f       	mov	r24, r25
    134a:	99 27       	eor	r25, r25
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	43 e0       	ldi	r20, 0x03	; 3
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_PrintHex>
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	43 e0       	ldi	r20, 0x03	; 3
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_PrintHex>
    1366:	00 00       	nop
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <LCD_PrintTemp>:
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	00 d0       	rcall	.+0      	; 0x137c <LCD_PrintTemp+0x6>
    137c:	1f 92       	push	r1
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	6b 83       	std	Y+3, r22	; 0x03
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	83 e2       	ldi	r24, 0x23	; 35
    138a:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	88 23       	and	r24, r24
    1392:	c9 f4       	brne	.+50     	; 0x13c6 <LCD_PrintTemp+0x50>
    1394:	4b 81       	ldd	r20, Y+3	; 0x03
    1396:	63 e0       	ldi	r22, 0x03	; 3
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    139e:	4b 81       	ldd	r20, Y+3	; 0x03
    13a0:	62 e0       	ldi	r22, 0x02	; 2
    13a2:	8f e0       	ldi	r24, 0x0F	; 15
    13a4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    13a8:	4b 81       	ldd	r20, Y+3	; 0x03
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	8f e0       	ldi	r24, 0x0F	; 15
    13ae:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    13b2:	4b 81       	ldd	r20, Y+3	; 0x03
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	80 e2       	ldi	r24, 0x20	; 32
    13b8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	8b e3       	ldi	r24, 0x3B	; 59
    13c0:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    13c4:	6f c0       	rjmp	.+222    	; 0x14a4 <LCD_PrintTemp+0x12e>
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	84 33       	cpi	r24, 0x34	; 52
    13ca:	c9 f4       	brne	.+50     	; 0x13fe <LCD_PrintTemp+0x88>
    13cc:	4b 81       	ldd	r20, Y+3	; 0x03
    13ce:	63 e0       	ldi	r22, 0x03	; 3
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    13d6:	4b 81       	ldd	r20, Y+3	; 0x03
    13d8:	62 e0       	ldi	r22, 0x02	; 2
    13da:	81 e1       	ldi	r24, 0x11	; 17
    13dc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    13e0:	4b 81       	ldd	r20, Y+3	; 0x03
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	80 e2       	ldi	r24, 0x20	; 32
    13e6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    13ea:	4b 81       	ldd	r20, Y+3	; 0x03
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	80 e2       	ldi	r24, 0x20	; 32
    13f0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	8b e3       	ldi	r24, 0x3B	; 59
    13f8:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    13fc:	53 c0       	rjmp	.+166    	; 0x14a4 <LCD_PrintTemp+0x12e>
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	85 33       	cpi	r24, 0x35	; 53
    1402:	c8 f0       	brcs	.+50     	; 0x1436 <LCD_PrintTemp+0xc0>
    1404:	4b 81       	ldd	r20, Y+3	; 0x03
    1406:	63 e0       	ldi	r22, 0x03	; 3
    1408:	80 e2       	ldi	r24, 0x20	; 32
    140a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    140e:	4b 81       	ldd	r20, Y+3	; 0x03
    1410:	62 e0       	ldi	r22, 0x02	; 2
    1412:	8e e0       	ldi	r24, 0x0E	; 14
    1414:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    1418:	4b 81       	ldd	r20, Y+3	; 0x03
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	8c e1       	ldi	r24, 0x1C	; 28
    141e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    1422:	4b 81       	ldd	r20, Y+3	; 0x03
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	8c e1       	ldi	r24, 0x1C	; 28
    1428:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	8b e3       	ldi	r24, 0x3B	; 59
    1430:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    1434:	37 c0       	rjmp	.+110    	; 0x14a4 <LCD_PrintTemp+0x12e>
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	99 23       	and	r25, r25
    1440:	0c f4       	brge	.+2      	; 0x1444 <LCD_PrintTemp+0xce>
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	95 95       	asr	r25
    1446:	87 95       	ror	r24
    1448:	8b 5f       	subi	r24, 0xFB	; 251
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	8a 30       	cpi	r24, 0x0A	; 10
    1450:	58 f4       	brcc	.+22     	; 0x1468 <LCD_PrintTemp+0xf2>
    1452:	4b 81       	ldd	r20, Y+3	; 0x03
    1454:	63 e0       	ldi	r22, 0x03	; 3
    1456:	80 e2       	ldi	r24, 0x20	; 32
    1458:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    145c:	4b 81       	ldd	r20, Y+3	; 0x03
    145e:	62 e0       	ldi	r22, 0x02	; 2
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <LCD_PrintTemp+0xfc>
    1468:	4b 81       	ldd	r20, Y+3	; 0x03
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_PrintDec>
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	99 27       	eor	r25, r25
    147c:	89 2b       	or	r24, r25
    147e:	11 f4       	brne	.+4      	; 0x1484 <LCD_PrintTemp+0x10e>
    1480:	85 e0       	ldi	r24, 0x05	; 5
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <LCD_PrintTemp+0x110>
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	4b 81       	ldd	r20, Y+3	; 0x03
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    1492:	4b 81       	ldd	r20, Y+3	; 0x03
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	8c e0       	ldi	r24, 0x0C	; 12
    1498:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    149c:	6b 81       	ldd	r22, Y+3	; 0x03
    149e:	8b e3       	ldi	r24, 0x3B	; 59
    14a0:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    14a4:	00 00       	nop
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <LCD_PrintTempInt>:
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	27 97       	sbiw	r28, 0x07	; 7
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	6f 83       	std	Y+7, r22	; 0x07
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	83 e2       	ldi	r24, 0x23	; 35
    14d0:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	89 31       	cpi	r24, 0x19	; 25
    14da:	9c 4f       	sbci	r25, 0xFC	; 252
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <LCD_PrintTempInt+0x36>
    14de:	89 e1       	ldi	r24, 0x19	; 25
    14e0:	9c ef       	ldi	r25, 0xFC	; 252
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	09 c0       	rjmp	.+18     	; 0x14fa <LCD_PrintTempInt+0x48>
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	80 31       	cpi	r24, 0x10	; 16
    14ee:	97 42       	sbci	r25, 0x27	; 39
    14f0:	24 f0       	brlt	.+8      	; 0x14fa <LCD_PrintTempInt+0x48>
    14f2:	8f e0       	ldi	r24, 0x0F	; 15
    14f4:	97 e2       	ldi	r25, 0x27	; 39
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	8e 81       	ldd	r24, Y+6	; 0x06
    14fc:	88 1f       	adc	r24, r24
    14fe:	88 27       	eor	r24, r24
    1500:	88 1f       	adc	r24, r24
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	88 23       	and	r24, r24
    1508:	39 f0       	breq	.+14     	; 0x1518 <LCD_PrintTempInt+0x66>
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	91 95       	neg	r25
    1510:	81 95       	neg	r24
    1512:	91 09       	sbc	r25, r1
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	2a e0       	ldi	r18, 0x0A	; 10
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	b9 01       	movw	r22, r18
    1522:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    1526:	cb 01       	movw	r24, r22
    1528:	9b 83       	std	Y+3, r25	; 0x03
    152a:	8a 83       	std	Y+2, r24	; 0x02
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	2a e0       	ldi	r18, 0x0A	; 10
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	b9 01       	movw	r22, r18
    1536:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    153a:	8c 83       	std	Y+4, r24	; 0x04
    153c:	4f 81       	ldd	r20, Y+7	; 0x07
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	2a e0       	ldi	r18, 0x0A	; 10
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	b9 01       	movw	r22, r18
    1550:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    1554:	cb 01       	movw	r24, r22
    1556:	9b 83       	std	Y+3, r25	; 0x03
    1558:	8a 83       	std	Y+2, r24	; 0x02
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	2a e0       	ldi	r18, 0x0A	; 10
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	b9 01       	movw	r22, r18
    1564:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    1568:	8c 83       	std	Y+4, r24	; 0x04
    156a:	4f 81       	ldd	r20, Y+7	; 0x07
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	88 23       	and	r24, r24
    1578:	31 f0       	breq	.+12     	; 0x1586 <LCD_PrintTempInt+0xd4>
    157a:	4f 81       	ldd	r20, Y+7	; 0x07
    157c:	63 e0       	ldi	r22, 0x03	; 3
    157e:	86 e1       	ldi	r24, 0x16	; 22
    1580:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    1584:	22 c0       	rjmp	.+68     	; 0x15ca <LCD_PrintTempInt+0x118>
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	88 3e       	cpi	r24, 0xE8	; 232
    158c:	93 40       	sbci	r25, 0x03	; 3
    158e:	34 f4       	brge	.+12     	; 0x159c <LCD_PrintTempInt+0xea>
    1590:	4f 81       	ldd	r20, Y+7	; 0x07
    1592:	63 e0       	ldi	r22, 0x03	; 3
    1594:	80 e2       	ldi	r24, 0x20	; 32
    1596:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    159a:	17 c0       	rjmp	.+46     	; 0x15ca <LCD_PrintTempInt+0x118>
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	9b 81       	ldd	r25, Y+3	; 0x03
    15a0:	2a e0       	ldi	r18, 0x0A	; 10
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	b9 01       	movw	r22, r18
    15a6:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    15aa:	cb 01       	movw	r24, r22
    15ac:	9b 83       	std	Y+3, r25	; 0x03
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	9b 81       	ldd	r25, Y+3	; 0x03
    15b4:	2a e0       	ldi	r18, 0x0A	; 10
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	b9 01       	movw	r22, r18
    15ba:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    15be:	8c 83       	std	Y+4, r24	; 0x04
    15c0:	4f 81       	ldd	r20, Y+7	; 0x07
    15c2:	63 e0       	ldi	r22, 0x03	; 3
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    15ca:	4f 81       	ldd	r20, Y+7	; 0x07
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	8c e0       	ldi	r24, 0x0C	; 12
    15d0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    15d4:	6f 81       	ldd	r22, Y+7	; 0x07
    15d6:	8b e3       	ldi	r24, 0x3B	; 59
    15d8:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    15dc:	00 00       	nop
    15de:	27 96       	adiw	r28, 0x07	; 7
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <LCD_SetHourBarSeg>:
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <LCD_SetHourBarSeg+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <LCD_SetHourBarSeg+0x8>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <LCD_SetHourBarSeg+0xa>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8d 83       	std	Y+5, r24	; 0x05
    1600:	6e 83       	std	Y+6, r22	; 0x06
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	85 57       	subi	r24, 0x75	; 117
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	fc 01       	movw	r30, r24
    1616:	84 91       	lpm	r24, Z
    1618:	8b 83       	std	Y+3, r24	; 0x03
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	8c 83       	std	Y+4, r24	; 0x04
    161e:	6e 81       	ldd	r22, Y+6	; 0x06
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    1626:	00 00       	nop
    1628:	26 96       	adiw	r28, 0x06	; 6
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	08 95       	ret

0000163a <LCD_SetHourBarVal>:
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	00 d0       	rcall	.+0      	; 0x1640 <LCD_SetHourBarVal+0x6>
    1640:	1f 92       	push	r1
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	6b 83       	std	Y+3, r22	; 0x03
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	88 31       	cpi	r24, 0x18	; 24
    164e:	10 f0       	brcs	.+4      	; 0x1654 <LCD_SetHourBarVal+0x1a>
    1650:	87 e1       	ldi	r24, 0x17	; 23
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	19 82       	std	Y+1, r1	; 0x01
    1656:	10 c0       	rjmp	.+32     	; 0x1678 <LCD_SetHourBarVal+0x3e>
    1658:	99 81       	ldd	r25, Y+1	; 0x01
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	98 17       	cp	r25, r24
    165e:	29 f4       	brne	.+10     	; 0x166a <LCD_SetHourBarVal+0x30>
    1660:	6b 81       	ldd	r22, Y+3	; 0x03
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <LCD_SetHourBarSeg>
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <LCD_SetHourBarVal+0x38>
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <LCD_SetHourBarSeg>
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	88 31       	cpi	r24, 0x18	; 24
    167c:	68 f3       	brcs	.-38     	; 0x1658 <LCD_SetHourBarVal+0x1e>
    167e:	00 00       	nop
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <LCD_ClearNumbers>:
 *  Clear all 7 segment fields
 *
 *  \note  Sets the four 7 Segment and the Columns to \ref LCD_MODE_OFF
 ******************************************************************************/
void LCD_ClearNumbers(void)
{
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    LCD_PrintChar(LCD_CHAR_NULL, 3, LCD_MODE_OFF);
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	63 e0       	ldi	r22, 0x03	; 3
    1698:	80 e2       	ldi	r24, 0x20	; 32
    169a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    LCD_PrintChar(LCD_CHAR_NULL, 2, LCD_MODE_OFF);
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	62 e0       	ldi	r22, 0x02	; 2
    16a2:	80 e2       	ldi	r24, 0x20	; 32
    16a4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    LCD_PrintChar(LCD_CHAR_NULL, 1, LCD_MODE_OFF);
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	80 e2       	ldi	r24, 0x20	; 32
    16ae:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    LCD_PrintChar(LCD_CHAR_NULL, 0, LCD_MODE_OFF);
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	80 e2       	ldi	r24, 0x20	; 32
    16b8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
    LCD_SetSeg(LCD_SEG_COL1, LCD_MODE_OFF);
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	8b e3       	ldi	r24, 0x3B	; 59
    16c0:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    LCD_SetSeg(LCD_SEG_COL2, LCD_MODE_OFF);
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	83 e2       	ldi	r24, 0x23	; 35
    16c8:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    LCD_UpdateRequired = true;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <LCD_UpdateRequired>
}
    16d2:	00 00       	nop
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <LCD_SetSeg>:
 *
 *  \param seg No of the segment to be set see \ref LCD_SEG_B0 ...
 *  \param mode  \ref LCD_MODE_ON, \ref LCD_MODE_OFF, \ref LCD_MODE_BLINK_1
 ******************************************************************************/
void LCD_SetSeg(uint8_t seg, uint8_t mode)
{
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <LCD_SetSeg+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <LCD_SetSeg+0x8>
    16e2:	1f 92       	push	r1
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	8c 83       	std	Y+4, r24	; 0x04
    16ea:	6d 83       	std	Y+5, r22	; 0x05
    uint8_t r;
    uint8_t b;
    uint8_t bp;

    // Register = segment DIV 8
    r = seg / 8;
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	86 95       	lsr	r24
    16f0:	86 95       	lsr	r24
    16f2:	86 95       	lsr	r24
    16f4:	8a 83       	std	Y+2, r24	; 0x02
    // Bitposition = segment mod 8
    b = seg % 8;
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	87 70       	andi	r24, 0x07	; 7
    16fa:	8b 83       	std	Y+3, r24	; 0x03

    // Set bits in each bitplane
    for (bp=0; bp<LCD_BITPLANES;  bp++){
    16fc:	19 82       	std	Y+1, r1	; 0x01
    16fe:	82 c0       	rjmp	.+260    	; 0x1804 <LCD_SetSeg+0x12a>
        if (mode & (1<<bp)){
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	29 81       	ldd	r18, Y+1	; 0x01
    1708:	22 2f       	mov	r18, r18
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <LCD_SetSeg+0x38>
    170e:	95 95       	asr	r25
    1710:	87 95       	ror	r24
    1712:	2a 95       	dec	r18
    1714:	e2 f7       	brpl	.-8      	; 0x170e <LCD_SetSeg+0x34>
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	99 27       	eor	r25, r25
    171a:	89 2b       	or	r24, r25
    171c:	c1 f1       	breq	.+112    	; 0x178e <LCD_SetSeg+0xb4>
            // Set Bit in Bitplane if ON (0b11) or Blinkmode 1 (0b01)
            LCD_Data[bp][r] |= (1<<b);
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	68 2f       	mov	r22, r24
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	48 2f       	mov	r20, r24
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	e8 2f       	mov	r30, r24
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	ca 01       	movw	r24, r20
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	84 0f       	add	r24, r20
    1746:	95 1f       	adc	r25, r21
    1748:	8e 0f       	add	r24, r30
    174a:	9f 1f       	adc	r25, r31
    174c:	87 55       	subi	r24, 0x57	; 87
    174e:	9e 4f       	sbci	r25, 0xFE	; 254
    1750:	fc 01       	movw	r30, r24
    1752:	80 81       	ld	r24, Z
    1754:	e8 2f       	mov	r30, r24
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	48 2f       	mov	r20, r24
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <LCD_SetSeg+0x8c>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	4a 95       	dec	r20
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <LCD_SetSeg+0x88>
    176a:	8e 2b       	or	r24, r30
    176c:	48 2f       	mov	r20, r24
    176e:	c9 01       	movw	r24, r18
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	82 0f       	add	r24, r18
    177e:	93 1f       	adc	r25, r19
    1780:	86 0f       	add	r24, r22
    1782:	97 1f       	adc	r25, r23
    1784:	87 55       	subi	r24, 0x57	; 87
    1786:	9e 4f       	sbci	r25, 0xFE	; 254
    1788:	fc 01       	movw	r30, r24
    178a:	40 83       	st	Z, r20
    178c:	38 c0       	rjmp	.+112    	; 0x17fe <LCD_SetSeg+0x124>
        } else {
            // Clear Bit in Bitplane if OFF (0b00) or Blinkmode 2 (0b10)
            LCD_Data[bp][r] &= ~(1<<b);
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	68 2f       	mov	r22, r24
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	48 2f       	mov	r20, r24
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	e8 2f       	mov	r30, r24
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	ca 01       	movw	r24, r20
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	84 0f       	add	r24, r20
    17b6:	95 1f       	adc	r25, r21
    17b8:	8e 0f       	add	r24, r30
    17ba:	9f 1f       	adc	r25, r31
    17bc:	87 55       	subi	r24, 0x57	; 87
    17be:	9e 4f       	sbci	r25, 0xFE	; 254
    17c0:	fc 01       	movw	r30, r24
    17c2:	80 81       	ld	r24, Z
    17c4:	e8 2f       	mov	r30, r24
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	48 2f       	mov	r20, r24
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <LCD_SetSeg+0xfc>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	4a 95       	dec	r20
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <LCD_SetSeg+0xf8>
    17da:	80 95       	com	r24
    17dc:	8e 23       	and	r24, r30
    17de:	48 2f       	mov	r20, r24
    17e0:	c9 01       	movw	r24, r18
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	82 0f       	add	r24, r18
    17f0:	93 1f       	adc	r25, r19
    17f2:	86 0f       	add	r24, r22
    17f4:	97 1f       	adc	r25, r23
    17f6:	87 55       	subi	r24, 0x57	; 87
    17f8:	9e 4f       	sbci	r25, 0xFE	; 254
    17fa:	fc 01       	movw	r30, r24
    17fc:	40 83       	st	Z, r20
    r = seg / 8;
    // Bitposition = segment mod 8
    b = seg % 8;

    // Set bits in each bitplane
    for (bp=0; bp<LCD_BITPLANES;  bp++){
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	08 f4       	brcc	.+2      	; 0x180c <LCD_SetSeg+0x132>
    180a:	7a cf       	rjmp	.-268    	; 0x1700 <LCD_SetSeg+0x26>
        } else {
            // Clear Bit in Bitplane if OFF (0b00) or Blinkmode 2 (0b10)
            LCD_Data[bp][r] &= ~(1<<b);
        }
    }
}
    180c:	00 00       	nop
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret

0000181e <LCD_Update>:
 *
 *  \note  Must be called after usage of \ref LCD_SetSeg and \ref LCD_PrintChar
 *         to trigger update of LCDDR Registers
 ******************************************************************************/
void LCD_Update(void)
{
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    // Update at next LCD_ISR
    LCD_UpdateRequired = true;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <LCD_UpdateRequired>
}
    182c:	00 00       	nop
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret

00001834 <__vector_22>:
 *  \note copy LCD_Data to LCDREG
 *
 *  \note cycle bitplanes every LCD_BLINK_FRAMES
 ******************************************************************************/
ISR(LCD_vect)
{
    1834:	1f 92       	push	r1
    1836:	0f 92       	push	r0
    1838:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	2f 93       	push	r18
    1842:	3f 93       	push	r19
    1844:	4f 93       	push	r20
    1846:	5f 93       	push	r21
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	ef 93       	push	r30
    184e:	ff 93       	push	r31
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    // Bitplane 0 active
    if (LCD_BlinkCounter == 0) {
    1858:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <LCD_BlinkCounter>
    185c:	88 23       	and	r24, r24
    185e:	29 f4       	brne	.+10     	; 0x186a <__vector_22+0x36>
        LCD_Bitplane = 0;
    1860:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <LCD_Bitplane>
        LCD_UpdateRequired = true;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <LCD_UpdateRequired>
    }
    // Bitplane 1 active
    if (LCD_BlinkCounter == LCD_BLINK_FRAMES) {
    186a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <LCD_BlinkCounter>
    186e:	88 31       	cpi	r24, 0x18	; 24
    1870:	31 f4       	brne	.+12     	; 0x187e <__vector_22+0x4a>
        LCD_Bitplane = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <LCD_Bitplane>
        LCD_UpdateRequired = true;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <LCD_UpdateRequired>
    }
    if (LCD_UpdateRequired){
    187e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <LCD_UpdateRequired>
    1882:	88 23       	and	r24, r24
    1884:	09 f4       	brne	.+2      	; 0x1888 <__vector_22+0x54>
    1886:	bd c0       	rjmp	.+378    	; 0x1a02 <__vector_22+0x1ce>
        // Copy desired segment buffer to the real segments
        LCDDR0 = LCD_Data[LCD_Bitplane][0];
    1888:	4c ee       	ldi	r20, 0xEC	; 236
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	c9 01       	movw	r24, r18
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	82 0f       	add	r24, r18
    18a4:	93 1f       	adc	r25, r19
    18a6:	87 55       	subi	r24, 0x57	; 87
    18a8:	9e 4f       	sbci	r25, 0xFE	; 254
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	fa 01       	movw	r30, r20
    18b0:	80 83       	st	Z, r24
        LCDDR1 = LCD_Data[LCD_Bitplane][1];
    18b2:	4d ee       	ldi	r20, 0xED	; 237
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	c9 01       	movw	r24, r18
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	82 0f       	add	r24, r18
    18ce:	93 1f       	adc	r25, r19
    18d0:	86 55       	subi	r24, 0x56	; 86
    18d2:	9e 4f       	sbci	r25, 0xFE	; 254
    18d4:	fc 01       	movw	r30, r24
    18d6:	80 81       	ld	r24, Z
    18d8:	fa 01       	movw	r30, r20
    18da:	80 83       	st	Z, r24
        LCDDR2 = LCD_Data[LCD_Bitplane][2];
    18dc:	4e ee       	ldi	r20, 0xEE	; 238
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	c9 01       	movw	r24, r18
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	85 55       	subi	r24, 0x55	; 85
    18fc:	9e 4f       	sbci	r25, 0xFE	; 254
    18fe:	fc 01       	movw	r30, r24
    1900:	80 81       	ld	r24, Z
    1902:	fa 01       	movw	r30, r20
    1904:	80 83       	st	Z, r24
        LCDDR5 = LCD_Data[LCD_Bitplane][3];
    1906:	41 ef       	ldi	r20, 0xF1	; 241
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	c9 01       	movw	r24, r18
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	82 0f       	add	r24, r18
    1922:	93 1f       	adc	r25, r19
    1924:	84 55       	subi	r24, 0x54	; 84
    1926:	9e 4f       	sbci	r25, 0xFE	; 254
    1928:	fc 01       	movw	r30, r24
    192a:	80 81       	ld	r24, Z
    192c:	fa 01       	movw	r30, r20
    192e:	80 83       	st	Z, r24
        LCDDR6 = LCD_Data[LCD_Bitplane][4];
    1930:	42 ef       	ldi	r20, 0xF2	; 242
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	c9 01       	movw	r24, r18
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	82 0f       	add	r24, r18
    194c:	93 1f       	adc	r25, r19
    194e:	83 55       	subi	r24, 0x53	; 83
    1950:	9e 4f       	sbci	r25, 0xFE	; 254
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	fa 01       	movw	r30, r20
    1958:	80 83       	st	Z, r24
        LCDDR7 = LCD_Data[LCD_Bitplane][5];
    195a:	43 ef       	ldi	r20, 0xF3	; 243
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	c9 01       	movw	r24, r18
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	82 0f       	add	r24, r18
    1976:	93 1f       	adc	r25, r19
    1978:	82 55       	subi	r24, 0x52	; 82
    197a:	9e 4f       	sbci	r25, 0xFE	; 254
    197c:	fc 01       	movw	r30, r24
    197e:	80 81       	ld	r24, Z
    1980:	fa 01       	movw	r30, r20
    1982:	80 83       	st	Z, r24
        LCDDR10 = LCD_Data[LCD_Bitplane][6];
    1984:	46 ef       	ldi	r20, 0xF6	; 246
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	c9 01       	movw	r24, r18
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	82 0f       	add	r24, r18
    19a0:	93 1f       	adc	r25, r19
    19a2:	81 55       	subi	r24, 0x51	; 81
    19a4:	9e 4f       	sbci	r25, 0xFE	; 254
    19a6:	fc 01       	movw	r30, r24
    19a8:	80 81       	ld	r24, Z
    19aa:	fa 01       	movw	r30, r20
    19ac:	80 83       	st	Z, r24
        LCDDR11 = LCD_Data[LCD_Bitplane][7];
    19ae:	47 ef       	ldi	r20, 0xF7	; 247
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	c9 01       	movw	r24, r18
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	82 0f       	add	r24, r18
    19ca:	93 1f       	adc	r25, r19
    19cc:	80 55       	subi	r24, 0x50	; 80
    19ce:	9e 4f       	sbci	r25, 0xFE	; 254
    19d0:	fc 01       	movw	r30, r24
    19d2:	80 81       	ld	r24, Z
    19d4:	fa 01       	movw	r30, r20
    19d6:	80 83       	st	Z, r24
        LCDDR12 = LCD_Data[LCD_Bitplane][8];
    19d8:	48 ef       	ldi	r20, 0xF8	; 248
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <LCD_Bitplane>
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	c9 01       	movw	r24, r18
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	82 0f       	add	r24, r18
    19f4:	93 1f       	adc	r25, r19
    19f6:	8f 54       	subi	r24, 0x4F	; 79
    19f8:	9e 4f       	sbci	r25, 0xFE	; 254
    19fa:	fc 01       	movw	r30, r24
    19fc:	80 81       	ld	r24, Z
    19fe:	fa 01       	movw	r30, r20
    1a00:	80 83       	st	Z, r24
    }
    // inc Blink Counter
    LCD_BlinkCounter++;
    1a02:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <LCD_BlinkCounter>
    1a06:	8f 5f       	subi	r24, 0xFF	; 255
    1a08:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <LCD_BlinkCounter>
    // Restart Blink Counter
    if (LCD_BlinkCounter > (2*LCD_BLINK_FRAMES)){
    1a0c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <LCD_BlinkCounter>
    1a10:	81 33       	cpi	r24, 0x31	; 49
    1a12:	10 f0       	brcs	.+4      	; 0x1a18 <__vector_22+0x1e4>
        LCD_BlinkCounter=0;
    1a14:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <LCD_BlinkCounter>
    }

}
    1a18:	00 00       	nop
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	9f 91       	pop	r25
    1a24:	8f 91       	pop	r24
    1a26:	5f 91       	pop	r21
    1a28:	4f 91       	pop	r20
    1a2a:	3f 91       	pop	r19
    1a2c:	2f 91       	pop	r18
    1a2e:	0f 90       	pop	r0
    1a30:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a34:	0f 90       	pop	r0
    1a36:	1f 90       	pop	r1
    1a38:	18 95       	reti

00001a3a <main>:
/*!
 *******************************************************************************
 * main program
 ******************************************************************************/
int main(void)
{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	62 97       	sbiw	r28, 0x12	; 18
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    uint16_t value16;           //!< 16 Bit value
    int16_t value16s;           //!< signed 16 Bit value
    uint8_t value8;             //!<  8 Bit value

    //! initalization
    init();
    1a4e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <init>

    //! load/set default values
    load_defauls();
    1a52:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <load_defauls>
    
    //! Enable interrupts
    sei();
    1a56:	78 94       	sei

    //! show POST Screen
    LCD_AllSegments(LCD_MODE_ON);                   // all segments on
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	0e 94 32 08 	call	0x1064	; 0x1064 <LCD_AllSegments>
    delay(1000);
    1a5e:	88 ee       	ldi	r24, 0xE8	; 232
    1a60:	93 e0       	ldi	r25, 0x03	; 3
    1a62:	0e 94 54 10 	call	0x20a8	; 0x20a8 <delay>
    LCD_AllSegments(LCD_MODE_OFF);        
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	0e 94 32 08 	call	0x1064	; 0x1064 <LCD_AllSegments>
    LCD_PrintDec(REVHIGH, 1, LCD_MODE_ON);          // print version
    1a6c:	43 e0       	ldi	r20, 0x03	; 3
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_PrintDec>
    LCD_PrintDec(REVLOW, 0, LCD_MODE_ON);
    1a76:	43 e0       	ldi	r20, 0x03	; 3
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	8d e3       	ldi	r24, 0x3D	; 61
    1a7c:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_PrintDec>
    LCD_Update();
    1a80:	0e 94 0f 0c 	call	0x181e	; 0x181e <LCD_Update>
    delay(1000);
    1a84:	88 ee       	ldi	r24, 0xE8	; 232
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	0e 94 54 10 	call	0x20a8	; 0x20a8 <delay>
    LCD_AllSegments(LCD_MODE_OFF);                  // all off
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	0e 94 32 08 	call	0x1064	; 0x1064 <LCD_AllSegments>

    //! \todo Send Wakeup MSG

    state_mnt=false;
    1a92:	1a 82       	std	Y+2, r1	; 0x02
    ref_pos_changed=true;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    last_second=99;
    1a98:	83 e6       	ldi	r24, 0x63	; 99
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
    speed=full;
    1a9c:	1e 82       	std	Y+6, r1	; 0x06
    last_statekey = 0;
    1a9e:	1f 82       	std	Y+7, r1	; 0x07
    last_state_mnt = false;
    1aa0:	19 82       	std	Y+1, r1	; 0x01
    m_key_action = true;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <m_key_action>
    ref_position = 10;
    1aa8:	8a e0       	ldi	r24, 0x0A	; 10
    1aaa:	88 87       	std	Y+8, r24	; 0x08
    display_mode=3;
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	8c 83       	std	Y+4, r24	; 0x04

    ISR(PCINT1_vect);                  // get keystate

		// We should do the following once here to have valid data from the start
    ADC_Measure_Ub();
    1ab0:	0e 94 83 00 	call	0x106	; 0x106 <ADC_Measure_Ub>
		ADC_Measure_Temp();
    1ab4:	0e 94 92 00 	call	0x124	; 0x124 <ADC_Measure_Temp>
    *    - motor is of
    *    - no key is pressed (AUTO, C, PROG)
    *    - no serial communication active
    ***************************************************************************/
    
	CTL_temp_change_inc (40); //start setpoint på 20 grader
    1ab8:	88 e2       	ldi	r24, 0x28	; 40
    1aba:	0e 94 28 04 	call	0x850	; 0x850 <CTL_temp_change_inc>
	
	int aksel_valve = 0;
    1abe:	1a 86       	std	Y+10, r1	; 0x0a
    1ac0:	19 86       	std	Y+9, r1	; 0x09
	
	for (;;){        // change displaystate every 10 seconds 0 to 5
        // Activate Auto Mode
         setautomode(false);
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <setautomode>
		
		
		ADC_Measure_Temp();							//AFSLÆS TEMPERATUR I CELCIUS
    1ac8:	0e 94 92 00 	call	0x124	; 0x124 <ADC_Measure_Temp>
		int temperature_in_c = ADC_Get_Temp_Degree();
    1acc:	0e 94 b3 00 	call	0x166	; 0x166 <ADC_Get_Temp_Degree>
    1ad0:	9c 87       	std	Y+12, r25	; 0x0c
    1ad2:	8b 87       	std	Y+11, r24	; 0x0b
		
		
		//Regulering og motor control
		int minute_CTL = (RTC_GetSecond()==1);
    1ad4:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <RTC_ss>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	91 30       	cpi	r25, 0x01	; 1
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <main+0xa6>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9e 87       	std	Y+14, r25	; 0x0e
    1ae6:	8d 87       	std	Y+13, r24	; 0x0d
		CTL_update(minute_CTL); 
    1ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aea:	0e 94 4b 03 	call	0x696	; 0x696 <CTL_update>
		MOTOR_Goto(valve_wanted,full);
    1aee:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <valveHistory>
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <MOTOR_Goto>
		
		
		
        // 1) process keypresses
		
        if (m_key_action){
    1af8:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <m_key_action>
    1afc:	88 23       	and	r24, r24
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <main+0xc8>
    1b00:	5e c0       	rjmp	.+188    	; 0x1bbe <main+0x184>
            m_key_action = false;
    1b02:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <m_key_action>
            state_mnt = !(m_state_keys & KEYMASK_MOUNT);
    1b06:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	99 27       	eor	r25, r25
    1b12:	21 e0       	ldi	r18, 0x01	; 1
    1b14:	89 2b       	or	r24, r25
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <main+0xe0>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	2a 83       	std	Y+2, r18	; 0x02

            // State of keys AUTO, C and PROG and valve mounted
            if ((m_state_keys & KEYMASK_AUTO) != 0){
    1b1c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	88 70       	andi	r24, 0x08	; 8
    1b26:	99 27       	eor	r25, r25
    1b28:	89 2b       	or	r24, r25
    1b2a:	89 f0       	breq	.+34     	; 0x1b4e <main+0x114>
				//MOTOR_Goto(50, full);

				
				
				CTL_temp_change_inc (5); //Aksel. For debugging; increment target temperatur
    1b2c:	85 e0       	ldi	r24, 0x05	; 5
    1b2e:	0e 94 28 04 	call	0x850	; 0x850 <CTL_temp_change_inc>
				
                display_mode--;
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	81 50       	subi	r24, 0x01	; 1
    1b36:	8c 83       	std	Y+4, r24	; 0x04
                LCD_SetHourBarVal(display_mode, LCD_MODE_ON);
    1b38:	63 e0       	ldi	r22, 0x03	; 3
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_SetHourBarVal>
                ref_pos_changed = true;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	8d 83       	std	Y+5, r24	; 0x05
                LCD_SetSeg(LCD_SEG_AUTO, LCD_MODE_ON);
    1b44:	63 e0       	ldi	r22, 0x03	; 3
    1b46:	88 e1       	ldi	r24, 0x18	; 24
    1b48:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <main+0x11c>
            } else {
                LCD_SetSeg(LCD_SEG_AUTO, LCD_MODE_OFF);
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	88 e1       	ldi	r24, 0x18	; 24
    1b52:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
            }
            if ((m_state_keys & KEYMASK_C) != 0){
    1b56:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	82 70       	andi	r24, 0x02	; 2
    1b60:	99 27       	eor	r25, r25
    1b62:	89 2b       	or	r24, r25
    1b64:	69 f0       	breq	.+26     	; 0x1b80 <main+0x146>
				

				
				CTL_temp_change_inc (-5); //Aksel. For debugging; decrement target temperatur
    1b66:	8b ef       	ldi	r24, 0xFB	; 251
    1b68:	0e 94 28 04 	call	0x850	; 0x850 <CTL_temp_change_inc>
				//MOTOR_Goto(60, full);
                if (display_mode==9){
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	89 30       	cpi	r24, 0x09	; 9
    1b70:	59 f4       	brne	.+22     	; 0x1b88 <main+0x14e>
                      m_reftemp = input_temp(m_reftemp);                      
    1b72:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <m_reftemp>
    1b76:	0e 94 65 0f 	call	0x1eca	; 0x1eca <input_temp>
    1b7a:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_reftemp>
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <main+0x14e>
                }                 
                //LCD_SetHourBarVal(display_mode, LCD_MODE_ON);                
                //ref_pos_changed = true;
                //LCD_SetSeg(LCD_SEG_MANU, LCD_MODE_ON);
            } else {
                LCD_SetSeg(LCD_SEG_MANU, LCD_MODE_OFF);
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	82 e3       	ldi	r24, 0x32	; 50
    1b84:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
            }
            if ((m_state_keys & KEYMASK_PROG)!= 0){
    1b88:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	84 70       	andi	r24, 0x04	; 4
    1b92:	99 27       	eor	r25, r25
    1b94:	89 2b       	or	r24, r25
    1b96:	79 f0       	breq	.+30     	; 0x1bb6 <main+0x17c>
                display_mode++;
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	8f 5f       	subi	r24, 0xFF	; 255
    1b9c:	8c 83       	std	Y+4, r24	; 0x04
                LCD_SetHourBarVal(display_mode+1, LCD_MODE_ON);
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	8f 5f       	subi	r24, 0xFF	; 255
    1ba2:	63 e0       	ldi	r22, 0x03	; 3
    1ba4:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_SetHourBarVal>
                ref_pos_changed = true;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	8d 83       	std	Y+5, r24	; 0x05
                LCD_SetSeg(LCD_SEG_PROG, LCD_MODE_ON);
    1bac:	63 e0       	ldi	r22, 0x03	; 3
    1bae:	8a e1       	ldi	r24, 0x1A	; 26
    1bb0:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <main+0x184>
            } else {
                LCD_SetSeg(LCD_SEG_PROG, LCD_MODE_OFF);
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	8a e1       	ldi	r24, 0x1A	; 26
    1bba:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
        //      TODO:
        //      (during calibration the main loop stops for a long time
        //       maybe add global var to cancel callibration, e.g.: if
        //       HR20 removed from ther gear)
        //    - reset calibration is valve mounted changed to off
        if (last_state_mnt != state_mnt) {
    1bbe:	99 81       	ldd	r25, Y+1	; 0x01
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	98 17       	cp	r25, r24
    1bc4:	f9 f0       	breq	.+62     	; 0x1c04 <main+0x1ca>
            MOTOR_SetMountStatus(state_mnt);
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	0e 94 b8 10 	call	0x2170	; 0x2170 <MOTOR_SetMountStatus>
            if (state_mnt) {
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	88 23       	and	r24, r24
    1bd0:	c9 f0       	breq	.+50     	; 0x1c04 <main+0x1ca>
                LCD_ClearNumbers();
    1bd2:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_ClearNumbers>
                LCD_PrintChar(LCD_CHAR_C, 3, LCD_MODE_ON);
    1bd6:	43 e0       	ldi	r20, 0x03	; 3
    1bd8:	63 e0       	ldi	r22, 0x03	; 3
    1bda:	8c e0       	ldi	r24, 0x0C	; 12
    1bdc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
                LCD_PrintChar(LCD_CHAR_A, 2, LCD_MODE_ON);
    1be0:	43 e0       	ldi	r20, 0x03	; 3
    1be2:	62 e0       	ldi	r22, 0x02	; 2
    1be4:	8a e0       	ldi	r24, 0x0A	; 10
    1be6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
                LCD_PrintChar(LCD_CHAR_L, 1, LCD_MODE_ON); 
    1bea:	43 e0       	ldi	r20, 0x03	; 3
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	83 e2       	ldi	r24, 0x23	; 35
    1bf0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_PrintChar>
                LCD_Update();
    1bf4:	0e 94 0f 0c 	call	0x181e	; 0x181e <LCD_Update>
                // DEBUG: if next line is disabled, not calibration and no
                //        motor control is done
                MOTOR_Calibrate(ref_position, speed);  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Enable to calibrate motor
    1bf8:	6e 81       	ldd	r22, Y+6	; 0x06
    1bfa:	88 85       	ldd	r24, Y+8	; 0x08
    1bfc:	0e 94 48 11 	call	0x2290	; 0x2290 <MOTOR_Calibrate>
                LCD_ClearNumbers();
    1c00:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_ClearNumbers>
            ref_pos_changed = false;
        }*/

        // 5) if motor is on call MOTOR_CheckBlocked at least once a second
        //    - that switches motor of if it is blocked
        if (MOTOR_On()){
    1c04:	0e 94 cb 10 	call	0x2196	; 0x2196 <MOTOR_On>
    1c08:	88 23       	and	r24, r24
    1c0a:	51 f0       	breq	.+20     	; 0x1c20 <main+0x1e6>
            if (last_second != RTC_GetSecond()){
    1c0c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <RTC_ss>
    1c10:	9b 81       	ldd	r25, Y+3	; 0x03
    1c12:	98 17       	cp	r25, r24
    1c14:	29 f0       	breq	.+10     	; 0x1c20 <main+0x1e6>
                MOTOR_CheckBlocked();
    1c16:	0e 94 09 13 	call	0x2612	; 0x2612 <MOTOR_CheckBlocked>
                last_second = RTC_GetSecond();
    1c1a:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <RTC_ss>
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
            }
        }
        
        
        // 6) store keystate at end of loop before going to sleep
        last_statekey = m_state_keys;
    1c20:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    1c24:	8f 83       	std	Y+7, r24	; 0x07
        last_state_mnt = state_mnt;
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
	
        
        // 7) Check if there is a serial command to process
        //    Loop until all is processed
				e_meassure();	// test call to sample values and send them to serial port
    1c2a:	0e 94 48 07 	call	0xe90	; 0xe90 <e_meassure>
        //    - no serial communication active
                
        
		
		
        if (display_mode==1) {
    1c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	61 f4       	brne	.+24     	; 0x1c4c <main+0x212>
            // Ub: ADC Value Hex 
            ADC_Measure_Ub();
    1c34:	0e 94 83 00 	call	0x106	; 0x106 <ADC_Measure_Ub>
            value16 = ADC_Get_Bat_Val();
    1c38:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_Get_Bat_Val>
    1c3c:	98 8b       	std	Y+16, r25	; 0x10
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f
            LCD_PrintHexW(value16, LCD_MODE_ON);
    1c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c42:	98 89       	ldd	r25, Y+16	; 0x10
    1c44:	63 e0       	ldi	r22, 0x03	; 3
    1c46:	0e 94 99 09 	call	0x1332	; 0x1332 <LCD_PrintHexW>
    1c4a:	8f c0       	rjmp	.+286    	; 0x1d6a <main+0x330>
        }else if (display_mode==2) {
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	61 f4       	brne	.+24     	; 0x1c6a <main+0x230>
            // Ub: ADC Value Decimal 
            ADC_Measure_Ub();
    1c52:	0e 94 83 00 	call	0x106	; 0x106 <ADC_Measure_Ub>
            value16 = ADC_Get_Bat_Val();
    1c56:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_Get_Bat_Val>
    1c5a:	98 8b       	std	Y+16, r25	; 0x10
    1c5c:	8f 87       	std	Y+15, r24	; 0x0f
            LCD_PrintDecW(value16, LCD_MODE_ON);
    1c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c60:	98 89       	ldd	r25, Y+16	; 0x10
    1c62:	63 e0       	ldi	r22, 0x03	; 3
    1c64:	0e 94 4f 09 	call	0x129e	; 0x129e <LCD_PrintDecW>
    1c68:	80 c0       	rjmp	.+256    	; 0x1d6a <main+0x330>
        }else if (display_mode==3) {
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	61 f4       	brne	.+24     	; 0x1c88 <main+0x24e>
            // Ub: Voltage [mV]
            ADC_Measure_Ub();            
    1c70:	0e 94 83 00 	call	0x106	; 0x106 <ADC_Measure_Ub>
            value16 = ADC_Get_Bat_Voltage();
    1c74:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <ADC_Get_Bat_Voltage>
    1c78:	98 8b       	std	Y+16, r25	; 0x10
    1c7a:	8f 87       	std	Y+15, r24	; 0x0f
            LCD_PrintDecW(value16, LCD_MODE_ON);
    1c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7e:	98 89       	ldd	r25, Y+16	; 0x10
    1c80:	63 e0       	ldi	r22, 0x03	; 3
    1c82:	0e 94 4f 09 	call	0x129e	; 0x129e <LCD_PrintDecW>
    1c86:	71 c0       	rjmp	.+226    	; 0x1d6a <main+0x330>
        }else if (display_mode==4) {
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	84 30       	cpi	r24, 0x04	; 4
    1c8c:	61 f4       	brne	.+24     	; 0x1ca6 <main+0x26c>
            // Temp: ADC Value Hex
            ADC_Measure_Temp();
    1c8e:	0e 94 92 00 	call	0x124	; 0x124 <ADC_Measure_Temp>
            value16 = ADC_Get_Temp_Val();
    1c92:	0e 94 e6 00 	call	0x1cc	; 0x1cc <ADC_Get_Temp_Val>
    1c96:	98 8b       	std	Y+16, r25	; 0x10
    1c98:	8f 87       	std	Y+15, r24	; 0x0f
            LCD_PrintHexW(value16, LCD_MODE_ON);
    1c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9c:	98 89       	ldd	r25, Y+16	; 0x10
    1c9e:	63 e0       	ldi	r22, 0x03	; 3
    1ca0:	0e 94 99 09 	call	0x1332	; 0x1332 <LCD_PrintHexW>
    1ca4:	62 c0       	rjmp	.+196    	; 0x1d6a <main+0x330>
        }else if (display_mode==5) {
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	85 30       	cpi	r24, 0x05	; 5
    1caa:	61 f4       	brne	.+24     	; 0x1cc4 <main+0x28a>
            // Temp: ADC Value Decimal
            ADC_Measure_Temp();
    1cac:	0e 94 92 00 	call	0x124	; 0x124 <ADC_Measure_Temp>
            value16 = ADC_Get_Temp_Val();
    1cb0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <ADC_Get_Temp_Val>
    1cb4:	98 8b       	std	Y+16, r25	; 0x10
    1cb6:	8f 87       	std	Y+15, r24	; 0x0f
            LCD_PrintDecW(value16, LCD_MODE_ON);            
    1cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cba:	98 89       	ldd	r25, Y+16	; 0x10
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	0e 94 4f 09 	call	0x129e	; 0x129e <LCD_PrintDecW>
    1cc2:	53 c0       	rjmp	.+166    	; 0x1d6a <main+0x330>
        }else if (display_mode==6) {
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	86 30       	cpi	r24, 0x06	; 6
    1cc8:	61 f4       	brne	.+24     	; 0x1ce2 <main+0x2a8>
            // Temp: Temperature (Degree)
            ADC_Measure_Temp();
    1cca:	0e 94 92 00 	call	0x124	; 0x124 <ADC_Measure_Temp>
            value16s = ADC_Get_Temp_Degree();
    1cce:	0e 94 b3 00 	call	0x166	; 0x166 <ADC_Get_Temp_Degree>
    1cd2:	9a 8b       	std	Y+18, r25	; 0x12
    1cd4:	89 8b       	std	Y+17, r24	; 0x11
            LCD_PrintTempInt(value16s, LCD_MODE_ON);
    1cd6:	89 89       	ldd	r24, Y+17	; 0x11
    1cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cda:	63 e0       	ldi	r22, 0x03	; 3
    1cdc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <LCD_PrintTempInt>
    1ce0:	44 c0       	rjmp	.+136    	; 0x1d6a <main+0x330>
        }else if (display_mode==7) {
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	87 30       	cpi	r24, 0x07	; 7
    1ce6:	51 f4       	brne	.+20     	; 0x1cfc <main+0x2c2>
            // - 9,87 °C            
            value16s = -987;
    1ce8:	85 e2       	ldi	r24, 0x25	; 37
    1cea:	9c ef       	ldi	r25, 0xFC	; 252
    1cec:	9a 8b       	std	Y+18, r25	; 0x12
    1cee:	89 8b       	std	Y+17, r24	; 0x11
            LCD_PrintTempInt(value16s, LCD_MODE_ON);
    1cf0:	89 89       	ldd	r24, Y+17	; 0x11
    1cf2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf4:	63 e0       	ldi	r22, 0x03	; 3
    1cf6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <LCD_PrintTempInt>
    1cfa:	37 c0       	rjmp	.+110    	; 0x1d6a <main+0x330>
        }else if (display_mode==8) {
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	88 30       	cpi	r24, 0x08	; 8
    1d00:	51 f4       	brne	.+20     	; 0x1d16 <main+0x2dc>
            // 98,76 °C            
            value16s = 9876;
    1d02:	84 e9       	ldi	r24, 0x94	; 148
    1d04:	96 e2       	ldi	r25, 0x26	; 38
    1d06:	9a 8b       	std	Y+18, r25	; 0x12
    1d08:	89 8b       	std	Y+17, r24	; 0x11
            LCD_PrintTempInt(value16s, LCD_MODE_ON);
    1d0a:	89 89       	ldd	r24, Y+17	; 0x11
    1d0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0e:	63 e0       	ldi	r22, 0x03	; 3
    1d10:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <LCD_PrintTempInt>
    1d14:	2a c0       	rjmp	.+84     	; 0x1d6a <main+0x330>
		}else if (display_mode==12) {
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	8c 30       	cpi	r24, 0x0C	; 12
    1d1a:	69 f4       	brne	.+26     	; 0x1d36 <main+0x2fc>
            //Test setting temperature to 30 celcius  
			
			m_reftemp = DEG_2_UINT8(30);
    1d1c:	8b ef       	ldi	r24, 0xFB	; 251
    1d1e:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_reftemp>
			         
            value16s = 3000;
    1d22:	88 eb       	ldi	r24, 0xB8	; 184
    1d24:	9b e0       	ldi	r25, 0x0B	; 11
    1d26:	9a 8b       	std	Y+18, r25	; 0x12
    1d28:	89 8b       	std	Y+17, r24	; 0x11
            LCD_PrintTempInt(value16s, LCD_MODE_ON);	
    1d2a:	89 89       	ldd	r24, Y+17	; 0x11
    1d2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d2e:	63 e0       	ldi	r22, 0x03	; 3
    1d30:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <LCD_PrintTempInt>
    1d34:	1a c0       	rjmp	.+52     	; 0x1d6a <main+0x330>
		}else if (display_mode==13) {
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	8d 30       	cpi	r24, 0x0D	; 13
    1d3a:	69 f4       	brne	.+26     	; 0x1d56 <main+0x31c>
            //Test setting temperature to 3 celcius  
			
			m_reftemp = DEG_2_UINT8(3);
    1d3c:	8d ee       	ldi	r24, 0xED	; 237
    1d3e:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_reftemp>
			         
            value16s = 300;
    1d42:	8c e2       	ldi	r24, 0x2C	; 44
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	89 8b       	std	Y+17, r24	; 0x11
            LCD_PrintTempInt(value16s, LCD_MODE_ON);
    1d4a:	89 89       	ldd	r24, Y+17	; 0x11
    1d4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4e:	63 e0       	ldi	r22, 0x03	; 3
    1d50:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <LCD_PrintTempInt>
    1d54:	0a c0       	rjmp	.+20     	; 0x1d6a <main+0x330>
        }else{
            value16 = display_mode;                      
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
    1d5e:	8f 87       	std	Y+15, r24	; 0x0f
            LCD_PrintDecW(value16, LCD_MODE_ON);
    1d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d62:	98 89       	ldd	r25, Y+16	; 0x10
    1d64:	63 e0       	ldi	r22, 0x03	; 3
    1d66:	0e 94 4f 09 	call	0x129e	; 0x129e <LCD_PrintDecW>
		//CTL_update(minute_CTL); 
		//MOTOR_Goto(valve_wanted,full);
		
		
		
		LCD_PrintDec(CTL_temp_wanted/2, 0,LCD_MODE_ON);
    1d6a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <CTL_temp_wanted>
    1d6e:	86 95       	lsr	r24
    1d70:	43 e0       	ldi	r20, 0x03	; 3
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_PrintDec>
		
		
		LCD_PrintDec(valve_wanted, 1,LCD_MODE_ON);
    1d78:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <valveHistory>
    1d7c:	43 e0       	ldi	r20, 0x03	; 3
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_PrintDec>
			
		//MOTOR_Goto(valve_wanted, full);


        // update Display each main loop
        LCD_Update();
    1d84:	0e 94 0f 0c 	call	0x181e	; 0x181e <LCD_Update>
		delay(100);
    1d88:	84 e6       	ldi	r24, 0x64	; 100
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <delay>
    } //End Main loop
    1d90:	98 ce       	rjmp	.-720    	; 0x1ac2 <main+0x88>

00001d92 <init>:
/*!
 *******************************************************************************
 * Initializate all modules
 ******************************************************************************/
void init(void)
{
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    //! Calibrate the internal RC Oszillator
    //! \todo test calibrate_rco();
        
    //! set Clock to 4 Mhz
    CLKPR = (1<<CLKPCE);            // prescaler change enable
    1d9a:	81 e6       	ldi	r24, 0x61	; 97
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	20 e8       	ldi	r18, 0x80	; 128
    1da0:	fc 01       	movw	r30, r24
    1da2:	20 83       	st	Z, r18
    CLKPR = (1<<CLKPS0);            // prescaler = 2 (internal RC runs @ 8MHz)
    1da4:	81 e6       	ldi	r24, 0x61	; 97
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	21 e0       	ldi	r18, 0x01	; 1
    1daa:	fc 01       	movw	r30, r24
    1dac:	20 83       	st	Z, r18

    //! Disable Analog Comparator (power save)
    ACSR = (1<<ACD);
    1dae:	80 e5       	ldi	r24, 0x50	; 80
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	20 e8       	ldi	r18, 0x80	; 128
    1db4:	fc 01       	movw	r30, r24
    1db6:	20 83       	st	Z, r18

    //! Disable Digital input on PF0-7 (power save)
    DIDR0 = 0xFF;
    1db8:	8e e7       	ldi	r24, 0x7E	; 126
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	2f ef       	ldi	r18, 0xFF	; 255
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	20 83       	st	Z, r18

    //! digital I/O port direction
    DDRB = (1<<PB4)|(1<<PB7); // PB4, PB7 Motor out
    1dc2:	84 e2       	ldi	r24, 0x24	; 36
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	20 e9       	ldi	r18, 0x90	; 144
    1dc8:	fc 01       	movw	r30, r24
    1dca:	20 83       	st	Z, r18
    DDRG = (1<<PG3)|(1<<PG4); // PG3, PG4 Motor out
    1dcc:	83 e3       	ldi	r24, 0x33	; 51
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	28 e1       	ldi	r18, 0x18	; 24
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
    DDRE = (1<<PE3);          // PE3  activate lighteye
    1dd6:	8d e2       	ldi	r24, 0x2D	; 45
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	28 e0       	ldi	r18, 0x08	; 8
    1ddc:	fc 01       	movw	r30, r24
    1dde:	20 83       	st	Z, r18
    DDRF = (1<<PF3);          // PF3  activate tempsensor
    1de0:	80 e3       	ldi	r24, 0x30	; 48
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	28 e0       	ldi	r18, 0x08	; 8
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 83       	st	Z, r18
	
	DDRF = (1<<PF6); //Test: Writing to pins
    1dea:	80 e3       	ldi	r24, 0x30	; 48
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	20 e4       	ldi	r18, 0x40	; 64
    1df0:	fc 01       	movw	r30, r24
    1df2:	20 83       	st	Z, r18

    //! enable pullup on all inputs (keys and m_wheel)
    //! ATTENTION: no pullup on lighteye input watch circuit diagram
    PORTB = (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB5)|(1<<PB6);
    1df4:	85 e2       	ldi	r24, 0x25	; 37
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	2f e6       	ldi	r18, 0x6F	; 111
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	20 83       	st	Z, r18
    //! remark for PCMSK0:
    //!     PCINT0 for lighteye (motor monitor) is activated in motor.c using
    //!     mask register PCMSK0: PCMSK0=(1<<PCINT4) and PCMSK0&=~(1<<PCINT4)

    //! PCMSK1 for keyactions
    PCMSK1 = (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11)|(1<<PCINT13);
    1dfe:	8c e6       	ldi	r24, 0x6C	; 108
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	2f e2       	ldi	r18, 0x2F	; 47
    1e04:	fc 01       	movw	r30, r24
    1e06:	20 83       	st	Z, r18

    //! activate PCINT0 + PCINT1
    EIMSK = (1<<PCIE1)|(1<<PCIE0);
    1e08:	8d e3       	ldi	r24, 0x3D	; 61
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	20 ec       	ldi	r18, 0xC0	; 192
    1e0e:	fc 01       	movw	r30, r24
    1e10:	20 83       	st	Z, r18
    
    //! Initialize the USART
  	//COM_Init(COM_BAUD_RATE);

    //1 Initialize the LCD
    LCD_Init();                     
    1e12:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <LCD_Init>

    //! Initialize the RTC, pass pointer to timer callback function
    RTC_Init(callback_settemp);
    1e16:	8f e9       	ldi	r24, 0x9F	; 159
    1e18:	9f e0       	ldi	r25, 0x0F	; 15
    1e1a:	0e 94 93 13 	call	0x2726	; 0x2726 <RTC_Init>

    //! Initialize the motor
    MOTOR_Init();
    1e1e:	0e 94 88 10 	call	0x2110	; 0x2110 <MOTOR_Init>
		
		// Init Engine
		e_Init();
    1e22:	0e 94 b3 07 	call	0xf66	; 0xf66 <e_Init>
}
    1e26:	00 00       	nop
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	08 95       	ret

00001e2e <load_defauls>:
 * Load default values from eeprom
 *
 * \todo EEPROM management, until now values are fix
 ******************************************************************************/
void load_defauls(void)
{
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	1f 92       	push	r1
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;

    //! Set Time and date
    RTC_SetDay   (BOOT_DD);
    1e38:	87 e0       	ldi	r24, 0x07	; 7
    1e3a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <RTC_SetDay>
    RTC_SetMonth (BOOT_MM);
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	0e 94 14 14 	call	0x2828	; 0x2828 <RTC_SetMonth>
    RTC_SetYear  (BOOT_YY);
    1e44:	88 e0       	ldi	r24, 0x08	; 8
    1e46:	0e 94 2a 14 	call	0x2854	; 0x2854 <RTC_SetYear>
    RTC_SetHour  (BOOT_hh);
    1e4a:	86 e1       	ldi	r24, 0x16	; 22
    1e4c:	0e 94 3a 14 	call	0x2874	; 0x2874 <RTC_SetHour>
    RTC_SetMinute(BOOT_mm);
    1e50:	8d e1       	ldi	r24, 0x1D	; 29
    1e52:	0e 94 4b 14 	call	0x2896	; 0x2896 <RTC_SetMinute>
    RTC_SetSecond(0);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <RTC_SetSecond>

    //! m_reftemps (high and low)
    m_reftemp_mem[0] = DEG_2_UINT8 (BOOT_TEMP_H);
    1e5c:	8b ea       	ldi	r24, 0xAB	; 171
    1e5e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <m_reftemp_mem>
    m_reftemp_mem[1] = DEG_2_UINT8 (BOOT_TEMP_L);
    1e62:	8f e6       	ldi	r24, 0x6F	; 111
    1e64:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <m_reftemp_mem+0x1>

    //! DOW times
    for (i=0; i<7; i++){
    1e68:	19 82       	std	Y+1, r1	; 0x01
    1e6a:	17 c0       	rjmp	.+46     	; 0x1e9a <load_defauls+0x6c>
        RTC_DowTimerSet(i, 0, BOOT_ON1);
    1e6c:	44 ea       	ldi	r20, 0xA4	; 164
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	0e 94 6d 14 	call	0x28da	; 0x28da <RTC_DowTimerSet>
        RTC_DowTimerSet(i, 1, BOOT_OFF1);
    1e76:	4c e1       	ldi	r20, 0x1C	; 28
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	0e 94 6d 14 	call	0x28da	; 0x28da <RTC_DowTimerSet>
        RTC_DowTimerSet(i, 2, BOOT_ON2);
    1e80:	40 ec       	ldi	r20, 0xC0	; 192
    1e82:	62 e0       	ldi	r22, 0x02	; 2
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	0e 94 6d 14 	call	0x28da	; 0x28da <RTC_DowTimerSet>
        RTC_DowTimerSet(i, 3, BOOT_OFF2);
    1e8a:	4c ee       	ldi	r20, 0xEC	; 236
    1e8c:	63 e0       	ldi	r22, 0x03	; 3
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	0e 94 6d 14 	call	0x28da	; 0x28da <RTC_DowTimerSet>
    //! m_reftemps (high and low)
    m_reftemp_mem[0] = DEG_2_UINT8 (BOOT_TEMP_H);
    m_reftemp_mem[1] = DEG_2_UINT8 (BOOT_TEMP_L);

    //! DOW times
    for (i=0; i<7; i++){
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	87 30       	cpi	r24, 0x07	; 7
    1e9e:	30 f3       	brcs	.-52     	; 0x1e6c <load_defauls+0x3e>
        RTC_DowTimerSet(i, 2, BOOT_ON2);
        RTC_DowTimerSet(i, 3, BOOT_OFF2);
    }

    //! motor speed
    m_speed = full;
    1ea0:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <m_speed>

    //! initial keystates
    m_key_action = false;
    1ea4:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <m_key_action>
    m_state_keys = 0;
    1ea8:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <m_state_keys>
    m_state_keys_prev = 0;
    1eac:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <m_state_keys_prev>
    m_state_wheel = 0;
    1eb0:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <m_state_wheel>
    m_state_wheel_prev = 0;
    1eb4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <m_state_wheel_prev>

    //! serial number        
    serialNumber = 0; // Zero = Not set !
    1eb8:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <serialNumber+0x1>
    1ebc:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <serialNumber>

}
    1ec0:	00 00       	nop
    1ec2:	0f 90       	pop	r0
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	08 95       	ret

00001eca <input_temp>:
 * \note This function uses global vars \ref m_wheel, \ref m_state_keys <BR>
 *        \ref m_key_action, \ref m_wheel_action, 
 * \param    default_val default value used as startvalue
 * \returns  choosen temmperature, format see \ref LCD_PrintTemp   
 ******************************************************************************/
uint8_t input_temp(uint8_t default_val){  
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <input_temp+0x6>
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	8a 83       	std	Y+2, r24	; 0x02
    
    bool active;
    active = true;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    // set to default value
    m_wheel = default_val;
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <m_wheel>
    // activate initial Output
    m_wheel_action = true;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <m_wheel_action>
    m_key_action = false;
    1ee6:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <m_key_action>
    // Loop    
    while (active == true){
    1eea:	1f c0       	rjmp	.+62     	; 0x1f2a <input_temp+0x60>
        if (m_wheel_action){
    1eec:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <m_wheel_action>
    1ef0:	88 23       	and	r24, r24
    1ef2:	71 f0       	breq	.+28     	; 0x1f10 <input_temp+0x46>
            if (m_wheel > 52){
    1ef4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <m_wheel>
    1ef8:	85 33       	cpi	r24, 0x35	; 53
    1efa:	18 f0       	brcs	.+6      	; 0x1f02 <input_temp+0x38>
                m_wheel = 52;
    1efc:	84 e3       	ldi	r24, 0x34	; 52
    1efe:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <m_wheel>
            }
            LCD_PrintTemp(m_wheel, LCD_MODE_ON);
    1f02:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <m_wheel>
    1f06:	63 e0       	ldi	r22, 0x03	; 3
    1f08:	0e 94 bb 09 	call	0x1376	; 0x1376 <LCD_PrintTemp>
			LCD_Update();
    1f0c:	0e 94 0f 0c 	call	0x181e	; 0x181e <LCD_Update>
        }
        if (m_key_action == true){
    1f10:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <m_key_action>
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	49 f4       	brne	.+18     	; 0x1f2a <input_temp+0x60>
            if ((m_state_keys & KEYMASK_PROG) != 0){            
    1f18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	84 70       	andi	r24, 0x04	; 4
    1f22:	99 27       	eor	r25, r25
    1f24:	89 2b       	or	r24, r25
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <input_temp+0x60>
                active = false;
    1f28:	19 82       	std	Y+1, r1	; 0x01
    m_wheel = default_val;
    // activate initial Output
    m_wheel_action = true;
    m_key_action = false;
    // Loop    
    while (active == true){
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	f1 f2       	breq	.-68     	; 0x1eec <input_temp+0x22>
            if ((m_state_keys & KEYMASK_PROG) != 0){            
                active = false;
            }
        }      
    }
    return m_wheel; 
    1f30:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <m_wheel>
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	08 95       	ret

00001f3e <callback_settemp>:
 * is called from RTC
 *
 * \param slot temperatre slot, ID of DOW timer which called this function
 *
 ******************************************************************************/
void callback_settemp(uint8_t slot){
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	1f 92       	push	r1
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	89 83       	std	Y+1, r24	; 0x01
    LCD_SetSeg(LCD_SEG_SNOW, LCD_MODE_ON);
    1f4a:	63 e0       	ldi	r22, 0x03	; 3
    1f4c:	8c e2       	ldi	r24, 0x2C	; 44
    1f4e:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    if (m_automatic_mode){
    1f52:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <m_automatic_mode>
    1f56:	88 23       	and	r24, r24
    1f58:	59 f0       	breq	.+22     	; 0x1f70 <callback_settemp+0x32>
        m_reftemp = m_reftemp_mem[(slot%2)];
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	88 2f       	mov	r24, r24
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	81 70       	andi	r24, 0x01	; 1
    1f62:	99 27       	eor	r25, r25
    1f64:	8c 53       	subi	r24, 0x3C	; 60
    1f66:	9e 4f       	sbci	r25, 0xFE	; 254
    1f68:	fc 01       	movw	r30, r24
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_reftemp>
    }
}
    1f70:	00 00       	nop
    1f72:	0f 90       	pop	r0
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <setautomode>:
 *
 * \param newmode
 *   true: auto
 *   false: manu
 ******************************************************************************/
void setautomode(bool newmode){
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	1f 92       	push	r1
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	89 83       	std	Y+1, r24	; 0x01
    if (newmode){
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	88 23       	and	r24, r24
    1f8a:	a9 f0       	breq	.+42     	; 0x1fb6 <setautomode+0x3c>
        // set m_reftemp according to last occured timer index MOD 2
        // as timers 0, 2, .. are timers for high temp, 1, 3, .. for low temp.
        m_reftemp = m_reftemp_mem[(RTC_DowTimerGetActualIndex()%2)];
    1f8c:	0e 94 8e 14 	call	0x291c	; 0x291c <RTC_DowTimerGetActualIndex>
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	81 70       	andi	r24, 0x01	; 1
    1f96:	99 27       	eor	r25, r25
    1f98:	8c 53       	subi	r24, 0x3C	; 60
    1f9a:	9e 4f       	sbci	r25, 0xFE	; 254
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <m_reftemp>
        LCD_SetSeg(LCD_SEG_AUTO, LCD_MODE_ON);
    1fa4:	63 e0       	ldi	r22, 0x03	; 3
    1fa6:	88 e1       	ldi	r24, 0x18	; 24
    1fa8:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
        LCD_SetSeg(LCD_SEG_MANU, LCD_MODE_OFF);
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	82 e3       	ldi	r24, 0x32	; 50
    1fb0:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    1fb4:	08 c0       	rjmp	.+16     	; 0x1fc6 <setautomode+0x4c>
    } else {
        LCD_SetSeg(LCD_SEG_AUTO, LCD_MODE_OFF);
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	88 e1       	ldi	r24, 0x18	; 24
    1fba:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
        LCD_SetSeg(LCD_SEG_MANU, LCD_MODE_ON);
    1fbe:	63 e0       	ldi	r22, 0x03	; 3
    1fc0:	82 e3       	ldi	r24, 0x32	; 50
    1fc2:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_SetSeg>
    }
    m_automatic_mode = newmode;
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <m_automatic_mode>
}
    1fcc:	00 00       	nop
    1fce:	0f 90       	pop	r0
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <__vector_3>:
 *
 *  - check state of buttons
 *  - check state of wheel
 *  - check mount contact
 ******************************************************************************/
ISR(PCINT1_vect){
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	8f 93       	push	r24
    1fe4:	9f 93       	push	r25
    1fe6:	ef 93       	push	r30
    1fe8:	ff 93       	push	r31
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62

    // keys
    m_state_keys = ~PINB & 0x6f; // low active, mask for input (PB 0,1,2,3,5,6)
    1ff2:	83 e2       	ldi	r24, 0x23	; 35
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 95       	com	r24
    1ffc:	8f 76       	andi	r24, 0x6F	; 111
    1ffe:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <m_state_keys>

    if (m_state_keys_prev != m_state_keys){
    2002:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <m_state_keys_prev>
    2006:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    200a:	98 17       	cp	r25, r24
    200c:	09 f4       	brne	.+2      	; 0x2010 <__vector_3+0x3a>
    200e:	3f c0       	rjmp	.+126    	; 0x208e <__vector_3+0xb8>
        m_state_keys_prev = m_state_keys;
    2010:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    2014:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <m_state_keys_prev>

        // m_wheel
        m_state_wheel = ( m_state_keys & (0x60) );   // m_wheel on PB5 and PB6
    2018:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <m_state_keys>
    201c:	80 76       	andi	r24, 0x60	; 96
    201e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <m_state_wheel>
        if (m_state_wheel !=m_state_wheel_prev){
    2022:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <m_state_wheel>
    2026:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <m_state_wheel_prev>
    202a:	98 17       	cp	r25, r24
    202c:	69 f1       	breq	.+90     	; 0x2088 <__vector_3+0xb2>
            m_state_wheel_prev = m_state_wheel;
    202e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <m_state_wheel>
    2032:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <m_state_wheel_prev>
             if ( (m_state_wheel == 0x20) || (m_state_wheel == 0x40) ) {
    2036:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <m_state_wheel>
    203a:	80 32       	cpi	r24, 0x20	; 32
    203c:	21 f0       	breq	.+8      	; 0x2046 <__vector_3+0x70>
    203e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <m_state_wheel>
    2042:	80 34       	cpi	r24, 0x40	; 64
    2044:	69 f4       	brne	.+26     	; 0x2060 <__vector_3+0x8a>
                if (m_wheel < 0xff){
    2046:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <m_wheel>
    204a:	8f 3f       	cpi	r24, 0xFF	; 255
    204c:	e9 f0       	breq	.+58     	; 0x2088 <__vector_3+0xb2>
                    m_wheel++;
    204e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <m_wheel>
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <m_wheel>
                    m_wheel_action = true;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <m_wheel_action>
        // m_wheel
        m_state_wheel = ( m_state_keys & (0x60) );   // m_wheel on PB5 and PB6
        if (m_state_wheel !=m_state_wheel_prev){
            m_state_wheel_prev = m_state_wheel;
             if ( (m_state_wheel == 0x20) || (m_state_wheel == 0x40) ) {
                if (m_wheel < 0xff){
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <__vector_3+0xb2>
                    m_wheel++;
                    m_wheel_action = true;
               }
            } else if ( (m_state_wheel == 0x00) || (m_state_wheel == 0x60) ){
    2060:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <m_state_wheel>
    2064:	88 23       	and	r24, r24
    2066:	21 f0       	breq	.+8      	; 0x2070 <__vector_3+0x9a>
    2068:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <m_state_wheel>
    206c:	80 36       	cpi	r24, 0x60	; 96
    206e:	61 f4       	brne	.+24     	; 0x2088 <__vector_3+0xb2>
                if (m_wheel > 0){
    2070:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <m_wheel>
    2074:	88 23       	and	r24, r24
    2076:	41 f0       	breq	.+16     	; 0x2088 <__vector_3+0xb2>
                    m_wheel--;
    2078:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <m_wheel>
    207c:	81 50       	subi	r24, 0x01	; 1
    207e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <m_wheel>
                    m_wheel_action = true;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <m_wheel_action>
                }
            }
        }

        // set flag for main
        m_key_action = true;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <m_key_action>
    }
}
    208e:	00 00       	nop
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	9f 91       	pop	r25
    209a:	8f 91       	pop	r24
    209c:	0f 90       	pop	r0
    209e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    20a2:	0f 90       	pop	r0
    20a4:	1f 90       	pop	r1
    20a6:	18 95       	reti

000020a8 <delay>:
 *******************************************************************************
 * delay function
 *  quick and dirty used only for test purpose
 ******************************************************************************/
void delay(uint16_t millisec)
{
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <delay+0x6>
    20ae:	1f 92       	push	r1
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	9b 83       	std	Y+3, r25	; 0x03
    20b6:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;
    while (millisec--){
    20b8:	1b c0       	rjmp	.+54     	; 0x20f0 <delay+0x48>
        for (i=0; i<255; i++){
    20ba:	19 82       	std	Y+1, r1	; 0x01
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <delay+0x1e>
            asm volatile ("nop"::);
    20be:	00 00       	nop
 ******************************************************************************/
void delay(uint16_t millisec)
{
    uint8_t i;
    while (millisec--){
        for (i=0; i<255; i++){
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	8f 3f       	cpi	r24, 0xFF	; 255
    20ca:	c9 f7       	brne	.-14     	; 0x20be <delay+0x16>
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){
    20cc:	19 82       	std	Y+1, r1	; 0x01
    20ce:	04 c0       	rjmp	.+8      	; 0x20d8 <delay+0x30>
            asm volatile ("nop"::);
    20d0:	00 00       	nop
    uint8_t i;
    while (millisec--){
        for (i=0; i<255; i++){
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	8f 5f       	subi	r24, 0xFF	; 255
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	8f 3f       	cpi	r24, 0xFF	; 255
    20dc:	c9 f7       	brne	.-14     	; 0x20d0 <delay+0x28>
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){            
    20de:	19 82       	std	Y+1, r1	; 0x01
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <delay+0x42>
            asm volatile ("nop"::);
    20e2:	00 00       	nop
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){
            asm volatile ("nop"::);
        }
        for (i=0; i<255; i++){            
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	8f 3f       	cpi	r24, 0xFF	; 255
    20ee:	c9 f7       	brne	.-14     	; 0x20e2 <delay+0x3a>
 *  quick and dirty used only for test purpose
 ******************************************************************************/
void delay(uint16_t millisec)
{
    uint8_t i;
    while (millisec--){
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	9b 81       	ldd	r25, Y+3	; 0x03
    20f4:	9c 01       	movw	r18, r24
    20f6:	21 50       	subi	r18, 0x01	; 1
    20f8:	31 09       	sbc	r19, r1
    20fa:	3b 83       	std	Y+3, r19	; 0x03
    20fc:	2a 83       	std	Y+2, r18	; 0x02
    20fe:	89 2b       	or	r24, r25
    2100:	e1 f6       	brne	.-72     	; 0x20ba <delay+0x12>
        }
        for (i=0; i<255; i++){            
            asm volatile ("nop"::);
        }
    }
}
    2102:	00 00       	nop
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	08 95       	ret

00002110 <MOTOR_Init>:
 * stop the motor
 ******************************************************************************/
void MOTOR_Stop(void)
{
    MOTOR_Control(stop, full);
}
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <MOTOR_PosAct+0x1>
    211c:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <MOTOR_PosAct>
    2120:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <MOTOR_PosMax+0x1>
    2124:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <MOTOR_PosMax>
    2128:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <MOTOR_PosStop+0x1>
    212c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <MOTOR_PosStop>
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2138:	00 00       	nop
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <MOTOR_ResetCalibration>:
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <MOTOR_PosAct+0x1>
    214c:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <MOTOR_PosAct>
    2150:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <MOTOR_PosMax+0x1>
    2154:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <MOTOR_PosMax>
    2158:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <MOTOR_PosStop+0x1>
    215c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <MOTOR_PosStop>
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2168:	00 00       	nop
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	08 95       	ret

00002170 <MOTOR_SetMountStatus>:
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	1f 92       	push	r1
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <MOTOR_Mounted>
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	88 23       	and	r24, r24
    2186:	11 f4       	brne	.+4      	; 0x218c <MOTOR_SetMountStatus+0x1c>
    2188:	0e 94 a0 10 	call	0x2140	; 0x2140 <MOTOR_ResetCalibration>
    218c:	00 00       	nop
    218e:	0f 90       	pop	r0
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	08 95       	ret

00002196 <MOTOR_On>:
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <MOTOR_Dir>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	99 23       	and	r25, r25
    21a6:	09 f4       	brne	.+2      	; 0x21aa <MOTOR_On+0x14>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <MOTOR_Goto>:
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <MOTOR_Goto+0x6>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	6a 83       	std	Y+2, r22	; 0x02
    21be:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <MOTOR_PosMax>
    21c2:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <MOTOR_PosMax+0x1>
    21c6:	89 2b       	or	r24, r25
    21c8:	09 f4       	brne	.+2      	; 0x21cc <MOTOR_Goto+0x1c>
    21ca:	5c c0       	rjmp	.+184    	; 0x2284 <MOTOR_Goto+0xd4>
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	84 36       	cpi	r24, 0x64	; 100
    21d0:	51 f4       	brne	.+20     	; 0x21e6 <MOTOR_Goto+0x36>
    21d2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <MOTOR_PosMax>
    21d6:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <MOTOR_PosMax+0x1>
    21da:	c2 96       	adiw	r24, 0x32	; 50
    21dc:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <MOTOR_PosStop+0x1>
    21e0:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <MOTOR_PosStop>
    21e4:	2e c0       	rjmp	.+92     	; 0x2242 <MOTOR_Goto+0x92>
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	88 23       	and	r24, r24
    21ea:	71 f4       	brne	.+28     	; 0x2208 <MOTOR_Goto+0x58>
    21ec:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <MOTOR_PosStop+0x1>
    21f0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <MOTOR_PosStop>
    21f4:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    21f8:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    21fc:	c2 96       	adiw	r24, 0x32	; 50
    21fe:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <MOTOR_PosAct+0x1>
    2202:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <MOTOR_PosAct>
    2206:	1d c0       	rjmp	.+58     	; 0x2242 <MOTOR_Goto+0x92>
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	48 2f       	mov	r20, r24
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <MOTOR_PosMax>
    2212:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <MOTOR_PosMax+0x1>
    2216:	42 9f       	mul	r20, r18
    2218:	c0 01       	movw	r24, r0
    221a:	43 9f       	mul	r20, r19
    221c:	90 0d       	add	r25, r0
    221e:	52 9f       	mul	r21, r18
    2220:	90 0d       	add	r25, r0
    2222:	11 24       	eor	r1, r1
    2224:	96 95       	lsr	r25
    2226:	87 95       	ror	r24
    2228:	96 95       	lsr	r25
    222a:	87 95       	ror	r24
    222c:	9c 01       	movw	r18, r24
    222e:	ab e7       	ldi	r26, 0x7B	; 123
    2230:	b4 e1       	ldi	r27, 0x14	; 20
    2232:	0e 94 ef 18 	call	0x31de	; 0x31de <__umulhisi3>
    2236:	96 95       	lsr	r25
    2238:	87 95       	ror	r24
    223a:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <MOTOR_PosStop+0x1>
    223e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <MOTOR_PosStop>
    2242:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    2246:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    224a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <MOTOR_PosStop>
    224e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <MOTOR_PosStop+0x1>
    2252:	82 17       	cp	r24, r18
    2254:	93 07       	cpc	r25, r19
    2256:	28 f4       	brcc	.+10     	; 0x2262 <MOTOR_Goto+0xb2>
    2258:	6a 81       	ldd	r22, Y+2	; 0x02
    225a:	82 e0       	ldi	r24, 0x02	; 2
    225c:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <MOTOR_Goto+0xd0>
    2262:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    2266:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    226a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <MOTOR_PosStop>
    226e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <MOTOR_PosStop+0x1>
    2272:	28 17       	cp	r18, r24
    2274:	39 07       	cpc	r19, r25
    2276:	20 f4       	brcc	.+8      	; 0x2280 <MOTOR_Goto+0xd0>
    2278:	6a 81       	ldd	r22, Y+2	; 0x02
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <MOTOR_Goto+0xd6>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret

00002290 <MOTOR_Calibrate>:
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	00 d0       	rcall	.+0      	; 0x2296 <MOTOR_Calibrate+0x6>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <MOTOR_Calibrate+0x8>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	8b 83       	std	Y+3, r24	; 0x03
    229e:	6c 83       	std	Y+4, r22	; 0x04
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	83 33       	cpi	r24, 0x33	; 51
    22a4:	08 f4       	brcc	.+2      	; 0x22a8 <MOTOR_Calibrate+0x18>
    22a6:	77 c0       	rjmp	.+238    	; 0x2396 <MOTOR_Calibrate+0x106>
    22a8:	88 ee       	ldi	r24, 0xE8	; 232
    22aa:	93 e0       	ldi	r25, 0x03	; 3
    22ac:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <MOTOR_PosAct+0x1>
    22b0:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <MOTOR_PosAct>
    22b4:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <MOTOR_PosStop+0x1>
    22b8:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <MOTOR_PosStop>
    22bc:	6c 81       	ldd	r22, Y+4	; 0x04
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    22c4:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    22c8:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	88 ec       	ldi	r24, 0xC8	; 200
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <delay>
    22d8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    22dc:	88 23       	and	r24, r24
    22de:	69 f0       	breq	.+26     	; 0x22fa <MOTOR_Calibrate+0x6a>
    22e0:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    22e4:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    22e8:	29 81       	ldd	r18, Y+1	; 0x01
    22ea:	3a 81       	ldd	r19, Y+2	; 0x02
    22ec:	28 17       	cp	r18, r24
    22ee:	39 07       	cpc	r19, r25
    22f0:	21 f0       	breq	.+8      	; 0x22fa <MOTOR_Calibrate+0x6a>
    22f2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <MOTOR_Mounted>
    22f6:	88 23       	and	r24, r24
    22f8:	29 f7       	brne	.-54     	; 0x22c4 <MOTOR_Calibrate+0x34>
    22fa:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    22fe:	88 23       	and	r24, r24
    2300:	21 f0       	breq	.+8      	; 0x230a <MOTOR_Calibrate+0x7a>
    2302:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <MOTOR_Mounted>
    2306:	88 23       	and	r24, r24
    2308:	11 f4       	brne	.+4      	; 0x230e <MOTOR_Calibrate+0x7e>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	c9 c0       	rjmp	.+402    	; 0x24a0 <MOTOR_Calibrate+0x210>
    230e:	6c 81       	ldd	r22, Y+4	; 0x04
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2316:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <MOTOR_PosAct+0x1>
    231a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <MOTOR_PosAct>
    231e:	88 ee       	ldi	r24, 0xE8	; 232
    2320:	93 e0       	ldi	r25, 0x03	; 3
    2322:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <MOTOR_PosStop+0x1>
    2326:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <MOTOR_PosStop>
    232a:	6c 81       	ldd	r22, Y+4	; 0x04
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2332:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    2336:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	88 ec       	ldi	r24, 0xC8	; 200
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 54 10 	call	0x20a8	; 0x20a8 <delay>
    2346:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    234a:	88 23       	and	r24, r24
    234c:	69 f0       	breq	.+26     	; 0x2368 <MOTOR_Calibrate+0xd8>
    234e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    2352:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    2356:	29 81       	ldd	r18, Y+1	; 0x01
    2358:	3a 81       	ldd	r19, Y+2	; 0x02
    235a:	28 17       	cp	r18, r24
    235c:	39 07       	cpc	r19, r25
    235e:	21 f0       	breq	.+8      	; 0x2368 <MOTOR_Calibrate+0xd8>
    2360:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <MOTOR_Mounted>
    2364:	88 23       	and	r24, r24
    2366:	29 f7       	brne	.-54     	; 0x2332 <MOTOR_Calibrate+0xa2>
    2368:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    236c:	88 23       	and	r24, r24
    236e:	21 f0       	breq	.+8      	; 0x2378 <MOTOR_Calibrate+0xe8>
    2370:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <MOTOR_Mounted>
    2374:	88 23       	and	r24, r24
    2376:	11 f4       	brne	.+4      	; 0x237c <MOTOR_Calibrate+0xec>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	92 c0       	rjmp	.+292    	; 0x24a0 <MOTOR_Calibrate+0x210>
    237c:	6c 81       	ldd	r22, Y+4	; 0x04
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2384:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    2388:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    238c:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <MOTOR_PosMax+0x1>
    2390:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <MOTOR_PosMax>
    2394:	80 c0       	rjmp	.+256    	; 0x2496 <MOTOR_Calibrate+0x206>
    2396:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <MOTOR_PosAct+0x1>
    239a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <MOTOR_PosAct>
    239e:	88 ee       	ldi	r24, 0xE8	; 232
    23a0:	93 e0       	ldi	r25, 0x03	; 3
    23a2:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <MOTOR_PosStop+0x1>
    23a6:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <MOTOR_PosStop>
    23aa:	6c 81       	ldd	r22, Y+4	; 0x04
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    23b2:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    23b6:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	88 ec       	ldi	r24, 0xC8	; 200
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <delay>
    23c6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    23ca:	88 23       	and	r24, r24
    23cc:	69 f0       	breq	.+26     	; 0x23e8 <MOTOR_Calibrate+0x158>
    23ce:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    23d2:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    23d6:	29 81       	ldd	r18, Y+1	; 0x01
    23d8:	3a 81       	ldd	r19, Y+2	; 0x02
    23da:	28 17       	cp	r18, r24
    23dc:	39 07       	cpc	r19, r25
    23de:	21 f0       	breq	.+8      	; 0x23e8 <MOTOR_Calibrate+0x158>
    23e0:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <MOTOR_Mounted>
    23e4:	88 23       	and	r24, r24
    23e6:	29 f7       	brne	.-54     	; 0x23b2 <MOTOR_Calibrate+0x122>
    23e8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    23ec:	88 23       	and	r24, r24
    23ee:	21 f0       	breq	.+8      	; 0x23f8 <MOTOR_Calibrate+0x168>
    23f0:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <MOTOR_Mounted>
    23f4:	88 23       	and	r24, r24
    23f6:	11 f4       	brne	.+4      	; 0x23fc <MOTOR_Calibrate+0x16c>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	52 c0       	rjmp	.+164    	; 0x24a0 <MOTOR_Calibrate+0x210>
    23fc:	6c 81       	ldd	r22, Y+4	; 0x04
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2404:	88 ee       	ldi	r24, 0xE8	; 232
    2406:	93 e0       	ldi	r25, 0x03	; 3
    2408:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <MOTOR_PosAct+0x1>
    240c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <MOTOR_PosAct>
    2410:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <MOTOR_PosStop+0x1>
    2414:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <MOTOR_PosStop>
    2418:	6c 81       	ldd	r22, Y+4	; 0x04
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2420:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    2424:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	88 ec       	ldi	r24, 0xC8	; 200
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 94 54 10 	call	0x20a8	; 0x20a8 <delay>
    2434:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    2438:	88 23       	and	r24, r24
    243a:	69 f0       	breq	.+26     	; 0x2456 <MOTOR_Calibrate+0x1c6>
    243c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    2440:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    2444:	29 81       	ldd	r18, Y+1	; 0x01
    2446:	3a 81       	ldd	r19, Y+2	; 0x02
    2448:	28 17       	cp	r18, r24
    244a:	39 07       	cpc	r19, r25
    244c:	21 f0       	breq	.+8      	; 0x2456 <MOTOR_Calibrate+0x1c6>
    244e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <MOTOR_Mounted>
    2452:	88 23       	and	r24, r24
    2454:	29 f7       	brne	.-54     	; 0x2420 <MOTOR_Calibrate+0x190>
    2456:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    245a:	88 23       	and	r24, r24
    245c:	21 f0       	breq	.+8      	; 0x2466 <MOTOR_Calibrate+0x1d6>
    245e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <MOTOR_Mounted>
    2462:	88 23       	and	r24, r24
    2464:	11 f4       	brne	.+4      	; 0x246a <MOTOR_Calibrate+0x1da>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	1b c0       	rjmp	.+54     	; 0x24a0 <MOTOR_Calibrate+0x210>
    246a:	6c 81       	ldd	r22, Y+4	; 0x04
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
    2472:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    2476:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    247a:	28 ee       	ldi	r18, 0xE8	; 232
    247c:	33 e0       	ldi	r19, 0x03	; 3
    247e:	a9 01       	movw	r20, r18
    2480:	48 1b       	sub	r20, r24
    2482:	59 0b       	sbc	r21, r25
    2484:	ca 01       	movw	r24, r20
    2486:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <MOTOR_PosMax+0x1>
    248a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <MOTOR_PosMax>
    248e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <MOTOR_PosAct+0x1>
    2492:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <MOTOR_PosAct>
    2496:	6c 81       	ldd	r22, Y+4	; 0x04
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <MOTOR_Goto>
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <MOTOR_Control>:
       stop:     0    0    0    0                0      off
       open:     0    1    1   invert. mode      1      on
       close:    1    0    0   non inv mode      1      on       \endverbatim
 ******************************************************************************/
void MOTOR_Control(motor_dir_t direction, motor_speed_t speed)
{
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <MOTOR_Control+0x6>
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	6a 83       	std	Y+2, r22	; 0x02
    if (direction == stop){                             // motor off
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	88 23       	and	r24, r24
    24c0:	99 f5       	brne	.+102    	; 0x2528 <MOTOR_Control+0x7a>
        // photo eye
        PCMSK0 &= ~(1<<PCINT4);                         // deactivate interrupt
    24c2:	8b e6       	ldi	r24, 0x6B	; 107
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	2b e6       	ldi	r18, 0x6B	; 107
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	f9 01       	movw	r30, r18
    24cc:	20 81       	ld	r18, Z
    24ce:	2f 7e       	andi	r18, 0xEF	; 239
    24d0:	fc 01       	movw	r30, r24
    24d2:	20 83       	st	Z, r18
        MOTOR_HR20_PE3_P &= ~(1<<MOTOR_HR20_PE3);       // deactivate photo eye
    24d4:	8e e2       	ldi	r24, 0x2E	; 46
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	2e e2       	ldi	r18, 0x2E	; 46
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	f9 01       	movw	r30, r18
    24de:	20 81       	ld	r18, Z
    24e0:	27 7f       	andi	r18, 0xF7	; 247
    24e2:	fc 01       	movw	r30, r24
    24e4:	20 83       	st	Z, r18
        // set all pins of H-Bridge to LOW
        MOTOR_HR20_PG3_P &= ~(1<<MOTOR_HR20_PG3);       // PG3 LOW
    24e6:	84 e3       	ldi	r24, 0x34	; 52
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	24 e3       	ldi	r18, 0x34	; 52
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	f9 01       	movw	r30, r18
    24f0:	20 81       	ld	r18, Z
    24f2:	27 7f       	andi	r18, 0xF7	; 247
    24f4:	fc 01       	movw	r30, r24
    24f6:	20 83       	st	Z, r18
        MOTOR_HR20_PG4_P &= ~(1<<MOTOR_HR20_PG4);       // PG4 LOW
    24f8:	84 e3       	ldi	r24, 0x34	; 52
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	24 e3       	ldi	r18, 0x34	; 52
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	f9 01       	movw	r30, r18
    2502:	20 81       	ld	r18, Z
    2504:	2f 7e       	andi	r18, 0xEF	; 239
    2506:	fc 01       	movw	r30, r24
    2508:	20 83       	st	Z, r18
        MOTOR_HR20_PB7_P &= ~(1<<MOTOR_HR20_PB7);       // PB7 LOW
    250a:	85 e2       	ldi	r24, 0x25	; 37
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	25 e2       	ldi	r18, 0x25	; 37
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	f9 01       	movw	r30, r18
    2514:	20 81       	ld	r18, Z
    2516:	2f 77       	andi	r18, 0x7F	; 127
    2518:	fc 01       	movw	r30, r24
    251a:	20 83       	st	Z, r18
        // stop pwm signal
        TCCR0A = (1<<WGM00) | (1<<WGM01); // 0b 0000 0011
    251c:	84 e4       	ldi	r24, 0x44	; 68
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	28 e4       	ldi	r18, 0x48	; 72
    2522:	fc 01       	movw	r30, r24
    2524:	20 83       	st	Z, r18
    2526:	6c c0       	rjmp	.+216    	; 0x2600 <MOTOR_Control+0x152>
    } else {                                            // motor on
        if (MOTOR_Dir != direction){
    2528:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <MOTOR_Dir>
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	98 17       	cp	r25, r24
    2530:	09 f4       	brne	.+2      	; 0x2534 <MOTOR_Control+0x86>
    2532:	66 c0       	rjmp	.+204    	; 0x2600 <MOTOR_Control+0x152>
            // photo eye
            MOTOR_HR20_PE3_P |= (1<<MOTOR_HR20_PE3);    // activate photo eye
    2534:	8e e2       	ldi	r24, 0x2E	; 46
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	2e e2       	ldi	r18, 0x2E	; 46
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	f9 01       	movw	r30, r18
    253e:	20 81       	ld	r18, Z
    2540:	28 60       	ori	r18, 0x08	; 8
    2542:	fc 01       	movw	r30, r24
    2544:	20 83       	st	Z, r18
            PCMSK0 = (1<<PCINT4);                       // activate interrupt
    2546:	8b e6       	ldi	r24, 0x6B	; 107
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	20 e1       	ldi	r18, 0x10	; 16
    254c:	fc 01       	movw	r30, r24
    254e:	20 83       	st	Z, r18
            // set pwm value to percentage ( factor 255/100)
            if (speed == full){
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	88 23       	and	r24, r24
    2554:	31 f4       	brne	.+12     	; 0x2562 <MOTOR_Control+0xb4>
                OCR0A = MOTOR_FULL_PWM * 2.55;
    2556:	87 e4       	ldi	r24, 0x47	; 71
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	22 ef       	ldi	r18, 0xF2	; 242
    255c:	fc 01       	movw	r30, r24
    255e:	20 83       	st	Z, r18
    2560:	05 c0       	rjmp	.+10     	; 0x256c <MOTOR_Control+0xbe>
            } else {
                OCR0A = MOTOR_QUIET_PWM * 2.55;
    2562:	87 e4       	ldi	r24, 0x47	; 71
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	22 eb       	ldi	r18, 0xB2	; 178
    2568:	fc 01       	movw	r30, r24
    256a:	20 83       	st	Z, r18
            }
            // Reset last Position for MOTOR_CheckBlocked
            MOTOR_PosLast = 0xffff;
    256c:	8f ef       	ldi	r24, 0xFF	; 255
    256e:	9f ef       	ldi	r25, 0xFF	; 255
    2570:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <MOTOR_PosLast+0x1>
    2574:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <MOTOR_PosLast>
            // open
            if ( direction == close) {
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	82 30       	cpi	r24, 0x02	; 2
    257c:	09 f5       	brne	.+66     	; 0x25c0 <MOTOR_Control+0x112>
                // set pins of H-Bridge
                MOTOR_HR20_PG3_P |=  (1<<MOTOR_HR20_PG3);   // PG3 HIGH
    257e:	84 e3       	ldi	r24, 0x34	; 52
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	24 e3       	ldi	r18, 0x34	; 52
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	f9 01       	movw	r30, r18
    2588:	20 81       	ld	r18, Z
    258a:	28 60       	ori	r18, 0x08	; 8
    258c:	fc 01       	movw	r30, r24
    258e:	20 83       	st	Z, r18
                MOTOR_HR20_PG4_P &= ~(1<<MOTOR_HR20_PG4);   // PG4 LOW
    2590:	84 e3       	ldi	r24, 0x34	; 52
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	24 e3       	ldi	r18, 0x34	; 52
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	f9 01       	movw	r30, r18
    259a:	20 81       	ld	r18, Z
    259c:	2f 7e       	andi	r18, 0xEF	; 239
    259e:	fc 01       	movw	r30, r24
    25a0:	20 83       	st	Z, r18
                MOTOR_HR20_PB7_P &= ~(1<<MOTOR_HR20_PB7);   // PB7 LOW
    25a2:	85 e2       	ldi	r24, 0x25	; 37
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	25 e2       	ldi	r18, 0x25	; 37
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	f9 01       	movw	r30, r18
    25ac:	20 81       	ld	r18, Z
    25ae:	2f 77       	andi	r18, 0x7F	; 127
    25b0:	fc 01       	movw	r30, r24
    25b2:	20 83       	st	Z, r18
                // set PWM non inverting mode
                TCCR0A = (1<<WGM00) | (1<<WGM01) | (1<<COM0A1) | (1<<CS00);
    25b4:	84 e4       	ldi	r24, 0x44	; 68
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	29 e6       	ldi	r18, 0x69	; 105
    25ba:	fc 01       	movw	r30, r24
    25bc:	20 83       	st	Z, r18
    25be:	20 c0       	rjmp	.+64     	; 0x2600 <MOTOR_Control+0x152>
            // close
            } else {
                // set pins of H-Bridge
                MOTOR_HR20_PG3_P &= ~(1<<MOTOR_HR20_PG3);   // PG3 LOW
    25c0:	84 e3       	ldi	r24, 0x34	; 52
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	24 e3       	ldi	r18, 0x34	; 52
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	f9 01       	movw	r30, r18
    25ca:	20 81       	ld	r18, Z
    25cc:	27 7f       	andi	r18, 0xF7	; 247
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
                MOTOR_HR20_PG4_P |=  (1<<MOTOR_HR20_PG4);   // PG4 HIGH
    25d2:	84 e3       	ldi	r24, 0x34	; 52
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	24 e3       	ldi	r18, 0x34	; 52
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	f9 01       	movw	r30, r18
    25dc:	20 81       	ld	r18, Z
    25de:	20 61       	ori	r18, 0x10	; 16
    25e0:	fc 01       	movw	r30, r24
    25e2:	20 83       	st	Z, r18
                MOTOR_HR20_PB7_P |=  (1<<MOTOR_HR20_PB7);   // PB7 HIGH
    25e4:	85 e2       	ldi	r24, 0x25	; 37
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	25 e2       	ldi	r18, 0x25	; 37
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	f9 01       	movw	r30, r18
    25ee:	20 81       	ld	r18, Z
    25f0:	20 68       	ori	r18, 0x80	; 128
    25f2:	fc 01       	movw	r30, r24
    25f4:	20 83       	st	Z, r18
                // set PWM inverting mode
                TCCR0A=(1<<WGM00)|(1<<WGM01)|(1<<COM0A1)|(1<<COM0A0)|(1<<CS00);
    25f6:	84 e4       	ldi	r24, 0x44	; 68
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	29 e7       	ldi	r18, 0x79	; 121
    25fc:	fc 01       	movw	r30, r24
    25fe:	20 83       	st	Z, r18
            }
        }
    }
    // set new speed and direction
    MOTOR_Dir = direction;
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <MOTOR_Dir>
}
    2606:	00 00       	nop
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <MOTOR_CheckBlocked>:
 * \note checks if \ref MOTOR_PosAct == \ref MOTOR_PosLast
 *
 * \note must be called at least every 1s <BR>
 *       not quicker than 500ms
 ******************************************************************************/
void MOTOR_CheckBlocked(void){
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    // blocked if last position == actual position
    if (MOTOR_PosAct == MOTOR_PosLast){
    261a:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    261e:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    2622:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <MOTOR_PosLast>
    2626:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <MOTOR_PosLast+0x1>
    262a:	28 17       	cp	r18, r24
    262c:	39 07       	cpc	r19, r25
    262e:	29 f4       	brne	.+10     	; 0x263a <MOTOR_CheckBlocked+0x28>
        MOTOR_Control(stop, full);
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
        // Send out notify to com.c
      	//COM_setNotify(NOTIFY_MOTOR_BLOCKED);
    } else {
        MOTOR_PosLast = MOTOR_PosAct;
    }
}
    2638:	08 c0       	rjmp	.+16     	; 0x264a <MOTOR_CheckBlocked+0x38>
    if (MOTOR_PosAct == MOTOR_PosLast){
        MOTOR_Control(stop, full);
        // Send out notify to com.c
      	//COM_setNotify(NOTIFY_MOTOR_BLOCKED);
    } else {
        MOTOR_PosLast = MOTOR_PosAct;
    263a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    263e:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    2642:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <MOTOR_PosLast+0x1>
    2646:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <MOTOR_PosLast>
    }
}
    264a:	00 00       	nop
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	08 95       	ret

00002652 <__vector_2>:
 *
 * \note count light eye impulss: \ref MOTOR_PosAct
 *
 * \note stops the motor if \ref MOTOR_PosStop is reached
 ******************************************************************************/
ISR (PCINT0_vect){
    2652:	1f 92       	push	r1
    2654:	0f 92       	push	r0
    2656:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    265a:	0f 92       	push	r0
    265c:	11 24       	eor	r1, r1
    265e:	2f 93       	push	r18
    2660:	3f 93       	push	r19
    2662:	4f 93       	push	r20
    2664:	5f 93       	push	r21
    2666:	6f 93       	push	r22
    2668:	7f 93       	push	r23
    266a:	8f 93       	push	r24
    266c:	9f 93       	push	r25
    266e:	af 93       	push	r26
    2670:	bf 93       	push	r27
    2672:	ef 93       	push	r30
    2674:	ff 93       	push	r31
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    // count only on HIGH impulses
    if (((PINE & (1<<PE4)) != 0)) {
    267e:	8c e2       	ldi	r24, 0x2C	; 44
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	fc 01       	movw	r30, r24
    2684:	80 81       	ld	r24, Z
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	80 71       	andi	r24, 0x10	; 16
    268c:	99 27       	eor	r25, r25
    268e:	89 2b       	or	r24, r25
    2690:	a9 f1       	breq	.+106    	; 0x26fc <__vector_2+0xaa>
        if (MOTOR_Dir == open) {
    2692:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <MOTOR_Dir>
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	c9 f4       	brne	.+50     	; 0x26cc <__vector_2+0x7a>
            MOTOR_PosAct++;
    269a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    269e:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <MOTOR_PosAct+0x1>
    26a8:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <MOTOR_PosAct>
            if (!(MOTOR_PosAct < MOTOR_PosStop)){
    26ac:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    26b0:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    26b4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <MOTOR_PosStop>
    26b8:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <MOTOR_PosStop+0x1>
    26bc:	28 17       	cp	r18, r24
    26be:	39 07       	cpc	r19, r25
    26c0:	e8 f0       	brcs	.+58     	; 0x26fc <__vector_2+0xaa>
                MOTOR_Control(stop, full);
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
            if (!(MOTOR_PosAct > MOTOR_PosStop)){
                MOTOR_Control(stop, full);
            }
        }
    }
}
    26ca:	18 c0       	rjmp	.+48     	; 0x26fc <__vector_2+0xaa>
            MOTOR_PosAct++;
            if (!(MOTOR_PosAct < MOTOR_PosStop)){
                MOTOR_Control(stop, full);
            }
        } else {
            MOTOR_PosAct--;
    26cc:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    26d0:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <MOTOR_PosAct+0x1>
    26da:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <MOTOR_PosAct>
            if (!(MOTOR_PosAct > MOTOR_PosStop)){
    26de:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <MOTOR_PosAct>
    26e2:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <MOTOR_PosAct+0x1>
    26e6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <MOTOR_PosStop>
    26ea:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <MOTOR_PosStop+0x1>
    26ee:	82 17       	cp	r24, r18
    26f0:	93 07       	cpc	r25, r19
    26f2:	20 f0       	brcs	.+8      	; 0x26fc <__vector_2+0xaa>
                MOTOR_Control(stop, full);
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	0e 94 57 12 	call	0x24ae	; 0x24ae <MOTOR_Control>
            }
        }
    }
}
    26fc:	00 00       	nop
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	ff 91       	pop	r31
    2704:	ef 91       	pop	r30
    2706:	bf 91       	pop	r27
    2708:	af 91       	pop	r26
    270a:	9f 91       	pop	r25
    270c:	8f 91       	pop	r24
    270e:	7f 91       	pop	r23
    2710:	6f 91       	pop	r22
    2712:	5f 91       	pop	r21
    2714:	4f 91       	pop	r20
    2716:	3f 91       	pop	r19
    2718:	2f 91       	pop	r18
    271a:	0f 90       	pop	r0
    271c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2720:	0f 90       	pop	r0
    2722:	1f 90       	pop	r1
    2724:	18 95       	reti

00002726 <RTC_Init>:
	
	// Restore old date
	RTC_SetYear(old_yy);
	RTC_SetMonth(old_mm);
	return false;
}
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	00 d0       	rcall	.+0      	; 0x272c <RTC_Init+0x6>
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <RTC_DowTimerCallbackFunc+0x1>
    273c:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <RTC_DowTimerCallbackFunc>
    2740:	80 e7       	ldi	r24, 0x70	; 112
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	20 e7       	ldi	r18, 0x70	; 112
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	f9 01       	movw	r30, r18
    274a:	20 81       	ld	r18, Z
    274c:	2e 7f       	andi	r18, 0xFE	; 254
    274e:	fc 01       	movw	r30, r24
    2750:	20 83       	st	Z, r18
    2752:	86 eb       	ldi	r24, 0xB6	; 182
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	28 e0       	ldi	r18, 0x08	; 8
    2758:	fc 01       	movw	r30, r24
    275a:	20 83       	st	Z, r18
    275c:	82 eb       	ldi	r24, 0xB2	; 178
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	fc 01       	movw	r30, r24
    2762:	10 82       	st	Z, r1
    2764:	80 eb       	ldi	r24, 0xB0	; 176
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	20 eb       	ldi	r18, 0xB0	; 176
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	f9 01       	movw	r30, r18
    276e:	20 81       	ld	r18, Z
    2770:	25 60       	ori	r18, 0x05	; 5
    2772:	fc 01       	movw	r30, r24
    2774:	20 83       	st	Z, r18
    2776:	00 00       	nop
    2778:	86 eb       	ldi	r24, 0xB6	; 182
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	fc 01       	movw	r30, r24
    277e:	80 81       	ld	r24, Z
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9c 01       	movw	r18, r24
    2786:	21 70       	andi	r18, 0x01	; 1
    2788:	33 27       	eor	r19, r19
    278a:	86 eb       	ldi	r24, 0xB6	; 182
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	fc 01       	movw	r30, r24
    2790:	80 81       	ld	r24, Z
    2792:	88 2f       	mov	r24, r24
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	84 70       	andi	r24, 0x04	; 4
    2798:	99 27       	eor	r25, r25
    279a:	82 2b       	or	r24, r18
    279c:	93 2b       	or	r25, r19
    279e:	89 2b       	or	r24, r25
    27a0:	59 f7       	brne	.-42     	; 0x2778 <RTC_Init+0x52>
    27a2:	87 e3       	ldi	r24, 0x37	; 55
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	2f ef       	ldi	r18, 0xFF	; 255
    27a8:	fc 01       	movw	r30, r24
    27aa:	20 83       	st	Z, r18
    27ac:	80 e7       	ldi	r24, 0x70	; 112
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	20 e7       	ldi	r18, 0x70	; 112
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	f9 01       	movw	r30, r18
    27b6:	20 81       	ld	r18, Z
    27b8:	21 60       	ori	r18, 0x01	; 1
    27ba:	fc 01       	movw	r30, r24
    27bc:	20 83       	st	Z, r18
    27be:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <RTC_Ticks>
    27c2:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <RTC_Ticks+0x1>
    27c6:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <RTC_Ticks+0x2>
    27ca:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <RTC_Ticks+0x3>
    27ce:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <RTC_hh>
    27d2:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <RTC_mm>
    27d6:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <RTC_ss>
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <RTC_DD>
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <RTC_MM>
    27e6:	88 e0       	ldi	r24, 0x08	; 8
    27e8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <RTC_YY>
    27ec:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <RTC_SetDayOfWeek>
    27f0:	00 00       	nop
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	08 95       	ret

000027fc <RTC_SetDay>:
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	1f 92       	push	r1
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	88 23       	and	r24, r24
    280c:	31 f0       	breq	.+12     	; 0x281a <RTC_SetDay+0x1e>
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	80 32       	cpi	r24, 0x20	; 32
    2812:	18 f4       	brcc	.+6      	; 0x281a <RTC_SetDay+0x1e>
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <RTC_DD>
    281a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <RTC_SetDayOfWeek>
    281e:	00 00       	nop
    2820:	0f 90       	pop	r0
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	08 95       	ret

00002828 <RTC_SetMonth>:
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	1f 92       	push	r1
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	89 83       	std	Y+1, r24	; 0x01
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	88 23       	and	r24, r24
    2838:	31 f0       	breq	.+12     	; 0x2846 <RTC_SetMonth+0x1e>
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	8d 30       	cpi	r24, 0x0D	; 13
    283e:	18 f4       	brcc	.+6      	; 0x2846 <RTC_SetMonth+0x1e>
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <RTC_MM>
    2846:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <RTC_SetDayOfWeek>
    284a:	00 00       	nop
    284c:	0f 90       	pop	r0
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	08 95       	ret

00002854 <RTC_SetYear>:
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	1f 92       	push	r1
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <RTC_YY>
    2866:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <RTC_SetDayOfWeek>
    286a:	00 00       	nop
    286c:	0f 90       	pop	r0
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	08 95       	ret

00002874 <RTC_SetHour>:
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	1f 92       	push	r1
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	88 31       	cpi	r24, 0x18	; 24
    2884:	18 f4       	brcc	.+6      	; 0x288c <RTC_SetHour+0x18>
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RTC_hh>
    288c:	00 00       	nop
    288e:	0f 90       	pop	r0
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	08 95       	ret

00002896 <RTC_SetMinute>:
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	1f 92       	push	r1
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	8c 33       	cpi	r24, 0x3C	; 60
    28a6:	18 f4       	brcc	.+6      	; 0x28ae <RTC_SetMinute+0x18>
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <RTC_mm>
    28ae:	00 00       	nop
    28b0:	0f 90       	pop	r0
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	08 95       	ret

000028b8 <RTC_SetSecond>:
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	1f 92       	push	r1
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	8c 33       	cpi	r24, 0x3C	; 60
    28c8:	18 f4       	brcc	.+6      	; 0x28d0 <RTC_SetSecond+0x18>
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <RTC_ss>
    28d0:	00 00       	nop
    28d2:	0f 90       	pop	r0
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <RTC_DowTimerSet>:
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <RTC_DowTimerSet+0x6>
    28e0:	1f 92       	push	r1
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	6a 83       	std	Y+2, r22	; 0x02
    28ea:	4b 83       	std	Y+3, r20	; 0x03
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	22 0f       	add	r18, r18
    28fe:	33 1f       	adc	r19, r19
    2900:	82 0f       	add	r24, r18
    2902:	93 1f       	adc	r25, r19
    2904:	84 52       	subi	r24, 0x24	; 36
    2906:	9e 4f       	sbci	r25, 0xFE	; 254
    2908:	2b 81       	ldd	r18, Y+3	; 0x03
    290a:	fc 01       	movw	r30, r24
    290c:	20 83       	st	Z, r18
    290e:	00 00       	nop
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	08 95       	ret

0000291c <RTC_DowTimerGetActualIndex>:
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	00 d0       	rcall	.+0      	; 0x2922 <RTC_DowTimerGetActualIndex+0x6>
    2922:	00 d0       	rcall	.+0      	; 0x2924 <RTC_DowTimerGetActualIndex+0x8>
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	1b 82       	std	Y+3, r1	; 0x03
    292a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <RTC_hh>
    292e:	88 0f       	add	r24, r24
    2930:	98 2f       	mov	r25, r24
    2932:	99 0f       	add	r25, r25
    2934:	99 0f       	add	r25, r25
    2936:	98 0f       	add	r25, r24
    2938:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <RTC_mm>
    293c:	8d ec       	ldi	r24, 0xCD	; 205
    293e:	28 9f       	mul	r18, r24
    2940:	81 2d       	mov	r24, r1
    2942:	11 24       	eor	r1, r1
    2944:	86 95       	lsr	r24
    2946:	86 95       	lsr	r24
    2948:	86 95       	lsr	r24
    294a:	89 0f       	add	r24, r25
    294c:	8c 83       	std	Y+4, r24	; 0x04
    294e:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <RTC_DowTimerGetStartOfDay>
    2952:	8a 83       	std	Y+2, r24	; 0x02
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <RTC_DowTimerGetActualIndex+0xbc>
    295a:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RTC_DOW>
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	22 0f       	add	r18, r18
    296a:	33 1f       	adc	r19, r19
    296c:	22 0f       	add	r18, r18
    296e:	33 1f       	adc	r19, r19
    2970:	82 0f       	add	r24, r18
    2972:	93 1f       	adc	r25, r19
    2974:	84 52       	subi	r24, 0x24	; 36
    2976:	9e 4f       	sbci	r25, 0xFE	; 254
    2978:	fc 01       	movw	r30, r24
    297a:	90 81       	ld	r25, Z
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	89 17       	cp	r24, r25
    2980:	40 f5       	brcc	.+80     	; 0x29d2 <RTC_DowTimerGetActualIndex+0xb6>
    2982:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RTC_DOW>
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	88 2f       	mov	r24, r24
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	22 0f       	add	r18, r18
    2992:	33 1f       	adc	r19, r19
    2994:	22 0f       	add	r18, r18
    2996:	33 1f       	adc	r19, r19
    2998:	82 0f       	add	r24, r18
    299a:	93 1f       	adc	r25, r19
    299c:	84 52       	subi	r24, 0x24	; 36
    299e:	9e 4f       	sbci	r25, 0xFE	; 254
    29a0:	fc 01       	movw	r30, r24
    29a2:	90 81       	ld	r25, Z
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	89 17       	cp	r24, r25
    29a8:	a0 f0       	brcs	.+40     	; 0x29d2 <RTC_DowTimerGetActualIndex+0xb6>
    29aa:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RTC_DOW>
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	88 2f       	mov	r24, r24
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	22 0f       	add	r18, r18
    29ba:	33 1f       	adc	r19, r19
    29bc:	22 0f       	add	r18, r18
    29be:	33 1f       	adc	r19, r19
    29c0:	82 0f       	add	r24, r18
    29c2:	93 1f       	adc	r25, r19
    29c4:	84 52       	subi	r24, 0x24	; 36
    29c6:	9e 4f       	sbci	r25, 0xFE	; 254
    29c8:	fc 01       	movw	r30, r24
    29ca:	80 81       	ld	r24, Z
    29cc:	8b 83       	std	Y+3, r24	; 0x03
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	8a 83       	std	Y+2, r24	; 0x02
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	89 83       	std	Y+1, r24	; 0x01
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	84 30       	cpi	r24, 0x04	; 4
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <RTC_DowTimerGetActualIndex+0xc4>
    29de:	bd cf       	rjmp	.-134    	; 0x295a <RTC_DowTimerGetActualIndex+0x3e>
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	08 95       	ret

000029f0 <RTC_DowTimerGetStartOfDay>:
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <RTC_DowTimerGetStartOfDay+0x6>
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <RTC_DowTimerGetStartOfDay+0x8>
    29f8:	1f 92       	push	r1
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	1c 82       	std	Y+4, r1	; 0x04
    2a00:	8f ef       	ldi	r24, 0xFF	; 255
    2a02:	8b 83       	std	Y+3, r24	; 0x03
    2a04:	19 82       	std	Y+1, r1	; 0x01
    2a06:	50 c0       	rjmp	.+160    	; 0x2aa8 <RTC_DowTimerGetStartOfDay+0xb8>
    2a08:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RTC_DOW>
    2a0c:	88 2f       	mov	r24, r24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	06 96       	adiw	r24, 0x06	; 6
    2a12:	27 e0       	ldi	r18, 0x07	; 7
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	b9 01       	movw	r22, r18
    2a18:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	8a 83       	std	Y+2, r24	; 0x02
    2a22:	3c c0       	rjmp	.+120    	; 0x2a9c <RTC_DowTimerGetStartOfDay+0xac>
    2a24:	8d 81       	ldd	r24, Y+5	; 0x05
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	22 0f       	add	r18, r18
    2a32:	33 1f       	adc	r19, r19
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	82 0f       	add	r24, r18
    2a3a:	93 1f       	adc	r25, r19
    2a3c:	84 52       	subi	r24, 0x24	; 36
    2a3e:	9e 4f       	sbci	r25, 0xFE	; 254
    2a40:	fc 01       	movw	r30, r24
    2a42:	90 81       	ld	r25, Z
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	89 17       	cp	r24, r25
    2a48:	30 f5       	brcc	.+76     	; 0x2a96 <RTC_DowTimerGetStartOfDay+0xa6>
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	28 2f       	mov	r18, r24
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	22 0f       	add	r18, r18
    2a58:	33 1f       	adc	r19, r19
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	82 0f       	add	r24, r18
    2a60:	93 1f       	adc	r25, r19
    2a62:	84 52       	subi	r24, 0x24	; 36
    2a64:	9e 4f       	sbci	r25, 0xFE	; 254
    2a66:	fc 01       	movw	r30, r24
    2a68:	80 81       	ld	r24, Z
    2a6a:	80 3f       	cpi	r24, 0xF0	; 240
    2a6c:	a0 f4       	brcc	.+40     	; 0x2a96 <RTC_DowTimerGetStartOfDay+0xa6>
    2a6e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RTC_DOW>
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	22 0f       	add	r18, r18
    2a7e:	33 1f       	adc	r19, r19
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	82 0f       	add	r24, r18
    2a86:	93 1f       	adc	r25, r19
    2a88:	84 52       	subi	r24, 0x24	; 36
    2a8a:	9e 4f       	sbci	r25, 0xFE	; 254
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	80 81       	ld	r24, Z
    2a90:	8c 83       	std	Y+4, r24	; 0x04
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	8f 5f       	subi	r24, 0xFF	; 255
    2a9a:	8a 83       	std	Y+2, r24	; 0x02
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	84 30       	cpi	r24, 0x04	; 4
    2aa0:	08 f2       	brcs	.-126    	; 0x2a24 <RTC_DowTimerGetStartOfDay+0x34>
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    2aac:	21 f4       	brne	.+8      	; 0x2ab6 <RTC_DowTimerGetStartOfDay+0xc6>
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	87 30       	cpi	r24, 0x07	; 7
    2ab2:	08 f4       	brcc	.+2      	; 0x2ab6 <RTC_DowTimerGetStartOfDay+0xc6>
    2ab4:	a9 cf       	rjmp	.-174    	; 0x2a08 <RTC_DowTimerGetStartOfDay+0x18>
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	08 95       	ret

00002ac8 <RTC_AddOneSecond>:
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	1f 92       	push	r1
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <RTC_ss>
    2ad6:	8f 5f       	subi	r24, 0xFF	; 255
    2ad8:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <RTC_ss>
    2adc:	8c 33       	cpi	r24, 0x3C	; 60
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <RTC_AddOneSecond+0x1a>
    2ae0:	92 c0       	rjmp	.+292    	; 0x2c06 <RTC_AddOneSecond+0x13e>
    2ae2:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <RTC_ss>
    2ae6:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <RTC_mm>
    2aea:	8f 5f       	subi	r24, 0xFF	; 255
    2aec:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <RTC_mm>
    2af0:	8c 33       	cpi	r24, 0x3C	; 60
    2af2:	b1 f5       	brne	.+108    	; 0x2b60 <RTC_AddOneSecond+0x98>
    2af4:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <RTC_mm>
    2af8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <RTC_hh>
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RTC_hh>
    2b02:	88 31       	cpi	r24, 0x18	; 24
    2b04:	21 f4       	brne	.+8      	; 0x2b0e <RTC_AddOneSecond+0x46>
    2b06:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <RTC_hh>
    2b0a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <RTC_AddOneDay>
    2b0e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2b12:	83 30       	cpi	r24, 0x03	; 3
    2b14:	69 f4       	brne	.+26     	; 0x2b30 <RTC_AddOneSecond+0x68>
    2b16:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <RTC_hh>
    2b1a:	82 30       	cpi	r24, 0x02	; 2
    2b1c:	49 f4       	brne	.+18     	; 0x2b30 <RTC_AddOneSecond+0x68>
    2b1e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <RTC_IsLastSunday>
    2b22:	88 23       	and	r24, r24
    2b24:	29 f0       	breq	.+10     	; 0x2b30 <RTC_AddOneSecond+0x68>
    2b26:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <RTC_hh>
    2b2a:	8f 5f       	subi	r24, 0xFF	; 255
    2b2c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RTC_hh>
    2b30:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2b34:	8a 30       	cpi	r24, 0x0A	; 10
    2b36:	a1 f4       	brne	.+40     	; 0x2b60 <RTC_AddOneSecond+0x98>
    2b38:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <RTC_hh>
    2b3c:	83 30       	cpi	r24, 0x03	; 3
    2b3e:	81 f4       	brne	.+32     	; 0x2b60 <RTC_AddOneSecond+0x98>
    2b40:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <RTC_DS>
    2b44:	88 23       	and	r24, r24
    2b46:	61 f4       	brne	.+24     	; 0x2b60 <RTC_AddOneSecond+0x98>
    2b48:	0e 94 99 16 	call	0x2d32	; 0x2d32 <RTC_IsLastSunday>
    2b4c:	88 23       	and	r24, r24
    2b4e:	41 f0       	breq	.+16     	; 0x2b60 <RTC_AddOneSecond+0x98>
    2b50:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <RTC_hh>
    2b54:	81 50       	subi	r24, 0x01	; 1
    2b56:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <RTC_hh>
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <RTC_DS>
    2b60:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <RTC_mm>
    2b64:	8d ec       	ldi	r24, 0xCD	; 205
    2b66:	98 9f       	mul	r25, r24
    2b68:	81 2d       	mov	r24, r1
    2b6a:	11 24       	eor	r1, r1
    2b6c:	86 95       	lsr	r24
    2b6e:	86 95       	lsr	r24
    2b70:	86 95       	lsr	r24
    2b72:	88 0f       	add	r24, r24
    2b74:	28 2f       	mov	r18, r24
    2b76:	22 0f       	add	r18, r18
    2b78:	22 0f       	add	r18, r18
    2b7a:	82 0f       	add	r24, r18
    2b7c:	29 2f       	mov	r18, r25
    2b7e:	28 1b       	sub	r18, r24
    2b80:	82 2f       	mov	r24, r18
    2b82:	88 23       	and	r24, r24
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <RTC_AddOneSecond+0xc0>
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <RTC_AddOneSecond+0x13e>
    2b88:	19 82       	std	Y+1, r1	; 0x01
    2b8a:	3a c0       	rjmp	.+116    	; 0x2c00 <RTC_AddOneSecond+0x138>
    2b8c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RTC_DOW>
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	88 2f       	mov	r24, r24
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	22 0f       	add	r18, r18
    2b9c:	33 1f       	adc	r19, r19
    2b9e:	22 0f       	add	r18, r18
    2ba0:	33 1f       	adc	r19, r19
    2ba2:	82 0f       	add	r24, r18
    2ba4:	93 1f       	adc	r25, r19
    2ba6:	84 52       	subi	r24, 0x24	; 36
    2ba8:	9e 4f       	sbci	r25, 0xFE	; 254
    2baa:	fc 01       	movw	r30, r24
    2bac:	80 81       	ld	r24, Z
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <RTC_hh>
    2bb6:	88 2f       	mov	r24, r24
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	ac 01       	movw	r20, r24
    2bc0:	44 0f       	add	r20, r20
    2bc2:	55 1f       	adc	r21, r21
    2bc4:	44 0f       	add	r20, r20
    2bc6:	55 1f       	adc	r21, r21
    2bc8:	48 0f       	add	r20, r24
    2bca:	59 1f       	adc	r21, r25
    2bcc:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <RTC_mm>
    2bd0:	8d ec       	ldi	r24, 0xCD	; 205
    2bd2:	98 9f       	mul	r25, r24
    2bd4:	81 2d       	mov	r24, r1
    2bd6:	11 24       	eor	r1, r1
    2bd8:	86 95       	lsr	r24
    2bda:	86 95       	lsr	r24
    2bdc:	86 95       	lsr	r24
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	84 0f       	add	r24, r20
    2be4:	95 1f       	adc	r25, r21
    2be6:	28 17       	cp	r18, r24
    2be8:	39 07       	cpc	r19, r25
    2bea:	39 f4       	brne	.+14     	; 0x2bfa <RTC_AddOneSecond+0x132>
    2bec:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <RTC_DowTimerCallbackFunc>
    2bf0:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <RTC_DowTimerCallbackFunc+0x1>
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	f9 01       	movw	r30, r18
    2bf8:	09 95       	icall
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	8f 5f       	subi	r24, 0xFF	; 255
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	84 30       	cpi	r24, 0x04	; 4
    2c04:	18 f2       	brcs	.-122    	; 0x2b8c <RTC_AddOneSecond+0xc4>
    2c06:	00 00       	nop
    2c08:	0f 90       	pop	r0
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	08 95       	ret

00002c10 <RTC_AddOneDay>:
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	1f 92       	push	r1
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	0e 94 56 16 	call	0x2cac	; 0x2cac <RTC_DaysOfMonth>
    2c1e:	89 83       	std	Y+1, r24	; 0x01
    2c20:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <RTC_DD>
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <RTC_DD>
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	28 17       	cp	r18, r24
    2c38:	39 07       	cpc	r19, r25
    2c3a:	99 f5       	brne	.+102    	; 0x2ca2 <RTC_AddOneDay+0x92>
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <RTC_DD>
    2c42:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2c46:	8f 5f       	subi	r24, 0xFF	; 255
    2c48:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <RTC_MM>
    2c4c:	8d 30       	cpi	r24, 0x0D	; 13
    2c4e:	41 f4       	brne	.+16     	; 0x2c60 <RTC_AddOneDay+0x50>
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <RTC_MM>
    2c56:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <RTC_YY>
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <RTC_YY>
    2c60:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2c64:	8b 30       	cpi	r24, 0x0B	; 11
    2c66:	11 f4       	brne	.+4      	; 0x2c6c <RTC_AddOneDay+0x5c>
    2c68:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <RTC_DS>
    2c6c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RTC_DOW>
    2c70:	8f 5f       	subi	r24, 0xFF	; 255
    2c72:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <RTC_DOW>
    2c76:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <RTC_DOW>
    2c7a:	85 e2       	ldi	r24, 0x25	; 37
    2c7c:	28 9f       	mul	r18, r24
    2c7e:	81 2d       	mov	r24, r1
    2c80:	11 24       	eor	r1, r1
    2c82:	92 2f       	mov	r25, r18
    2c84:	98 1b       	sub	r25, r24
    2c86:	96 95       	lsr	r25
    2c88:	89 0f       	add	r24, r25
    2c8a:	98 2f       	mov	r25, r24
    2c8c:	96 95       	lsr	r25
    2c8e:	96 95       	lsr	r25
    2c90:	89 2f       	mov	r24, r25
    2c92:	88 0f       	add	r24, r24
    2c94:	88 0f       	add	r24, r24
    2c96:	88 0f       	add	r24, r24
    2c98:	89 1b       	sub	r24, r25
    2c9a:	92 2f       	mov	r25, r18
    2c9c:	98 1b       	sub	r25, r24
    2c9e:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <RTC_DOW>
    2ca2:	00 00       	nop
    2ca4:	0f 90       	pop	r0
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	08 95       	ret

00002cac <RTC_DaysOfMonth>:
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <RTC_DaysOfMonth+0x6>
    2cb2:	1f 92       	push	r1
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	79 f0       	breq	.+30     	; 0x2cde <RTC_DaysOfMonth+0x32>
    2cc0:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	8d 55       	subi	r24, 0x5D	; 93
    2cca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	84 91       	lpm	r24, Z
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	07 c0       	rjmp	.+14     	; 0x2cec <RTC_DaysOfMonth+0x40>
    2cde:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <RTC_NoLeapyear>
    2ce2:	88 23       	and	r24, r24
    2ce4:	11 f0       	breq	.+4      	; 0x2cea <RTC_DaysOfMonth+0x3e>
    2ce6:	8c e1       	ldi	r24, 0x1C	; 28
    2ce8:	01 c0       	rjmp	.+2      	; 0x2cec <RTC_DaysOfMonth+0x40>
    2cea:	8d e1       	ldi	r24, 0x1D	; 29
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	08 95       	ret

00002cf8 <RTC_NoLeapyear>:
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <RTC_YY>
    2d04:	89 e2       	ldi	r24, 0x29	; 41
    2d06:	98 9f       	mul	r25, r24
    2d08:	81 2d       	mov	r24, r1
    2d0a:	11 24       	eor	r1, r1
    2d0c:	82 95       	swap	r24
    2d0e:	8f 70       	andi	r24, 0x0F	; 15
    2d10:	24 e6       	ldi	r18, 0x64	; 100
    2d12:	82 9f       	mul	r24, r18
    2d14:	80 2d       	mov	r24, r0
    2d16:	11 24       	eor	r1, r1
    2d18:	29 2f       	mov	r18, r25
    2d1a:	28 1b       	sub	r18, r24
    2d1c:	82 2f       	mov	r24, r18
    2d1e:	88 23       	and	r24, r24
    2d20:	21 f0       	breq	.+8      	; 0x2d2a <RTC_NoLeapyear+0x32>
    2d22:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <RTC_YY>
    2d26:	83 70       	andi	r24, 0x03	; 3
    2d28:	01 c0       	rjmp	.+2      	; 0x2d2c <RTC_NoLeapyear+0x34>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <RTC_IsLastSunday>:
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <RTC_IsLastSunday+0x6>
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2d40:	83 30       	cpi	r24, 0x03	; 3
    2d42:	29 f4       	brne	.+10     	; 0x2d4e <RTC_IsLastSunday+0x1c>
    2d44:	8f e1       	ldi	r24, 0x1F	; 31
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9a 83       	std	Y+2, r25	; 0x02
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	0b c0       	rjmp	.+22     	; 0x2d64 <RTC_IsLastSunday+0x32>
    2d4e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2d52:	8a 30       	cpi	r24, 0x0A	; 10
    2d54:	29 f4       	brne	.+10     	; 0x2d60 <RTC_IsLastSunday+0x2e>
    2d56:	8e e1       	ldi	r24, 0x1E	; 30
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <RTC_IsLastSunday+0x32>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	18 c0       	rjmp	.+48     	; 0x2d94 <RTC_IsLastSunday+0x62>
    2d64:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <RTC_DD>
    2d68:	88 2f       	mov	r24, r24
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	29 81       	ldd	r18, Y+1	; 0x01
    2d6e:	3a 81       	ldd	r19, Y+2	; 0x02
    2d70:	27 50       	subi	r18, 0x07	; 7
    2d72:	31 09       	sbc	r19, r1
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <RTC_IsLastSunday+0x48>
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	2a 95       	dec	r18
    2d7c:	e2 f7       	brpl	.-8      	; 0x2d76 <RTC_IsLastSunday+0x44>
    2d7e:	89 2b       	or	r24, r25
    2d80:	11 f0       	breq	.+4      	; 0x2d86 <RTC_IsLastSunday+0x54>
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	07 c0       	rjmp	.+14     	; 0x2d94 <RTC_IsLastSunday+0x62>
    2d86:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <RTC_DOW>
    2d8a:	87 30       	cpi	r24, 0x07	; 7
    2d8c:	11 f4       	brne	.+4      	; 0x2d92 <RTC_IsLastSunday+0x60>
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	01 c0       	rjmp	.+2      	; 0x2d94 <RTC_IsLastSunday+0x62>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	08 95       	ret

00002d9e <RTC_SetDayOfWeek>:
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	28 97       	sbiw	r28, 0x08	; 8
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2db6:	88 2f       	mov	r24, r24
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	88 0f       	add	r24, r24
    2dbe:	99 1f       	adc	r25, r25
    2dc0:	81 55       	subi	r24, 0x51	; 81
    2dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc4:	9c 83       	std	Y+4, r25	; 0x04
    2dc6:	8b 83       	std	Y+3, r24	; 0x03
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	9c 81       	ldd	r25, Y+4	; 0x04
    2dcc:	fc 01       	movw	r30, r24
    2dce:	25 91       	lpm	r18, Z+
    2dd0:	34 91       	lpm	r19, Z
    2dd2:	cf 01       	movw	r24, r30
    2dd4:	3e 83       	std	Y+6, r19	; 0x06
    2dd6:	2d 83       	std	Y+5, r18	; 0x05
    2dd8:	9c 83       	std	Y+4, r25	; 0x04
    2dda:	8b 83       	std	Y+3, r24	; 0x03
    2ddc:	2d 81       	ldd	r18, Y+5	; 0x05
    2dde:	3e 81       	ldd	r19, Y+6	; 0x06
    2de0:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <RTC_DD>
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	82 0f       	add	r24, r18
    2dea:	93 1f       	adc	r25, r19
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <RTC_MM>
    2df4:	83 30       	cpi	r24, 0x03	; 3
    2df6:	48 f0       	brcs	.+18     	; 0x2e0a <RTC_SetDayOfWeek+0x6c>
    2df8:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <RTC_NoLeapyear>
    2dfc:	88 23       	and	r24, r24
    2dfe:	29 f4       	brne	.+10     	; 0x2e0a <RTC_SetDayOfWeek+0x6c>
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	01 96       	adiw	r24, 0x01	; 1
    2e06:	9a 83       	std	Y+2, r25	; 0x02
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <RTC_YY>
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <RTC_YY>
    2e16:	88 2f       	mov	r24, r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	99 23       	and	r25, r25
    2e1e:	0c f4       	brge	.+2      	; 0x2e22 <RTC_SetDayOfWeek+0x84>
    2e20:	03 96       	adiw	r24, 0x03	; 3
    2e22:	95 95       	asr	r25
    2e24:	87 95       	ror	r24
    2e26:	95 95       	asr	r25
    2e28:	87 95       	ror	r24
    2e2a:	28 0f       	add	r18, r24
    2e2c:	39 1f       	adc	r19, r25
    2e2e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <RTC_YY>
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	44 e6       	ldi	r20, 0x64	; 100
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	ba 01       	movw	r22, r20
    2e3e:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    2e42:	cb 01       	movw	r24, r22
    2e44:	a9 01       	movw	r20, r18
    2e46:	48 1b       	sub	r20, r24
    2e48:	59 0b       	sbc	r21, r25
    2e4a:	ca 01       	movw	r24, r20
    2e4c:	9c 01       	movw	r18, r24
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	82 0f       	add	r24, r18
    2e54:	93 1f       	adc	r25, r19
    2e56:	98 87       	std	Y+8, r25	; 0x08
    2e58:	8f 83       	std	Y+7, r24	; 0x07
    2e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e5c:	98 85       	ldd	r25, Y+8	; 0x08
    2e5e:	ac 01       	movw	r20, r24
    2e60:	4b 5f       	subi	r20, 0xFB	; 251
    2e62:	5f 4f       	sbci	r21, 0xFF	; 255
    2e64:	9a 01       	movw	r18, r20
    2e66:	a3 e9       	ldi	r26, 0x93	; 147
    2e68:	b4 e2       	ldi	r27, 0x24	; 36
    2e6a:	0e 94 ef 18 	call	0x31de	; 0x31de <__umulhisi3>
    2e6e:	9a 01       	movw	r18, r20
    2e70:	28 1b       	sub	r18, r24
    2e72:	39 0b       	sbc	r19, r25
    2e74:	36 95       	lsr	r19
    2e76:	27 95       	ror	r18
    2e78:	82 0f       	add	r24, r18
    2e7a:	93 1f       	adc	r25, r19
    2e7c:	9c 01       	movw	r18, r24
    2e7e:	36 95       	lsr	r19
    2e80:	27 95       	ror	r18
    2e82:	36 95       	lsr	r19
    2e84:	27 95       	ror	r18
    2e86:	c9 01       	movw	r24, r18
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	82 1b       	sub	r24, r18
    2e96:	93 0b       	sbc	r25, r19
    2e98:	9a 01       	movw	r18, r20
    2e9a:	28 1b       	sub	r18, r24
    2e9c:	39 0b       	sbc	r19, r25
    2e9e:	82 2f       	mov	r24, r18
    2ea0:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <RTC_DOW>
    2ea4:	00 00       	nop
    2ea6:	28 96       	adiw	r28, 0x08	; 8
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	08 95       	ret

00002eb8 <__vector_5>:
 *  - add one second to internal clock
 *  - increment tick counter
 *
 ******************************************************************************/
ISR(TIMER2_OVF_vect)
{
    2eb8:	1f 92       	push	r1
    2eba:	0f 92       	push	r0
    2ebc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2ec0:	0f 92       	push	r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	2f 93       	push	r18
    2ec6:	3f 93       	push	r19
    2ec8:	4f 93       	push	r20
    2eca:	5f 93       	push	r21
    2ecc:	6f 93       	push	r22
    2ece:	7f 93       	push	r23
    2ed0:	8f 93       	push	r24
    2ed2:	9f 93       	push	r25
    2ed4:	af 93       	push	r26
    2ed6:	bf 93       	push	r27
    2ed8:	ef 93       	push	r30
    2eda:	ff 93       	push	r31
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    RTC_Ticks++;          // overflow every 136 Years
    2ee4:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <RTC_Ticks>
    2ee8:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <RTC_Ticks+0x1>
    2eec:	a0 91 d8 01 	lds	r26, 0x01D8	; 0x8001d8 <RTC_Ticks+0x2>
    2ef0:	b0 91 d9 01 	lds	r27, 0x01D9	; 0x8001d9 <RTC_Ticks+0x3>
    2ef4:	01 96       	adiw	r24, 0x01	; 1
    2ef6:	a1 1d       	adc	r26, r1
    2ef8:	b1 1d       	adc	r27, r1
    2efa:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <RTC_Ticks>
    2efe:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <RTC_Ticks+0x1>
    2f02:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <RTC_Ticks+0x2>
    2f06:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <RTC_Ticks+0x3>
    RTC_AddOneSecond();   // increment second and check Dow_Timer
    2f0a:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <RTC_AddOneSecond>
}
    2f0e:	00 00       	nop
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	ff 91       	pop	r31
    2f16:	ef 91       	pop	r30
    2f18:	bf 91       	pop	r27
    2f1a:	af 91       	pop	r26
    2f1c:	9f 91       	pop	r25
    2f1e:	8f 91       	pop	r24
    2f20:	7f 91       	pop	r23
    2f22:	6f 91       	pop	r22
    2f24:	5f 91       	pop	r21
    2f26:	4f 91       	pop	r20
    2f28:	3f 91       	pop	r19
    2f2a:	2f 91       	pop	r18
    2f2c:	0f 90       	pop	r0
    2f2e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2f32:	0f 90       	pop	r0
    2f34:	1f 90       	pop	r1
    2f36:	18 95       	reti

00002f38 <RTC_FindTimerRawIndex>:
 
 Sat ind fra nyere softwareversion
 
 ******************************************************************************/

static uint8_t RTC_FindTimerRawIndex(uint8_t dow,uint16_t time_minutes) {
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	2c 97       	sbiw	r28, 0x0c	; 12
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	8a 87       	std	Y+10, r24	; 0x0a
    2f4e:	7c 87       	std	Y+12, r23	; 0x0c
    2f50:	6b 87       	std	Y+11, r22	; 0x0b
	
	uint8_t search_timers=(dow>0)?8:2;
    2f52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f54:	88 23       	and	r24, r24
    2f56:	11 f0       	breq	.+4      	; 0x2f5c <RTC_FindTimerRawIndex+0x24>
    2f58:	88 e0       	ldi	r24, 0x08	; 8
    2f5a:	01 c0       	rjmp	.+2      	; 0x2f5e <RTC_FindTimerRawIndex+0x26>
    2f5c:	82 e0       	ldi	r24, 0x02	; 2
    2f5e:	8e 83       	std	Y+6, r24	; 0x06
	int8_t raw_index=-1;
    2f60:	8f ef       	ldi	r24, 0xFF	; 255
    2f62:	89 83       	std	Y+1, r24	; 0x01
	uint8_t i;
	for (i=0;i<search_timers;i++) {
    2f64:	1a 82       	std	Y+2, r1	; 0x02
    2f66:	4a c0       	rjmp	.+148    	; 0x2ffc <RTC_FindTimerRawIndex+0xc4>
		{
			uint8_t idx_raw = timers_get_raw_index(dow,0);
    2f68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f6a:	88 0f       	add	r24, r24
    2f6c:	88 0f       	add	r24, r24
    2f6e:	8b 83       	std	Y+3, r24	; 0x03
			uint8_t stop = idx_raw+RTC_TIMERS_PER_DOW;
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	8c 5f       	subi	r24, 0xFC	; 252
    2f74:	8f 83       	std	Y+7, r24	; 0x07
			uint16_t maxtime=0;
    2f76:	1d 82       	std	Y+5, r1	; 0x05
    2f78:	1c 82       	std	Y+4, r1	; 0x04
			// each timer until time_minutes
			for (; idx_raw<stop; idx_raw++){
    2f7a:	24 c0       	rjmp	.+72     	; 0x2fc4 <RTC_FindTimerRawIndex+0x8c>
				// check if timer > maxtime and timer <= actual time
				uint16_t table_time = eeprom_timers_read_raw(idx_raw) & 0x0fff;
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	0e 94 10 07 	call	0xe20	; 0xe20 <eeprom_timers_read_raw>
    2f82:	9f 70       	andi	r25, 0x0F	; 15
    2f84:	99 87       	std	Y+9, r25	; 0x09
    2f86:	88 87       	std	Y+8, r24	; 0x08
				if (table_time>=24*60) continue;
    2f88:	88 85       	ldd	r24, Y+8	; 0x08
    2f8a:	99 85       	ldd	r25, Y+9	; 0x09
    2f8c:	80 3a       	cpi	r24, 0xA0	; 160
    2f8e:	95 40       	sbci	r25, 0x05	; 5
    2f90:	a8 f4       	brcc	.+42     	; 0x2fbc <RTC_FindTimerRawIndex+0x84>
				if ((table_time >= maxtime) && (table_time <= time_minutes)) {
    2f92:	28 85       	ldd	r18, Y+8	; 0x08
    2f94:	39 85       	ldd	r19, Y+9	; 0x09
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9a:	28 17       	cp	r18, r24
    2f9c:	39 07       	cpc	r19, r25
    2f9e:	78 f0       	brcs	.+30     	; 0x2fbe <RTC_FindTimerRawIndex+0x86>
    2fa0:	28 85       	ldd	r18, Y+8	; 0x08
    2fa2:	39 85       	ldd	r19, Y+9	; 0x09
    2fa4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fa6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fa8:	82 17       	cp	r24, r18
    2faa:	93 07       	cpc	r25, r19
    2fac:	40 f0       	brcs	.+16     	; 0x2fbe <RTC_FindTimerRawIndex+0x86>
					maxtime = table_time;
    2fae:	88 85       	ldd	r24, Y+8	; 0x08
    2fb0:	99 85       	ldd	r25, Y+9	; 0x09
    2fb2:	9d 83       	std	Y+5, r25	; 0x05
    2fb4:	8c 83       	std	Y+4, r24	; 0x04
					raw_index=idx_raw;
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	01 c0       	rjmp	.+2      	; 0x2fbe <RTC_FindTimerRawIndex+0x86>
			uint16_t maxtime=0;
			// each timer until time_minutes
			for (; idx_raw<stop; idx_raw++){
				// check if timer > maxtime and timer <= actual time
				uint16_t table_time = eeprom_timers_read_raw(idx_raw) & 0x0fff;
				if (table_time>=24*60) continue;
    2fbc:	00 00       	nop
		{
			uint8_t idx_raw = timers_get_raw_index(dow,0);
			uint8_t stop = idx_raw+RTC_TIMERS_PER_DOW;
			uint16_t maxtime=0;
			// each timer until time_minutes
			for (; idx_raw<stop; idx_raw++){
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	8f 5f       	subi	r24, 0xFF	; 255
    2fc2:	8b 83       	std	Y+3, r24	; 0x03
    2fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc8:	98 17       	cp	r25, r24
    2fca:	c0 f2       	brcs	.-80     	; 0x2f7c <RTC_FindTimerRawIndex+0x44>
					maxtime = table_time;
					raw_index=idx_raw;
				}
			}
		}
		if (raw_index>=0) {
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	88 23       	and	r24, r24
    2fd0:	dc f4       	brge	.+54     	; 0x3008 <RTC_FindTimerRawIndex+0xd0>
			break;
		}
		if (dow>0) dow=(dow+(7-2))%7+1;
    2fd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd4:	88 23       	and	r24, r24
    2fd6:	59 f0       	breq	.+22     	; 0x2fee <RTC_FindTimerRawIndex+0xb6>
    2fd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fda:	88 2f       	mov	r24, r24
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	05 96       	adiw	r24, 0x05	; 5
    2fe0:	27 e0       	ldi	r18, 0x07	; 7
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	b9 01       	movw	r22, r18
    2fe6:	0e 94 9a 18 	call	0x3134	; 0x3134 <__divmodhi4>
    2fea:	8f 5f       	subi	r24, 0xFF	; 255
    2fec:	8a 87       	std	Y+10, r24	; 0x0a
		time_minutes=24*60;
    2fee:	80 ea       	ldi	r24, 0xA0	; 160
    2ff0:	95 e0       	ldi	r25, 0x05	; 5
    2ff2:	9c 87       	std	Y+12, r25	; 0x0c
    2ff4:	8b 87       	std	Y+11, r24	; 0x0b
static uint8_t RTC_FindTimerRawIndex(uint8_t dow,uint16_t time_minutes) {
	
	uint8_t search_timers=(dow>0)?8:2;
	int8_t raw_index=-1;
	uint8_t i;
	for (i=0;i<search_timers;i++) {
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	8f 5f       	subi	r24, 0xFF	; 255
    2ffa:	8a 83       	std	Y+2, r24	; 0x02
    2ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    3000:	98 17       	cp	r25, r24
    3002:	08 f4       	brcc	.+2      	; 0x3006 <RTC_FindTimerRawIndex+0xce>
    3004:	b1 cf       	rjmp	.-158    	; 0x2f68 <RTC_FindTimerRawIndex+0x30>
    3006:	01 c0       	rjmp	.+2      	; 0x300a <RTC_FindTimerRawIndex+0xd2>
					raw_index=idx_raw;
				}
			}
		}
		if (raw_index>=0) {
			break;
    3008:	00 00       	nop
		}
		if (dow>0) dow=(dow+(7-2))%7+1;
		time_minutes=24*60;
	}
	return raw_index;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
}
    300c:	2c 96       	adiw	r28, 0x0c	; 12
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	08 95       	ret

0000301e <RTC_ActualTimerTemperature>:


uint8_t RTC_ActualTimerTemperature(bool exact) {
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	27 97       	sbiw	r28, 0x07	; 7
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	8f 83       	std	Y+7, r24	; 0x07
    uint16_t minutes = RTC.hh*60 + RTC.mm;
    3034:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <RTC+0x3>
    3038:	88 2f       	mov	r24, r24
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	4c e3       	ldi	r20, 0x3C	; 60
    303e:	48 9f       	mul	r20, r24
    3040:	90 01       	movw	r18, r0
    3042:	49 9f       	mul	r20, r25
    3044:	30 0d       	add	r19, r0
    3046:	11 24       	eor	r1, r1
    3048:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <RTC+0x4>
    304c:	88 2f       	mov	r24, r24
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	82 0f       	add	r24, r18
    3052:	93 1f       	adc	r25, r19
    3054:	9a 83       	std	Y+2, r25	; 0x02
    3056:	89 83       	std	Y+1, r24	; 0x01
    int8_t dow=((config.timer_mode==1)?RTC.DOW:0);
    3058:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <config+0x22>
    305c:	81 30       	cpi	r24, 0x01	; 1
    305e:	19 f4       	brne	.+6      	; 0x3066 <RTC_ActualTimerTemperature+0x48>
    3060:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <RTC+0x6>
    3064:	01 c0       	rjmp	.+2      	; 0x3068 <RTC_ActualTimerTemperature+0x4a>
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	8b 83       	std	Y+3, r24	; 0x03
    int8_t raw_index=RTC_FindTimerRawIndex(dow,minutes);
    306a:	2b 81       	ldd	r18, Y+3	; 0x03
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	9a 81       	ldd	r25, Y+2	; 0x02
    3070:	bc 01       	movw	r22, r24
    3072:	82 2f       	mov	r24, r18
    3074:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <RTC_FindTimerRawIndex>
    3078:	8c 83       	std	Y+4, r24	; 0x04
    uint16_t data = eeprom_timers_read_raw(raw_index);
    307a:	8c 81       	ldd	r24, Y+4	; 0x04
    307c:	0e 94 10 07 	call	0xe20	; 0xe20 <eeprom_timers_read_raw>
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
    if (raw_index<0) return 0; //not found
    3084:	8c 81       	ldd	r24, Y+4	; 0x04
    3086:	88 23       	and	r24, r24
    3088:	14 f4       	brge	.+4      	; 0x308e <RTC_ActualTimerTemperature+0x70>
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	26 c0       	rjmp	.+76     	; 0x30da <RTC_ActualTimerTemperature+0xbc>
    if (exact) {
    308e:	8f 81       	ldd	r24, Y+7	; 0x07
    3090:	88 23       	and	r24, r24
    3092:	b9 f0       	breq	.+46     	; 0x30c2 <RTC_ActualTimerTemperature+0xa4>
        if ((data&0xfff) != minutes) return 0;
    3094:	8d 81       	ldd	r24, Y+5	; 0x05
    3096:	9e 81       	ldd	r25, Y+6	; 0x06
    3098:	9c 01       	movw	r18, r24
    309a:	3f 70       	andi	r19, 0x0F	; 15
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	9a 81       	ldd	r25, Y+2	; 0x02
    30a0:	28 17       	cp	r18, r24
    30a2:	39 07       	cpc	r19, r25
    30a4:	11 f0       	breq	.+4      	; 0x30aa <RTC_ActualTimerTemperature+0x8c>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	18 c0       	rjmp	.+48     	; 0x30da <RTC_ActualTimerTemperature+0xbc>
        if ((raw_index/RTC_TIMERS_PER_DOW) != dow) return 0;
    30aa:	8c 81       	ldd	r24, Y+4	; 0x04
    30ac:	88 23       	and	r24, r24
    30ae:	0c f4       	brge	.+2      	; 0x30b2 <RTC_ActualTimerTemperature+0x94>
    30b0:	8d 5f       	subi	r24, 0xFD	; 253
    30b2:	85 95       	asr	r24
    30b4:	85 95       	asr	r24
    30b6:	98 2f       	mov	r25, r24
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	98 17       	cp	r25, r24
    30bc:	11 f0       	breq	.+4      	; 0x30c2 <RTC_ActualTimerTemperature+0xa4>
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	0c c0       	rjmp	.+24     	; 0x30da <RTC_ActualTimerTemperature+0xbc>
    }
    return temperature_table[(data >> 12) & 3];
    30c2:	8d 81       	ldd	r24, Y+5	; 0x05
    30c4:	9e 81       	ldd	r25, Y+6	; 0x06
    30c6:	89 2f       	mov	r24, r25
    30c8:	99 27       	eor	r25, r25
    30ca:	82 95       	swap	r24
    30cc:	8f 70       	andi	r24, 0x0F	; 15
    30ce:	83 70       	andi	r24, 0x03	; 3
    30d0:	99 27       	eor	r25, r25
    30d2:	8c 58       	subi	r24, 0x8C	; 140
    30d4:	9e 4f       	sbci	r25, 0xFE	; 254
    30d6:	fc 01       	movw	r30, r24
    30d8:	80 81       	ld	r24, Z
    30da:	27 96       	adiw	r28, 0x07	; 7
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	cd bf       	out	0x3d, r28	; 61
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	08 95       	ret

000030ec <__mulsi3>:
    30ec:	db 01       	movw	r26, r22
    30ee:	8f 93       	push	r24
    30f0:	9f 93       	push	r25
    30f2:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__muluhisi3>
    30f6:	bf 91       	pop	r27
    30f8:	af 91       	pop	r26
    30fa:	a2 9f       	mul	r26, r18
    30fc:	80 0d       	add	r24, r0
    30fe:	91 1d       	adc	r25, r1
    3100:	a3 9f       	mul	r26, r19
    3102:	90 0d       	add	r25, r0
    3104:	b2 9f       	mul	r27, r18
    3106:	90 0d       	add	r25, r0
    3108:	11 24       	eor	r1, r1
    310a:	08 95       	ret

0000310c <__udivmodhi4>:
    310c:	aa 1b       	sub	r26, r26
    310e:	bb 1b       	sub	r27, r27
    3110:	51 e1       	ldi	r21, 0x11	; 17
    3112:	07 c0       	rjmp	.+14     	; 0x3122 <__udivmodhi4_ep>

00003114 <__udivmodhi4_loop>:
    3114:	aa 1f       	adc	r26, r26
    3116:	bb 1f       	adc	r27, r27
    3118:	a6 17       	cp	r26, r22
    311a:	b7 07       	cpc	r27, r23
    311c:	10 f0       	brcs	.+4      	; 0x3122 <__udivmodhi4_ep>
    311e:	a6 1b       	sub	r26, r22
    3120:	b7 0b       	sbc	r27, r23

00003122 <__udivmodhi4_ep>:
    3122:	88 1f       	adc	r24, r24
    3124:	99 1f       	adc	r25, r25
    3126:	5a 95       	dec	r21
    3128:	a9 f7       	brne	.-22     	; 0x3114 <__udivmodhi4_loop>
    312a:	80 95       	com	r24
    312c:	90 95       	com	r25
    312e:	bc 01       	movw	r22, r24
    3130:	cd 01       	movw	r24, r26
    3132:	08 95       	ret

00003134 <__divmodhi4>:
    3134:	97 fb       	bst	r25, 7
    3136:	07 2e       	mov	r0, r23
    3138:	16 f4       	brtc	.+4      	; 0x313e <__divmodhi4+0xa>
    313a:	00 94       	com	r0
    313c:	07 d0       	rcall	.+14     	; 0x314c <__divmodhi4_neg1>
    313e:	77 fd       	sbrc	r23, 7
    3140:	09 d0       	rcall	.+18     	; 0x3154 <__divmodhi4_neg2>
    3142:	0e 94 86 18 	call	0x310c	; 0x310c <__udivmodhi4>
    3146:	07 fc       	sbrc	r0, 7
    3148:	05 d0       	rcall	.+10     	; 0x3154 <__divmodhi4_neg2>
    314a:	3e f4       	brtc	.+14     	; 0x315a <__divmodhi4_exit>

0000314c <__divmodhi4_neg1>:
    314c:	90 95       	com	r25
    314e:	81 95       	neg	r24
    3150:	9f 4f       	sbci	r25, 0xFF	; 255
    3152:	08 95       	ret

00003154 <__divmodhi4_neg2>:
    3154:	70 95       	com	r23
    3156:	61 95       	neg	r22
    3158:	7f 4f       	sbci	r23, 0xFF	; 255

0000315a <__divmodhi4_exit>:
    315a:	08 95       	ret

0000315c <__udivmodsi4>:
    315c:	a1 e2       	ldi	r26, 0x21	; 33
    315e:	1a 2e       	mov	r1, r26
    3160:	aa 1b       	sub	r26, r26
    3162:	bb 1b       	sub	r27, r27
    3164:	fd 01       	movw	r30, r26
    3166:	0d c0       	rjmp	.+26     	; 0x3182 <__udivmodsi4_ep>

00003168 <__udivmodsi4_loop>:
    3168:	aa 1f       	adc	r26, r26
    316a:	bb 1f       	adc	r27, r27
    316c:	ee 1f       	adc	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	a2 17       	cp	r26, r18
    3172:	b3 07       	cpc	r27, r19
    3174:	e4 07       	cpc	r30, r20
    3176:	f5 07       	cpc	r31, r21
    3178:	20 f0       	brcs	.+8      	; 0x3182 <__udivmodsi4_ep>
    317a:	a2 1b       	sub	r26, r18
    317c:	b3 0b       	sbc	r27, r19
    317e:	e4 0b       	sbc	r30, r20
    3180:	f5 0b       	sbc	r31, r21

00003182 <__udivmodsi4_ep>:
    3182:	66 1f       	adc	r22, r22
    3184:	77 1f       	adc	r23, r23
    3186:	88 1f       	adc	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	1a 94       	dec	r1
    318c:	69 f7       	brne	.-38     	; 0x3168 <__udivmodsi4_loop>
    318e:	60 95       	com	r22
    3190:	70 95       	com	r23
    3192:	80 95       	com	r24
    3194:	90 95       	com	r25
    3196:	9b 01       	movw	r18, r22
    3198:	ac 01       	movw	r20, r24
    319a:	bd 01       	movw	r22, r26
    319c:	cf 01       	movw	r24, r30
    319e:	08 95       	ret

000031a0 <__divmodsi4>:
    31a0:	05 2e       	mov	r0, r21
    31a2:	97 fb       	bst	r25, 7
    31a4:	1e f4       	brtc	.+6      	; 0x31ac <__divmodsi4+0xc>
    31a6:	00 94       	com	r0
    31a8:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__negsi2>
    31ac:	57 fd       	sbrc	r21, 7
    31ae:	07 d0       	rcall	.+14     	; 0x31be <__divmodsi4_neg2>
    31b0:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodsi4>
    31b4:	07 fc       	sbrc	r0, 7
    31b6:	03 d0       	rcall	.+6      	; 0x31be <__divmodsi4_neg2>
    31b8:	4e f4       	brtc	.+18     	; 0x31cc <__divmodsi4_exit>
    31ba:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__negsi2>

000031be <__divmodsi4_neg2>:
    31be:	50 95       	com	r21
    31c0:	40 95       	com	r20
    31c2:	30 95       	com	r19
    31c4:	21 95       	neg	r18
    31c6:	3f 4f       	sbci	r19, 0xFF	; 255
    31c8:	4f 4f       	sbci	r20, 0xFF	; 255
    31ca:	5f 4f       	sbci	r21, 0xFF	; 255

000031cc <__divmodsi4_exit>:
    31cc:	08 95       	ret

000031ce <__negsi2>:
    31ce:	90 95       	com	r25
    31d0:	80 95       	com	r24
    31d2:	70 95       	com	r23
    31d4:	61 95       	neg	r22
    31d6:	7f 4f       	sbci	r23, 0xFF	; 255
    31d8:	8f 4f       	sbci	r24, 0xFF	; 255
    31da:	9f 4f       	sbci	r25, 0xFF	; 255
    31dc:	08 95       	ret

000031de <__umulhisi3>:
    31de:	a2 9f       	mul	r26, r18
    31e0:	b0 01       	movw	r22, r0
    31e2:	b3 9f       	mul	r27, r19
    31e4:	c0 01       	movw	r24, r0
    31e6:	a3 9f       	mul	r26, r19
    31e8:	70 0d       	add	r23, r0
    31ea:	81 1d       	adc	r24, r1
    31ec:	11 24       	eor	r1, r1
    31ee:	91 1d       	adc	r25, r1
    31f0:	b2 9f       	mul	r27, r18
    31f2:	70 0d       	add	r23, r0
    31f4:	81 1d       	adc	r24, r1
    31f6:	11 24       	eor	r1, r1
    31f8:	91 1d       	adc	r25, r1
    31fa:	08 95       	ret

000031fc <__muluhisi3>:
    31fc:	0e 94 ef 18 	call	0x31de	; 0x31de <__umulhisi3>
    3200:	a5 9f       	mul	r26, r21
    3202:	90 0d       	add	r25, r0
    3204:	b4 9f       	mul	r27, r20
    3206:	90 0d       	add	r25, r0
    3208:	a4 9f       	mul	r26, r20
    320a:	80 0d       	add	r24, r0
    320c:	91 1d       	adc	r25, r1
    320e:	11 24       	eor	r1, r1
    3210:	08 95       	ret

00003212 <__umoddi3>:
    3212:	68 94       	set
    3214:	01 c0       	rjmp	.+2      	; 0x3218 <__udivdi3_umoddi3>

00003216 <__udivdi3>:
    3216:	e8 94       	clt

00003218 <__udivdi3_umoddi3>:
    3218:	8f 92       	push	r8
    321a:	9f 92       	push	r9
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	0e 94 17 19 	call	0x322e	; 0x322e <__udivmod64>
    3224:	df 91       	pop	r29
    3226:	cf 91       	pop	r28
    3228:	9f 90       	pop	r9
    322a:	8f 90       	pop	r8
    322c:	08 95       	ret

0000322e <__udivmod64>:
    322e:	88 24       	eor	r8, r8
    3230:	99 24       	eor	r9, r9
    3232:	f4 01       	movw	r30, r8
    3234:	e4 01       	movw	r28, r8
    3236:	b0 e4       	ldi	r27, 0x40	; 64
    3238:	9f 93       	push	r25
    323a:	aa 27       	eor	r26, r26
    323c:	9a 15       	cp	r25, r10
    323e:	8b 04       	cpc	r8, r11
    3240:	9c 04       	cpc	r9, r12
    3242:	ed 05       	cpc	r30, r13
    3244:	fe 05       	cpc	r31, r14
    3246:	cf 05       	cpc	r28, r15
    3248:	d0 07       	cpc	r29, r16
    324a:	a1 07       	cpc	r26, r17
    324c:	98 f4       	brcc	.+38     	; 0x3274 <__udivmod64+0x46>
    324e:	ad 2f       	mov	r26, r29
    3250:	dc 2f       	mov	r29, r28
    3252:	cf 2f       	mov	r28, r31
    3254:	fe 2f       	mov	r31, r30
    3256:	e9 2d       	mov	r30, r9
    3258:	98 2c       	mov	r9, r8
    325a:	89 2e       	mov	r8, r25
    325c:	98 2f       	mov	r25, r24
    325e:	87 2f       	mov	r24, r23
    3260:	76 2f       	mov	r23, r22
    3262:	65 2f       	mov	r22, r21
    3264:	54 2f       	mov	r21, r20
    3266:	43 2f       	mov	r20, r19
    3268:	32 2f       	mov	r19, r18
    326a:	22 27       	eor	r18, r18
    326c:	b8 50       	subi	r27, 0x08	; 8
    326e:	31 f7       	brne	.-52     	; 0x323c <__udivmod64+0xe>
    3270:	bf 91       	pop	r27
    3272:	27 c0       	rjmp	.+78     	; 0x32c2 <__udivmod64+0x94>
    3274:	1b 2e       	mov	r1, r27
    3276:	bf 91       	pop	r27
    3278:	bb 27       	eor	r27, r27
    327a:	22 0f       	add	r18, r18
    327c:	33 1f       	adc	r19, r19
    327e:	44 1f       	adc	r20, r20
    3280:	55 1f       	adc	r21, r21
    3282:	66 1f       	adc	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	88 1f       	adc	r24, r24
    3288:	99 1f       	adc	r25, r25
    328a:	88 1c       	adc	r8, r8
    328c:	99 1c       	adc	r9, r9
    328e:	ee 1f       	adc	r30, r30
    3290:	ff 1f       	adc	r31, r31
    3292:	cc 1f       	adc	r28, r28
    3294:	dd 1f       	adc	r29, r29
    3296:	aa 1f       	adc	r26, r26
    3298:	bb 1f       	adc	r27, r27
    329a:	8a 14       	cp	r8, r10
    329c:	9b 04       	cpc	r9, r11
    329e:	ec 05       	cpc	r30, r12
    32a0:	fd 05       	cpc	r31, r13
    32a2:	ce 05       	cpc	r28, r14
    32a4:	df 05       	cpc	r29, r15
    32a6:	a0 07       	cpc	r26, r16
    32a8:	b1 07       	cpc	r27, r17
    32aa:	48 f0       	brcs	.+18     	; 0x32be <__udivmod64+0x90>
    32ac:	8a 18       	sub	r8, r10
    32ae:	9b 08       	sbc	r9, r11
    32b0:	ec 09       	sbc	r30, r12
    32b2:	fd 09       	sbc	r31, r13
    32b4:	ce 09       	sbc	r28, r14
    32b6:	df 09       	sbc	r29, r15
    32b8:	a0 0b       	sbc	r26, r16
    32ba:	b1 0b       	sbc	r27, r17
    32bc:	21 60       	ori	r18, 0x01	; 1
    32be:	1a 94       	dec	r1
    32c0:	e1 f6       	brne	.-72     	; 0x327a <__udivmod64+0x4c>
    32c2:	2e f4       	brtc	.+10     	; 0x32ce <__udivmod64+0xa0>
    32c4:	94 01       	movw	r18, r8
    32c6:	af 01       	movw	r20, r30
    32c8:	be 01       	movw	r22, r28
    32ca:	cd 01       	movw	r24, r26
    32cc:	00 0c       	add	r0, r0
    32ce:	08 95       	ret

000032d0 <__adddi3>:
    32d0:	2a 0d       	add	r18, r10
    32d2:	3b 1d       	adc	r19, r11
    32d4:	4c 1d       	adc	r20, r12
    32d6:	5d 1d       	adc	r21, r13
    32d8:	6e 1d       	adc	r22, r14
    32da:	7f 1d       	adc	r23, r15
    32dc:	80 1f       	adc	r24, r16
    32de:	91 1f       	adc	r25, r17
    32e0:	08 95       	ret

000032e2 <_exit>:
    32e2:	f8 94       	cli

000032e4 <__stop_program>:
    32e4:	ff cf       	rjmp	.-2      	; 0x32e4 <__stop_program>
